<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sulami's blog</title><link>https://sulami.github.io/</link><description></description><atom:link href="https://sulami.github.io/feed/coding.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 23 Jun 2014 14:15:00 +0200</lastBuildDate><item><title>Hexclock in C</title><link>https://sulami.github.io/hexclock-in-c.html</link><description>&lt;p&gt;Earlier this weekend, I found &lt;a href="http://www.jacopocolo.com/hexclock/"&gt;Hexclock&lt;/a&gt; on hackernews, a simple website
which interpretes the time as hexadecimal color value and colors the whole page
using this value. I had nothing to do and decided to clone it in C and ncurses
for local use, &lt;a href="http://www.reddit.com/r/unixporn/"&gt;/r/unixporn&lt;/a&gt; screenshots and stuff like this. Anyway,
&lt;a href="https://github.com/sulami/spielwiese/tree/master/cHexclock"&gt;here&lt;/a&gt; is the source, if you ask me really nice, I can also compile i686 and
x86_64 binaries for you.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 23 Jun 2014 14:15:00 +0200</pubDate><guid>tag:https://sulami.github.io,2014-06-23:hexclock-in-c.html</guid><category>c</category><category>hexclock</category><category>hackernews</category></item><item><title>On Python performance</title><link>https://sulami.github.io/on-python-performance.html</link><description>&lt;p&gt;I recently wrote &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"&gt;Conway's Game of
Life&lt;/a&gt; in both
performance optimized Python 3.3 and C99, compiled with clang, without
optimizations. I usually say to people that Python is quite fast when properly
optimized, and amongst interpreted languages this is true. But after this
experiment, I understand how big the difference can be und the right
conditions. Here are the runtimes of my Games of Life, generating a 120x40
screen and printing it out for 5000 cycles:&lt;/p&gt;
&lt;p&gt;Python 3.3, fairly optimized: 2:05,73 minutes&lt;/p&gt;
&lt;p&gt;C, not optimized: 9,413 seconds&lt;/p&gt;
&lt;p&gt;This is a pretty big difference, ~1330%. This should explain, why, besides the
stellar portability, Kernels and generally all performance critical software is
written in some form of C.&lt;/p&gt;
&lt;p&gt;Huge parts of this are actually printing the screen, looks like Python's print
is quite slow. Without printing it, generating 5000 cycles takes 32,244
seconds, which is still more than three times as much as C needs with printing.&lt;/p&gt;
&lt;p&gt;For most operations, Python's speed is more than needed, but sometimes you just
need that extra bit of speed, and this is why you can &lt;a href="https://docs.python.org/3.4/library/ctypes.html"&gt;use C from within
Python&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 12 May 2014 02:15:00 +0200</pubDate><guid>tag:https://sulami.github.io,2014-05-12:on-python-performance.html</guid><category>python</category><category>c</category></item><item><title>Test-driven development in vim</title><link>https://sulami.github.io/test-driven-development-in-vim.html</link><description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;Test-driven development (TDD)&lt;/a&gt; is a way of developing software by using
tests over and over again. When I first was introduced to this concept, I
thought, automated tests are a nice idea, why not? Then I read a book about
TDD, which proceeded to explain how you start your project by writing a test
that (obviously) fails, then start your actual project, and test again. At this
point in time, we have a something that returns a default webpage, or zero. Not
even printing "Hello World" or "Success!". The next step is to write another
test, which checks for some actual content or functionality. After this test
fails (which by the way is important, as it shows that the test will hopefully
not produce false positives), we write the piece of content or functionality.&lt;/p&gt;
&lt;p&gt;In the beginning, this way of writing code seems (and is) incredibly slow, and
I find myself skipping the first five tests until I have something that
actually produces useful output. This is sort of okay, I do not think it will
hurt my code in any major way. But after those initial skipped tests, say 10
minutes into the project, I start to religiously write tests for everything
that happens, which is way easier than implementing proper tests for all the
different stages and levels when you wrote code for several hours and start
wasting time by manually testing changes. I think, everything that takes more
than 30 minutes to code benefits from TDD.&lt;/p&gt;
&lt;p&gt;But let's have a look at some actual TDD using vim and C. C is not often
written using TDD, but giving usually rather poor debugging output compared to
interpreted languages, TDD is even more useful, as you will instantaneously see
when a change breaks any functionality. To make testing easier, we will define
a keyboard mapping to start our tests from within vim.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #902000"&gt;map&lt;/span&gt; &lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #007020"&gt;t&lt;/span&gt; :&lt;span style="color: #666666"&gt;!&lt;/span&gt;make &lt;span style="color: #4070a0"&gt;-B&lt;/span&gt; tests &lt;span style="color: #666666"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./tests&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt;CR&lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This mapping will call make in a shell (which means you have to have make
installed), compile our &lt;em&gt;tests.c&lt;/em&gt; file and run it. Depending on which language
you are using, which kind of application you are developing and how your tests
work, you might want to change this a bit. I am testing a library I am writing,
which gets included in &lt;em&gt;tests.c&lt;/em&gt;.  The basic structure looks like this:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #60a0b0; font-style: italic"&gt;/* Tests for my library */&lt;/span&gt;
&lt;span style="color: #007020"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style="color: #007020"&gt;#include &amp;lt;assert.h&amp;gt;&lt;/span&gt;
&lt;span style="color: #007020"&gt;#include &amp;quot;mylib.h&amp;quot;&lt;/span&gt;

&lt;span style="color: #007020"&gt;#define run_test(fn_name) \&lt;/span&gt;
&lt;span style="color: #007020"&gt;    printf(&amp;quot;%s\n&amp;quot;, #fn_name); \&lt;/span&gt;
&lt;span style="color: #007020"&gt;    fn_name();&lt;/span&gt;

&lt;span style="color: #902000"&gt;void&lt;/span&gt; &lt;span style="color: #06287e"&gt;test_example_test&lt;/span&gt;() {
    &lt;span style="color: #902000"&gt;int&lt;/span&gt; test &lt;span style="color: #666666"&gt;=&lt;/span&gt; fancy_function(&lt;span style="color: #40a070"&gt;42&lt;/span&gt;);
    assert(test &lt;span style="color: #666666"&gt;==&lt;/span&gt; &lt;span style="color: #40a070"&gt;15&lt;/span&gt;);
}

&lt;span style="color: #902000"&gt;int&lt;/span&gt; &lt;span style="color: #06287e"&gt;main&lt;/span&gt;() {
    printf(&lt;span style="color: #4070a0"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #4070a0; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #4070a0"&gt;Running tests:&lt;/span&gt;&lt;span style="color: #4070a0; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #4070a0"&gt;&amp;quot;&lt;/span&gt;);
    run_test(test_example_test);
    printf(&lt;span style="color: #4070a0"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #4070a0; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #4070a0"&gt; =&amp;gt; All tests successful!&lt;/span&gt;&lt;span style="color: #4070a0; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #4070a0"&gt;&amp;quot;&lt;/span&gt;);
    &lt;span style="color: #007020; font-weight: bold"&gt;return&lt;/span&gt;(&lt;span style="color: #40a070"&gt;0&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We include &lt;em&gt;stdio&lt;/em&gt; for printing and &lt;em&gt;assert&lt;/em&gt; for the actual testing. The way
assert works is if the statement assert gets passed is false, which means it
can also be a function call, assert stops the whole program and prints out the
line which produced the error. If everything works as intended, it prints all
the tests it ran, prompts for enter and returns us to vim.  An important part
is to only delete old tests, when the condition they test for is no longer
wanted, so you always test for basic functionality as well as the final
results.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 05 May 2014 14:50:00 +0200</pubDate><guid>tag:https://sulami.github.io,2014-05-05:test-driven-development-in-vim.html</guid><category>vim</category><category>cli</category></item><item><title>Django Tweaking: custom user model fixes</title><link>https://sulami.github.io/django-tweaking-custom-user-model-fixes.html</link><description>&lt;p&gt;I am currently finishing the initial coding of my newest, project, which will
be Peerwire (yes, another one), and because I like it, it is written in Python
using Django, specifically Django 1.6. Now I am using a custom user model to
add some additional fields, which is the only reason, I have to modify existing
apps I use and even Django itself. Here are some of the modifications I did so
far, in case someone encounters the same problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;Making Emails mandatory and unique&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Edit &lt;em&gt;django/contrib/auth/models.py&lt;/em&gt;, search for AbstractUser and change&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;email &lt;span style="color: #666666"&gt;=&lt;/span&gt; ...(blank&lt;span style="color: #666666"&gt;=&lt;/span&gt;True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;email &lt;span style="color: #666666"&gt;=&lt;/span&gt; ...(unique&lt;span style="color: #666666"&gt;=&lt;/span&gt;True)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;Using Cache Machine with your custom user model&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Edit &lt;em&gt;django/contrib/auth/backends.py&lt;/em&gt;, go to line 16 (I think) and change&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;user &lt;span style="color: #666666"&gt;=&lt;/span&gt; UserModel._default_manager.get_by_natural_key(username)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;user &lt;span style="color: #666666"&gt;=&lt;/span&gt; UserModel._default_manager.get(username&lt;span style="color: #666666"&gt;=&lt;/span&gt;username)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;Using django-registration with your custom user model&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Edit &lt;em&gt;registration/forms.py&lt;/em&gt;, in the top change&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;from django.contrib.auth.models import User
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;from django.contrib.auth import get_user_model
User &lt;span style="color: #666666"&gt;=&lt;/span&gt; get_user_model()
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Sat, 19 Apr 2014 22:20:00 +0200</pubDate><guid>tag:https://sulami.github.io,2014-04-19:django-tweaking-custom-user-model-fixes.html</guid><category>django</category></item><item><title>Quickie: Markdown syntax highlighting in vim</title><link>https://sulami.github.io/quickie-markdown-syntax-highlighting-in-vim.html</link><description>&lt;p&gt;I save my Markdown files using the &lt;em&gt;.md&lt;/em&gt; extension, like probably everyone
else in this world, which is fine. Not fine is vim interpreting &lt;em&gt;foobar.md&lt;/em&gt; as
modula2-file, which disables proper syntax highlighting. The fix is quite easy,
but might not survive updates/patches.&lt;/p&gt;
&lt;p&gt;Open vim's architecture-independent data directory, usually something along the
lines of &lt;em&gt;/usr/share/vim/vim74/&lt;/em&gt;. In there, there should be &lt;em&gt;filetype.vim&lt;/em&gt;. If
you open it (with vim, of course...), search for "markdown", which will bring
you to the following line:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #4070a0"&gt;&amp;quot; Markdown&lt;/span&gt;
au BufNewFile,BufRead &lt;span style="color: #666666"&gt;*&lt;/span&gt;.markdown,&lt;span style="color: #666666"&gt;*&lt;/span&gt;.mdown,&lt;span style="color: #666666"&gt;*&lt;/span&gt;.mkd,&lt;span style="color: #666666"&gt;*&lt;/span&gt;.mkdn,README.md  setf markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This line tells vim that those files are probably Markdown files and should be
interpreted this way. Add *.md to the list. Now search for Modula2, and remove
the *.md entry from there, so nothing collides. When starting vim the next
time, it should identify Markdown correctly.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 15 Apr 2014 23:50:00 +0200</pubDate><guid>tag:https://sulami.github.io,2014-04-15:quickie-markdown-syntax-highlighting-in-vim.html</guid><category>vim</category><category>quickie</category><category>markdown</category></item><item><title>Backup your work</title><link>https://sulami.github.io/backup-your-work.html</link><description>&lt;p&gt;When doing serious work involving code (or config files), backups are a
must-have. What you want to do are backups to (sort of) remote
locations, like separate harddrives, external drives or other
computers/servers, which is protecting your precious work from hardware
failure and to some degree (not so) accidental deletion.&lt;/p&gt;
&lt;p&gt;You also want to be using a VCS, I will be using git, because it is
simple, fast and powerful. With git, you can combine version
controlling/branching and backups pretty easily. Go to your remote
location, make a directory &lt;em&gt;foobar.git&lt;/em&gt;, init an empty git repo and add
it as remote to your project. Don't forget to push to it.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;cd &lt;span style="color: #666666"&gt;~/&lt;/span&gt;remote
mkdir foobar.git
cd foobar.git
git init &lt;span style="color: #666666"&gt;--&lt;/span&gt;bare
cd &lt;span style="color: #666666"&gt;~/&lt;/span&gt;project
git remote add backup &lt;span style="color: #666666"&gt;~/&lt;/span&gt;remote&lt;span style="color: #666666"&gt;/&lt;/span&gt;foobar.git
git push backup master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a minimal example of how to do this. You will want to exclude
large binary files like images, videos or binaries (duh..), as git can't
compare those and will compress each version. Instead, you probably want
to just compress and store them independently, version-wise or just one
set, depending on the type of files. Consider using tar, rsync and/or
cron for these backups.&lt;/p&gt;
&lt;p&gt;In my case, I backup a simple video platform, backing up all the code
and configs using git and the video files, thumbnails and database in a
.tar.xz of which I only store the newest version. I store all my work
multiple times, 2 times on my workstation in case of hardware failure (I
don't use a RAID at the moment), once on a local server and once on an
external drive which is offline most of the time, so it even is
protected against malicious attacks.&lt;/p&gt;
&lt;p&gt;I personally don't like Dropbox, Google Drive, Skydrive and all those
other clouds, because I prefer to keep my data on my own. Dropbox is
nice for syncing PDFs over different devices, but for everything
slightly important, I use git with a local repo and sometimes GitHub. In
case you now say, you can't afford your own in-house server, get a
Raspberry Pi Mod. B with a small SD-card, a power cable and some sort of
external drive, totalling maybe \$100. It uses near to no power, can run
24/7 without any noise or noticeble heat and use the external drive to
save all your stuff on a separate machine. It's that easy.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 10 Mar 2014 23:58:00 +0100</pubDate><guid>tag:https://sulami.github.io,2014-03-10:backup-your-work.html</guid><category>cron</category><category>dropbox</category><category>git</category><category>google drive</category><category>homeserver</category><category>raspberrypi</category><category>security</category></item><item><title>Quickie: paste into vim</title><link>https://sulami.github.io/quickie-paste-into-vim.html</link><description>&lt;p&gt;Pasting code into vim is painful, because vim tends to indent every line
further than the one before, which forces me to unindent everything
manually. But as I learned today, vim has a paste-mode which circumvents
this behaviour.&lt;/p&gt;
&lt;p&gt;Just use the commandline to &lt;em&gt;:set paste&lt;/em&gt;, paste your code and &lt;em&gt;:set
nopaste&lt;/em&gt; again. Or, even better, bind this to hotkeys.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Wed, 05 Mar 2014 13:22:00 +0100</pubDate><guid>tag:https://sulami.github.io,2014-03-05:quickie-paste-into-vim.html</guid><category>quickie</category><category>cli</category><category>vim</category></item><item><title>Vim-Fu: some tweaks for your setup</title><link>https://sulami.github.io/vim-fu-some-tweaks-for-your-setup.html</link><description>&lt;p&gt;Vim is awesome. Fact.&lt;/p&gt;
&lt;p&gt;But if you like using vim as your main editor for everything, maybe even
mainly inside tmux inside ssh, like I do, there are lots of
optimizations available to rapidly increase your productivity.&lt;/p&gt;
&lt;h4&gt;General vimrc&lt;/h4&gt;
&lt;p&gt;Things you want to have in your vimrc:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007020"&gt;# line numbering&lt;/span&gt;
set numbers
&lt;span style="color: #007020"&gt;# indentation python style, 4 spaces&lt;/span&gt;
set smartindent
set tabstop&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #40a070"&gt;4&lt;/span&gt;
set shiftwidth&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #40a070"&gt;4&lt;/span&gt;
set expandtab
set smarttab
&lt;span style="color: #007020"&gt;# colored column, better than auto-linebreaks&lt;/span&gt;
set colorcolumn&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #40a070"&gt;80&lt;/span&gt;
&lt;span style="color: #007020"&gt;# less errors&lt;/span&gt;
silent
&lt;span style="color: #007020"&gt;# useful stuff, personal preferance&lt;/span&gt;
set encoding&lt;span style="color: #666666"&gt;=&lt;/span&gt;utf&lt;span style="color: #666666"&gt;-&lt;/span&gt;&lt;span style="color: #40a070"&gt;8&lt;/span&gt;
set fileformats&lt;span style="color: #666666"&gt;=&lt;/span&gt;unix,dos
&lt;span style="color: #007020"&gt;# use jk to exit insert mode, use whichever key(combination) suits you&lt;/span&gt;
imap jk 
&lt;span style="color: #007020"&gt;# new tabs on Ctrl-T&lt;/span&gt;
map  &lt;span style="color: #666666"&gt;:&lt;/span&gt;tabnew
&lt;span style="color: #007020"&gt;# file explorer on Ctrl-E&lt;/span&gt;
map  &lt;span style="color: #666666"&gt;:&lt;/span&gt;Explore
&lt;span style="color: #007020"&gt;# fix autocompletion, btw, it&amp;#39;s built into vim 7+ and bound to Ctrl-N&lt;/span&gt;
set completeopt&lt;span style="color: #666666"&gt;=&lt;/span&gt;longest,menuone
inoremap   pumvisible() &lt;span style="color: #666666"&gt;?&lt;/span&gt; &lt;span style="color: #4070a0"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #4070a0; font-weight: bold"&gt;\&amp;quot;&lt;/span&gt;&lt;span style="color: #4070a0"&gt; : &amp;quot;&lt;/span&gt;&lt;span style="border: 1px solid #FF0000"&gt;\&lt;/span&gt;u&lt;span style="border: 1px solid #FF0000"&gt;\&lt;/span&gt;&lt;span style="color: #4070a0"&gt;&amp;quot;&lt;/span&gt;
inoremap   pumvisible() &lt;span style="color: #666666"&gt;?&lt;/span&gt; &lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color: #666666"&gt;:&lt;/span&gt; &lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;pumvisible() &lt;span style="color: #666666"&gt;?&lt;/span&gt; &lt;span style="color: #4070a0"&gt;&amp;quot;\Down&amp;gt;&amp;quot;&lt;/span&gt; &lt;span style="color: #666666"&gt;:&lt;/span&gt; &lt;span style="color: #4070a0"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Colors&lt;/h4&gt;
&lt;p&gt;Let's start off easy with the general vim look. If used in terminals,
those will handle parts of your coloring, but I will focus on coloring
vim itself. You probably want to use the same colorscheme for your
terminal and vim in any case.&lt;/p&gt;
&lt;p&gt;To color vim use the &lt;em&gt;colo&lt;/em&gt; command, preferably after you get some a
nice colorscheme from the interwebs. My favourites are &lt;a href="https://github.com/nanotech/jellybeans.vim" title="GitHub"&gt;jellybeans&lt;/a&gt; or
&lt;a href="https://github.com/chriskempson/base16-vim/blob/master/colors/base16-tomorrow.vim" title="GitHub"&gt;base16-tomorrow&lt;/a&gt; for dark and &lt;a href="https://github.com/chriskempson/base16-vim/blob/master/colors/base16-solarized.vim" title="GitHub"&gt;Solarized light&lt;/a&gt; for light screens.
There are themes for shells and other stuff in this repo, have a look
around and read the docs.&lt;/p&gt;
&lt;p&gt;You also might want to change background to dark using &lt;em&gt;set
background=dark&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Pathogen&lt;/h4&gt;
&lt;p&gt;If you plan on using any plugins for vim, use &lt;a href="https://github.com/tpope/vim-pathogenhttp://" title="GitHub"&gt;Pathogen&lt;/a&gt;. That's it.
It loads all your plugins automatically and makes installing and
removing plugins as fast as some seconds. The installation is pretty
straight-forward, just put pathogen.vim into your autoload directory,
add &lt;em&gt;execute pathogen#infect()&lt;/em&gt; to your vimrc and you are ready to go.
All other plugins go into &lt;em&gt;bundle/pluginname&lt;/em&gt; from now on.&lt;/p&gt;
&lt;h4&gt;Powerline / Airline&lt;/h4&gt;
&lt;p&gt;One of my favourite plugins is Powerline, but I actually use
&lt;a href="https://github.com/bling/vim-airline" title="GitHub"&gt;Airline&lt;/a&gt;, which is just written in vimscript and therefore portable
and does not require Python. Airline extends the status bar by a great
deal and gives you loads of useful information while looking cool.&lt;/p&gt;
&lt;p&gt;Airline is sort of hard to install if you haven't done it before. Get it
and put it into the bundle directory, because you are using Pathogen,
aren't you? You then need the &lt;a href="https://github.com/Lokaltog/powerline-fontshttp://" title="GitHub"&gt;right fonts&lt;/a&gt; and use them either in
Gvim (set guifont) or your terminal (Xresources, Xdefaults, whatever
kind of config you are using).&lt;/p&gt;
&lt;p&gt;Some hints for your vimrc if you are using Airline:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;let g&lt;span style="color: #666666"&gt;:&lt;/span&gt;airline_powerline_fonts &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #40a070"&gt;1&lt;/span&gt;
let g&lt;span style="color: #666666"&gt;:&lt;/span&gt;aireline_theme &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt;jellybeans&lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt; &lt;span style="border: 1px solid #FF0000"&gt;#&lt;/span&gt; just my favourite, there is a list on the GitHub pag
set laststatus&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #40a070"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This fixes some errors I encountered and forces an Airline theme.&lt;/p&gt;
&lt;h4&gt;Fugitive&lt;/h4&gt;
&lt;p&gt;Are you using git? If you aren't, you most likely want to. For your
work, your projects, your dotfiles, for everything. Versioning is nice.
Get &lt;a href="https://github.com/tpope/vim-fugitive" title="GitHub"&gt;Fugitive&lt;/a&gt;, it adds some git functionality directly into vim, and
plays nice with Airline.&lt;/p&gt;
&lt;h4&gt;Vinegar&lt;/h4&gt;
&lt;p&gt;You might have noticed how I bound Ctrl-E to :Explore. This is because I
use vim for selecting my files to edit most of the time. &lt;a href="https://github.com/tpope/vim-vinegar" title="GitHub"&gt;Vinegar&lt;/a&gt;
improves the built-in filebrowser in a few ways and makes it a lot more
intuitive.&lt;/p&gt;
&lt;h4&gt;Nerdtree&lt;/h4&gt;
&lt;p&gt;Probably even better than Vinegar might be &lt;a href="https://github.com/scrooloose/nerdtree" title="GitHub"&gt;Nerdtree&lt;/a&gt;. It adds an
additional vsplit with an interactive directory tree to quickly select
files to edit.&lt;/p&gt;
&lt;h4&gt;Surround&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/tpope/vim-surround" title="GitHub"&gt;Surround&lt;/a&gt; adds some new commands to vim concerning surrounding
characters like ",',(,[,{ and \&amp;lt;. You can do stuff like change
surroundings of where you are from single to double quotation marks by
hitting cs'" (first single, then double ones). Sort of useful and does
not hurt.&lt;/p&gt;
&lt;h4&gt;Commentary&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/tpope/vim-commentary" title="GitHub"&gt;Commentary&lt;/a&gt; is a plugin that adds some actions regarding comments in
source code. Easily comment out blocks of code using &lt;em&gt;gc&lt;/em&gt; saves you a
few seconds everytime, which might add up one day.&lt;/p&gt;
&lt;h4&gt;Repeat&lt;/h4&gt;
&lt;p&gt;When using the above plugins, vim does not recognize the added actions
to repeat them, namely the ones from surround and commentary. &lt;a href="https://github.com/tpope/vim-repeat" title="GitHub"&gt;Repeat&lt;/a&gt;
fixes this behaviour.&lt;/p&gt;
&lt;h4&gt;Trailing-Whitespace&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/bronson/vim-trailing-whitespace" title="GitHub"&gt;Traling-Whitespace&lt;/a&gt; is a simple one. It marks trailing whitespaces in
red and introduces the &lt;em&gt;:FixWhitespace&lt;/em&gt; command to remove them.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Sat, 04 Jan 2014 18:37:00 +0100</pubDate><guid>tag:https://sulami.github.io,2014-01-04:vim-fu-some-tweaks-for-your-setup.html</guid><category>cli</category><category>coding</category><category>typing</category><category>vim</category></item><item><title>Quickie: fix Windows' stupid quotation mark behaviour</title><link>https://sulami.github.io/quickie-fix-windows-stupid-quotation-mark-behaviour.html</link><description>&lt;p&gt;Two days ago, my system-SSD died, which happens. Because of this
incident, I lost both my Arch Linux and my Windows 7 installation. While
I wait for a new SSD to arrive, I installed some Win 7 Professional I
found. And while I am German and use the German language for my
operating systems, I prefer qwerty-keyboards over the German qwertz
ones. So I installed Win 7 using the "US - International" layout, which
seemed to work just fine. But it does not.&lt;/p&gt;
&lt;p&gt;When typing quotation marks like " or ', you have to press another key
before it actually gets print, which is annoying while coding, but even
worse for using vim (think ci" or similar). The fix is quite easy:
change the default layout to just "US", and hitting quotation marks
instantly prints quotation marks.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Sun, 29 Dec 2013 22:24:00 +0100</pubDate><guid>tag:https://sulami.github.io,2013-12-29:quickie-fix-windows-stupid-quotation-mark-behaviour.html</guid><category>quickie</category><category>keyboard</category><category>typing</category><category>vim</category></item><item><title>Quickie: vim - exit insert mode faster</title><link>https://sulami.github.io/quickie-vim-exit-insert-mode-faster.html</link><description>&lt;p&gt;I love vim. It's great. But exiting insert mode by pressing escape (or
your rebound key, like capslock) takes a good second before you can go
on being productive. This is all fixed by switching to ctrl-c, which
exits insert mode instantaneously.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 15 Oct 2013 00:57:00 +0200</pubDate><guid>tag:https://sulami.github.io,2013-10-15:quickie-vim-exit-insert-mode-faster.html</guid><category>quickie</category><category>vim</category></item><item><title>Quickie: fix vim in Cygwin</title><link>https://sulami.github.io/quickie-fix-vim-in-cygwin.html</link><description>&lt;p&gt;So I was using Windows for some time, and the Windows-port of vim is not
as good, so I use Cygwin instead. By default, it looks and behaves like
vi, but even stranger. The fix is simple:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;cp &lt;span style="color: #666666"&gt;/&lt;/span&gt;usr&lt;span style="color: #666666"&gt;/&lt;/span&gt;share&lt;span style="color: #666666"&gt;/&lt;/span&gt;vim&lt;span style="color: #666666"&gt;/&lt;/span&gt;vim73&lt;span style="color: #666666"&gt;/&lt;/span&gt;vimrc_example.vim &lt;span style="color: #666666"&gt;~/&lt;/span&gt;.vimrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Be sure to merge possible own contents of your .vimrc.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 12 Aug 2013 13:51:00 +0200</pubDate><guid>tag:https://sulami.github.io,2013-08-12:quickie-fix-vim-in-cygwin.html</guid><category>quickie</category><category>cli</category><category>cygwin</category><category>vim</category></item><item><title>Quickie: use Python 3 features in Python 2</title><link>https://sulami.github.io/quickie-use-python-3-features-in-python-2.html</link><description>&lt;p&gt;I am currently writing on a Python-based program for servers, and being
servers they usually only bring Python 2.7 or 2.6. But I like the
improved Python 3 so much, that I import parts of it to Python 2:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #60a0b0; font-style: italic"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span style="color: #007020; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0e84b5; font-weight: bold"&gt;__future__&lt;/span&gt; &lt;span style="color: #007020; font-weight: bold"&gt;import&lt;/span&gt; print_function

&lt;span style="color: #007020; font-weight: bold"&gt;print&lt;/span&gt;(&lt;span style="color: #4070a0"&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 11 Jun 2013 11:50:00 +0200</pubDate><guid>tag:https://sulami.github.io,2013-06-11:quickie-use-python-3-features-in-python-2.html</guid><category>quickie</category><category>python</category></item><item><title>Vim pro-tip: swap caps-lock and escape</title><link>https://sulami.github.io/vim-pro-tip-swap-caps-lock-and-escape.html</link><description>&lt;p&gt;Whoever uses vim a lot will have witnessed the difficulty to switch out
of insert-mode by using escape, mainly because it is far away from
everything else on your average keyboard. While vim already uses hjkl
instead of the arrow-keys, escape is a big let down. But we have a nice
alternative, caps-lock. No one really uses it, so why should we not just
swap those two? It looks like this:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;remove Lock &lt;span style="color: #666666"&gt;=&lt;/span&gt; Caps_Lock
keysym Escape &lt;span style="color: #666666"&gt;=&lt;/span&gt; Caps_Lock
keysym Caps_Lock &lt;span style="color: #666666"&gt;=&lt;/span&gt; Escape
add Lock &lt;span style="color: #666666"&gt;=&lt;/span&gt; Caps_Lock
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a simple script to open with xmodmap (Arch package:
&lt;a href="https://www.archlinux.org/packages/extra/x86_64/xorg-xmodmap/" title="xmodmap"&gt;xorg-xmodmap&lt;/a&gt;). As it is only session-persistent, add it to .xinitrc
or equal startup scripts.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 14 May 2013 19:16:00 +0200</pubDate><guid>tag:https://sulami.github.io,2013-05-14:vim-pro-tip-swap-caps-lock-and-escape.html</guid><category>vim</category></item></channel></rss>