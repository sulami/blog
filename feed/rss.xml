<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>/dev/sulami &gt;&gt; blog</title><link>https://sulami.github.io/</link><description></description><atom:link href="https://sulami.github.io/feed/rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 15 Jul 2014 01:50:00 +0200</lastBuildDate><item><title>Using git locally</title><link>https://sulami.github.io/using-git-locally.html</link><description>&lt;p&gt;When you write your code, using a version control mechanism like git is
crucial, even more than writing proper unit tests, even when working on your
own, even when it is only your evening project. Just use git and commit
regularly, it will not hurt you (unless your workflow is inherently broken, but
then fix you have to fix it anyway). Committing after every logical change and
pushing when finishing the session is something I practice almost like a
religion. Not only does it keep my history accessible and enables me easy
branching and stashing (read up on &lt;a href="http://linux.die.net/man/1/git-branch"&gt;git-branch(1)&lt;/a&gt; and
&lt;a href="http://linux.die.net/man/1/git-stash"&gt;git-stash(1)&lt;/a&gt; if you do not already use them), it also serves as simple
way to mirror my repositories to other machines and backup them this way.&lt;/p&gt;
&lt;p&gt;Now to have your code available everywhere, you can just push it to your
&lt;a href="https://github.com"&gt;Github&lt;/a&gt; or &lt;a href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt; account, but there are pieces of code we do not
want to see there. Security-critical code, configs or other files containing
sensitive data, or just code we are not particularly proud of. To still benefit
from the network capabilities of git, we need to host git ourselves.&lt;/p&gt;
&lt;p&gt;Setting up a local git mirror is not a big deal at all as the following
examples will show. Git uses ssh to transmit data over the network, which means
every toaster that is capable of running sshd should also be able to serve git
repos in a way that Github or Bitbucket do it, just without the web interface.
We assume we already have a repo containing out working directory, maybe even
some commits, does not matter. The following snippet demonstrates establishing
a git repo in my home directory which we can use to clone, push and pull.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;% mkdir -p ~/git/myrepo.git&lt;/span&gt;
&lt;span class="c"&gt;% cd ~/git/myrepo.git&lt;/span&gt;
&lt;span class="c"&gt;% git init --bare&lt;/span&gt;
&lt;span class="n"&gt;Initialized&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sulami&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myrepo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="c"&gt;% cd ~/myrepo&lt;/span&gt;
&lt;span class="c"&gt;% git remote add origin /home/sulami/git/myrepo.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is it, my local repository is now registered as &lt;code&gt;origin&lt;/code&gt; in this specific
working copy, and once I pushed my commits to it, I can clone it to somewhere
else. This is usually not all that useful, I only keep a bunch of bare
repositories for archiving reasons around, to clone some old projects of mine
if I want to look something up. Local remote repositories are way more
interesting because we can use them to push changes around to various machines,
work together with others more efficiently and much more. So here is how we
setup a local remote git server, given our repo alreay exists like before. My
ssh login uses my ssh-key to sign me in.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;% ssh sulami@remote&lt;/span&gt;
&lt;span class="c"&gt;% mkdir -p /srv/git/myrepo.git&lt;/span&gt;
&lt;span class="c"&gt;% cd /srv/git/myrepo.git&lt;/span&gt;
&lt;span class="c"&gt;% git init --bare --shared=group&lt;/span&gt;
&lt;span class="n"&gt;Initialized&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myrepo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="c"&gt;% exit&lt;/span&gt;
&lt;span class="c"&gt;% cd ~/myrepo&lt;/span&gt;
&lt;span class="c"&gt;% git remote add origin ssh://remote/srv/git/myrepo.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do you recognize this snippet? It is almost the same as before, we just changed
some details. First, we initialize the bare repository via ssh on our remote.
We also set it up in a way that allows us to share it with a group we can add
later on, so eventual coworkers can use their own ssh-logins to use this
repository. You can now think of exposing it to the web, or maybe installing
&lt;a href="http://git.zx2c4.com/cgit/"&gt;cgit&lt;/a&gt; to provide a browser-friendly interface. It all depends on what
you need, but to just synchronize your code amongst several machines there is
nothing else nessecary.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 15 Jul 2014 01:50:00 +0200</pubDate><guid>tag:https://sulami.github.io,2014-07-15:using-git-locally.html</guid><category>git</category><category>ssh</category></item><item><title>My own window manager</title><link>https://sulami.github.io/my-own-window-manager.html</link><description>&lt;p&gt;I accidentaly wrote a &lt;a href="https://github.com/sulami/frankenwm"&gt;window manager&lt;/a&gt;. It started out by cloning &lt;a href="https://github.com/cloudef/monsterwm-xcb"&gt;cloudef's
monsterwm-xcb&lt;/a&gt; to apply some smaller fixes, maybe opening a pull request to
merge them upstream again. But I quickly found more and more things to fix,
then I started to add some smaller features I missed from other window
managers. And thus, FrankenWM was made, pieced together from monsterwm-xcb and
other window managers. I stole some of the ewmh-related code from &lt;a href="https://github.com/venam/2bwm"&gt;2bwm&lt;/a&gt;,
and adapted features from &lt;a href="http://dwm.suckless.org"&gt;dwm&lt;/a&gt;, &lt;a href="http://i3wm.org"&gt;i3&lt;/a&gt; and others. The name is an obvious
play on words.&lt;/p&gt;
&lt;p&gt;So, what does it do? From a user's standpoint it is quite similar to dwm or
awesome (or of course monsterwm). It tiles dynamically, using one big master
window and a stack of smaller slave windows on each virtual desktop. There are
a few predefined layouts to choose from, v-stack, b-stack, grid, fibnonacci and
monocle. V-stack stacks the slave windows next to the master window, b-stack
below the master. Grid tries to give the same amount of screen space to every
window by placing them in a grid-like structure, fibonacci makes the each
window 50% as big as the window above it in the stack. And finally, monocle
fullscreens every window in a stacking fashion so you just see one at a time.&lt;/p&gt;
&lt;p&gt;The preferred way of controlling it is by using the keyboard, which uses a set
of shortcuts similar to the ones known from vim by default, and makes heavy use
of the Mod4-/Meta-/Windows-key to prevent overlapping with shortcuts for other
software. The mouse can be used to control floating windows and to select
windows, but the focus lies on mouse-less usage.&lt;/p&gt;
&lt;p&gt;There is also support for adding gaps between the windows, inspired by dwm's
useless gaps patch, which allow you to see your wallpaper or dropshadows from a
compositor. Those gaps are adjustable on the fly and optionally specific to
virtual desktops. I also implemented some features to allow using floating
windows without having to use the mouse. On the more technical side of things I
am currently implementing EWMH-compliance, which is important for compability
with a lot of different programs.&lt;/p&gt;
&lt;p&gt;The configuration is entirely done at compile time by editing the config.h. In
my git repository I include a sample config with some comments explaining how
to use it. As an alternate example, you can have a look at &lt;a href="https://github.com/sulami/dotfiles/blob/master/frankenwm.config.h"&gt;my personal
config&lt;/a&gt;, which uses some more advanced features. As a bonus for Arch users,
I also maintain an &lt;a href="https://aur.archlinux.org/packages/frankenwm-git/"&gt;AUR package&lt;/a&gt; which I update on bigger changes in the git
repository, although I still reccomend using the version from Github, as I do
not have a lot of experience with the AUR.&lt;/p&gt;
&lt;p&gt;The prerequisites for building FrankenWM are all XCB-based, specifically you
will need the XCB headers including the util, util-wm and keysyms ones, which
you can probably pull out of your distribution's repositories. I have yet to
build it on my OpenBSD machine, so I cannot say anything yet to building it on
the BSD family.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Sat, 05 Jul 2014 00:00:00 +0200</pubDate><guid>tag:https://sulami.github.io,2014-07-05:my-own-window-manager.html</guid><category>frankenwm</category><category>xorg</category><category>wm</category></item><item><title>Getting rid of Flash</title><link>https://sulami.github.io/getting-rid-of-flash.html</link><description>&lt;p&gt;I started using the HTML5-Player on YouTube, because Flash kept breaking
fullscreen, and I have not found a single video not supporting HTML5 in over a
month, so I would consider Flash-less YouTube a valid option. I also discovered
that Vimeo uses a pretty nice HTML5 player on their site, thus not requiring
Flash. And given that Adobe basically said "Suck it, Linux, we won't support
you guys properly, have fun with 11.2 and security fixes", plus the fact that
flash is draining huge amount of resources and is a possible security risk, I
asked myself, why do I need it anyway?&lt;/p&gt;
&lt;p&gt;The answer was somewhat surprising: I don't. Flash has always only been useful
for videostreaming, flashgames and intrusive ads. I can live without flashgames
and ads, and with YouTube and Vimeo out of the way the only site left I
occasionally use Flash on is Twitch.tv.
&lt;a href="https://github.com/chrippa/livestreamer"&gt;Livestreamer&lt;/a&gt;. Extracts the RTMP
stream and pipes it to a video player of your choice, like VLC. I have been
using irssi instead of the obnoxious and slow webchat for quite a while now and
it seems like I only have to visit the website to figure out who I like is
streaming.  This enabled me to disable (cough) the Flash plugin alltogether.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 27 May 2014 00:00:00 +0200</pubDate><guid>tag:https://sulami.github.io,2014-05-27:getting-rid-of-flash.html</guid><category>flash</category><category>vlc</category><category>twitchtv</category><category>youtube</category></item><item><title>Test-driven development in vim</title><link>https://sulami.github.io/test-driven-development-in-vim.html</link><description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;Test-driven development (TDD)&lt;/a&gt; is a way of developing software by using
tests over and over again. When I first was introduced to this concept, I
thought, automated tests are a nice idea, why not? Then I read a book about
TDD, which proceeded to explain how you start your project by writing a test
that (obviously) fails, then start your actual project, and test again. At this
point in time, we have a something that returns a default webpage, or zero. Not
even printing "Hello World" or "Success!". The next step is to write another
test, which checks for some actual content or functionality. After this test
fails (which by the way is important, as it shows that the test will hopefully
not produce false positives), we write the piece of content or functionality.&lt;/p&gt;
&lt;p&gt;In the beginning, this way of writing code seems (and is) incredibly slow, and
I find myself skipping the first five tests until I have something that
actually produces useful output. This is sort of okay, I do not think it will
hurt my code in any major way. But after those initial skipped tests, say 10
minutes into the project, I start to religiously write tests for everything
that happens, which is way easier than implementing proper tests for all the
different stages and levels when you wrote code for several hours and start
wasting time by manually testing changes. I think, everything that takes more
than 30 minutes to code benefits from TDD.&lt;/p&gt;
&lt;p&gt;But let's have a look at some actual TDD using vim and C. C is not often
written using TDD, but giving usually rather poor debugging output compared to
interpreted languages, TDD is even more useful, as you will instantaneously see
when a change breaks any functionality. To make testing easier, we will define
a keyboard mapping to start our tests from within vim.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kt"&gt;map&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Leader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;make&lt;/span&gt; &lt;span class="na"&gt;-B&lt;/span&gt; &lt;span class="nx"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;.&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This mapping will call make in a shell (which means you have to have make
installed), compile our &lt;em&gt;tests.c&lt;/em&gt; file and run it. Depending on which language
you are using, which kind of application you are developing and how your tests
work, you might want to change this a bit. I am testing a library I am writing,
which gets included in &lt;em&gt;tests.c&lt;/em&gt;.  The basic structure looks like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Tests for my library */&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;assert.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;quot;mylib.h&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;#define run_test(fn_name) \&lt;/span&gt;
&lt;span class="cp"&gt;    printf(&amp;quot;%s\n&amp;quot;, #fn_name); \&lt;/span&gt;
&lt;span class="cp"&gt;    fn_name();&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;test_example_test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fancy_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Running tests:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;run_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_example_test&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; =&amp;gt; All tests successful!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We include &lt;em&gt;stdio&lt;/em&gt; for printing and &lt;em&gt;assert&lt;/em&gt; for the actual testing. The way
assert works is if the statement assert gets passed is false, which means it
can also be a function call, assert stops the whole program and prints out the
line which produced the error. If everything works as intended, it prints all
the tests it ran, prompts for enter and returns us to vim.  An important part
is to only delete old tests, when the condition they test for is no longer
wanted, so you always test for basic functionality as well as the final
results.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 05 May 2014 00:00:00 +0200</pubDate><guid>tag:https://sulami.github.io,2014-05-05:test-driven-development-in-vim.html</guid><category>vim</category><category>cli</category><category>tdd</category><category>c</category></item><item><title>IRC-client showdown, extreme version</title><link>https://sulami.github.io/irc-client-showdown-extreme-version.html</link><description>&lt;p&gt;I love IRC. I try to keep all my common software on the shell in case I
somehow loose my ability to use X. This also enables me to use global
colorscheme and is performance-wise advantegous. There are many reasons
to live in the shell (aside from web-browsing, which is a pain), but
this is not the post to discuss them. Instead I want to make a quick
comparison of IRC-clients.&lt;/p&gt;
&lt;p&gt;I admit, I have not used all that many IRC-clients over the years, as
they are usually indefinetely customizable and I tweak them for months
before I decide to move on to a different one to start from scratch.
Currently, I am using irssi, as I have not customized weechat to the
extend I would like to yet.&lt;/p&gt;
&lt;p&gt;I prefer irssi as it is simpler and more unix-style, using just one
config, one theme and perl-extensions for every bit of bonus
functionality. Weechat works out of the box like a charm. It includes a
window-list which just has to be activated, automatic indentation of
nicks, a nicklist which just has to be disabled, colored nicks, a
trackbar and tons of more useful stuff. But the options are crap. It's
superior to the irssi djungle of formats, inside formats, inside other
formats, ... but in my opinion there are not enough ways to change
low-level stuff, weechat will always look like weechat, no matter what
you do.&lt;/p&gt;
&lt;p&gt;But I promised the extreme version in the title of this post, this is
performance. On Twitch.tv, there is currently a stream called
'twitchplayspokemon', which is a pokemon hack that accepts button input
via twitch chat (which is irc). The corrosponding IRC-channel is used by
35k-38k people at a time, featuring tons of messages. It actually caused
problems with the Twitch servers, which could not handel the
concentrated load, but seems to run fine now.&lt;/p&gt;
&lt;p&gt;Anyway, I tried using this channel with my IRC-clients. Weechat lags out
on joining, becoming unresponsive while building the nicklist, which is
hidden, but still active (this is what I mean by irssi is simpler).
Then, after about a minute, it works. Weechat uses 56.5 MB of RAM on my
system. That's insane. No fancy plugins, just one server, one channel,
smart-filter enabled, no nicklist.&lt;/p&gt;
&lt;p&gt;Irssi works like on any smaller IRC-network, without any noticable
performance impact, using about 12 MB of RAM, which is more reasonable.
For comparison though, connecting through netcat uses 644 KB of RAM. Of
course, this is without logging, formatting or anything except just
printing what the server sends me, but for IRC, netcat is actually sort
of viable, in emergency cases.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Wed, 19 Mar 2014 00:00:00 +0100</pubDate><guid>tag:https://sulami.github.io,2014-03-19:irc-client-showdown-extreme-version.html</guid><category>cli</category><category>irc</category><category>irssi</category><category>twitch.tv</category><category>weechat</category></item><item><title>My take on secure communication</title><link>https://sulami.github.io/my-take-on-secure-communication.html</link><description>&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I am not really into crypto (yet?) and everything I
write here is purely idealistic and probably somewhat unrealistic/stupid&lt;/p&gt;
&lt;h2&gt;The current situation&lt;/h2&gt;
&lt;p&gt;Some time ago, Facebook bought Whatsapp, which was my main way of
communicating using my phone. This event has made me think about where
the internet is heading in terms of privacy protection. Right now, I am
trying to figure out whether Chromium could be a better alternative to
Firefox, which is working worse and worse on Linux. I purposely do not
want to use Chrome as Google already uses their own search engine,
YouTube, Adsense, Analytics and Android/the Play Store, and maybe their
DNS-servers to track internet users from all around the world. Using
their partly proprietary browser which is known for phoning home is
obviously not the best idea.&lt;/p&gt;
&lt;p&gt;But back to Whatsapp. There are some alternatives, some praising
encryption, like &lt;a href="https://threema.ch/en/"&gt;Threema&lt;/a&gt; or &lt;a href="https://telegram.org/"&gt;Telegram&lt;/a&gt;. Threema is not free and as
Google does not utilize any payment method beside credit cards, only few
people will actually use it, and the only reason to switch to a
messenger is the userbase. I did not like Whatsapp in the first place,
but everyone used it, so I had to comply. Now I made the switch to
ecrypted (called "secure") Telegram messages with some of my closer
friends, but while it claims to be "open", this only means there is an
API. And if they sell out one day, say if Facebook or Google offer them
some millions, all their promises will be worth nothing.&lt;/p&gt;
&lt;p&gt;Another big part of my concerns, before we come to my ideas for a bright
future, are email and VoIP. Email right now is de-facto unencrypted,
usually transmitted via SSL to the provider but that is it. The
providers usually provide for free and most of them probably scan the
conversations to sell the information and/or build user profiles
(*cough* Google *cough*). This can be partially solved by just
encrypting/signing emails via PGP, which right now only security nerds
and mafia bosses do. But handling keys is just not ready for the masses,
it basically should handle keys, en-/decrypt without the average user
even noticing. But the decentralized way emails are set up is already
quite good, although there are some really big providers, there is no
loss in using some small provider you trust or even using your own
domain and server.&lt;/p&gt;
&lt;p&gt;VoIP is the real problem right now. I primarily use Skype, which is
owned by Microsoft since 2011. Skype is known to send all kind of data
to Redmond, and also allow crazy amounts of script languages for its
ads, which already resulted in some big security holes. Also the Linux
client sort of sucks. The interface is okay-ish, but the technical side
of things is not. But I do not blame Microsoft for this, I am happy for
the existence of a Linux client at all. So, Skype is bad, alternatives
are rare. Mumble is nice, but is centred around servers for gaming clans
and similar communities, using it as messenger is suboptimal. I also
tried Jabber, the VoIP-protocol with many features, which is actually
sort of great the way it is, but not end-user friendly enough.&lt;/p&gt;
&lt;h2&gt;Solutions?&lt;/h2&gt;
&lt;p&gt;What do I think would be the optimal way to handle this situations and
prevent some cyberpunk scenario in which Google, Facebook, Microsoft and
of course the NSA know everything about the average internet user?&lt;/p&gt;
&lt;p&gt;First, we need to divide. I would keep email, as it is an easy and
already established way of exchanging information and data in a
mail-like fashion, which we will still need in the future. But we need
some way of enabling everyone to encrypt this mail. A simple choice
would be to establish a service that handles public keys and pairs them
to accounts. You then get a plugin for Outlook or Thunderbird that
connects to your account, generates a keypair, uploads the public
portion, gets the needed public keys of others and handles en- and
decryption of mails. The downside here would be a pretty big single
point of failure. If this service is down, or worse, gets hacked, all
the security is jeopardized. An idea would be to not store this
information on central servers but instead in a Bitcoin-like blockchain
which is shared by everyone. Which is probably generating enormous
amounts of traffic just to synchronize. Also, if no one uses ad-loaded
webinterfaces or provides unencrypted emails, how are the email
providers going to survive, and how are they going to justify
subsidizing the free email services? People will not pay for privacy,
which is the actual root of the problem.&lt;/p&gt;
&lt;p&gt;Then we need a new multi-platform messenger, decentralized, encrypted,
capable of sending pictures, audio, video and of course live calls
including video and conferences. Basically Skype Premium, but without
central servers and more in a peer-to-peer fashion. Maybe just define a
protocol and write an open source reference implementation of a client.
I already thought about this a while, and most of this is
accomplishable, Skype already provides most of the functionality across
Windows, Mac, Linux and a lot of phones. There is the wonderful
Speex-codec which can be used for calls, video streaming should be no
problem either. As the content should be completely end-to-end
encrypted, compression would be sort of useless, so the generated
traffic will be more, but not by a lot.&lt;/p&gt;
&lt;p&gt;But here comes the one problem I found rather quickly. You need to be
able to sync your private keys across devices. As I propose to just
develop a protocol without a central management, you cannot just enter
your username and password and get all your stuff from a server, because
that would mean, your private keys, which are not supposed to ever leave
your devices would be stored on the server. But I have come up with a
solution, at least I think so.&lt;/p&gt;
&lt;p&gt;There will be some server structure involved, which will hold the
private keys, but in an encrypted form. When starting to use the
service, you generate your keypair. The public key gets into some sort
of public key infrastructure I yet have to figure out, maybe
blockchain-like, maybe not. The private key gets stored on the device,
protected by a password. A copy of it gets encrypted (say using
Rijndael/AES or Twofish) and can be stored on third-party servers. Those
third parties might enforce additional security measures via
accounts/passwords. If you want to use a second device with the same
identity, you can get you private key from said server, decrypt it and
import it. This way, you could basically store your encrypted key inside
Dropbox. I have to add, that this method relies on strong passwords more
than anything else, but maybe this will force sensible password policies
into the heads of the masses.&lt;/p&gt;
&lt;p&gt;An addition I would make would be some sort of identifier-system,
comparable to DNS. No one wants to remember numbers or hashes to
identify people, and names are not unique to a person, so there should
be some way to (decentralized, of course) link a username or an address
with a keypair, which can be resolved easily. So if you want to send me
a message, you send it to "sulami", we resolve the name, get the public
key and are ready to start an encrypted conversation.&lt;/p&gt;
&lt;h2&gt;Who will do it?&lt;/h2&gt;
&lt;p&gt;This is the important question. I would like to work on something like
this, but obviously the scope is gigantic and there are experts needed
on crypto, network messaging, development for specific platforms,
interface designers, and the list goes on. If you read this and are
interested in starting such a project, do not hesitate to contact me,
someone has to make the first step. My public key is on the
contact-page...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Wed, 19 Mar 2014 00:00:00 +0100</pubDate><guid>tag:https://sulami.github.io,2014-03-19:my-take-on-secure-communication.html</guid><category>google drive</category><category>privacy</category><category>security</category><category>skype</category></item><item><title>My own perfect world (aka what you should do)</title><link>https://sulami.github.io/my-own-perfect-world-aka-what-you-should-do.html</link><description>&lt;p&gt;I have to admit, I am a little bit perfectionist. Maybe more. There are
some conventions I found useful, but there are always people who do not
follow those conventions, some because they do not want to, but mostly
they just do not care. I just want to list some (read: non-exhaustive
list) of these conventions and maybe help you become a better human. In
my eyes. Which are the only relevant eyes.&lt;/p&gt;
&lt;h1&gt;General Stuff&lt;/h1&gt;
&lt;h4&gt;Encoding&lt;/h4&gt;
&lt;p&gt;UTF-8.&lt;/p&gt;
&lt;p&gt;There is close to nothing in the western world which does not work with
unicode, but many thing that will not work without it.&lt;/p&gt;
&lt;h4&gt;Websites&lt;/h4&gt;
&lt;p&gt;You own a website? Great. Here are some things to not do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;overly heavy use of javascript/ajax&lt;/li&gt;
&lt;li&gt;using POST where GET is usable (POST breaks bookmarks)&lt;/li&gt;
&lt;li&gt;using GET where POST is required (login information, ...)&lt;/li&gt;
&lt;li&gt;storing cleartext passwords (salt and hash them, only compare
    hashes)&lt;/li&gt;
&lt;li&gt;storing any kind of userdata you do not need (hackers/leaks)&lt;/li&gt;
&lt;li&gt;using flash for something that is neither a video nor a game&lt;/li&gt;
&lt;li&gt;use a popup to ask me to like your facebook-page (or some other
    social bullshit)&lt;/li&gt;
&lt;li&gt;split your content way to often to generate additional pageviews&lt;/li&gt;
&lt;li&gt;anything with sound which is not the main point of the site&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Passwords&lt;/h4&gt;
&lt;p&gt;Use unique, randomly generated passwords for each service, store them in
some sort of encrypted file (like KeePass). If you prefer to know your
passwords, choose a scheme to generate passwords for a given service, so
you do not use the same password everywhere. Also, long passwords are
better than short ones, special characters are mostly good and no one
who knows you should be able to guess your passwords, so no names of
SOs, children, parents, BFFs, ...&lt;/p&gt;
&lt;h4&gt;Backups&lt;/h4&gt;
&lt;p&gt;Do regular backups of everything you own. External harddrives, CDs,
Homservers, whatever. Just no "clouds", you cannot rely on those both in
terms of security and reliability. Always have at least two copies fully
under your control.&lt;/p&gt;
&lt;h4&gt;Prefer Open Source&lt;/h4&gt;
&lt;p&gt;Not (only) for philosophical reasons, but for security reasons. If you
use a reasonably large open sourced piece of software, even if you are
not able to write a single word of code, most assuredly some fanatic has
already checked the whole code for security holes. In proprietary
software, sometimes only less than ten people have access to the source
code, and everything they do not catch is a potential way for you to
loose your access to let's say your bank account. Would suck, would it
not?&lt;/p&gt;
&lt;h1&gt;Mail&lt;/h1&gt;
&lt;p&gt;Mail is a big part of the internet and my life as well. But there are
some things that really bug me when reading mail.&lt;/p&gt;
&lt;h4&gt;Do not use HTML-mail&lt;/h4&gt;
&lt;p&gt;There is no reason at all to use HTML in mails, except you send
professional advertisements or something like this. But for simple mail,
just containing text and maybe some attachments, why would you use HTML?
To make it look prettier? I open my mail in mutt (read: a text console),
so I get to read around all your fancy HTML-tags.&lt;/p&gt;
&lt;h4&gt;Do not write in single/ridiculously long lines&lt;/h4&gt;
&lt;p&gt;This is a big Outlook/Live Mail/whatever it is called right now-issue.
Even though you see the linebreaks at the end of your writing area,
there are actually none, Outlook breaks it "live". When using proper
text-only-mail, this is bad, not like really bad, but somewhat bad. I
usually correct those, and by "I" I mean vim does it for me, but still.
I personally prefer breaks at a maximum of 72 characters per line, which
is a commonly used standard.&lt;/p&gt;
&lt;h4&gt;Do not TOFU&lt;/h4&gt;
&lt;p&gt;No, this one is not about your eating habits, TOFU stands for "Text Over
Fullquote Under". This is what Outlook (sic) does per default.
Fullquoting is useful in many situations and does not introfuce to much
overhead when using text-only mail (my mails very rarely exceed 10KB).
But instead of writing your answer over the mail you received, place it
below. This way, we both can read the coversation from top to bottom
while writing our mails.&lt;/p&gt;
&lt;h1&gt;Coding&lt;/h1&gt;
&lt;p&gt;If you and I are working together on a software project, there are some
things I greatly appreciate.&lt;/p&gt;
&lt;h4&gt;Use a (proper) coding style&lt;/h4&gt;
&lt;p&gt;Coding styles are everything when coding cooperatively. My favourite
coding style is the Python one (&lt;a href="http://legacy.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;/&lt;a href="http://legacy.python.org/dev/peps/pep-0007/"&gt;PEP7&lt;/a&gt;), which means for most
languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no tabs&lt;/li&gt;
&lt;li&gt;4 space indentation&lt;/li&gt;
&lt;li&gt;prefered max line length: 80 characters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Indentation can be tabs alternatively, but &lt;strong&gt;have to&lt;/strong&gt; be standardized.
In some editors, tabs are 4 spaces long, in others 8, and in some 6.
This makes code indentation a mess and ruins the readability. The line
length limit is for sane editing, 100 characters are also acceptable,
anything more than that is probably poorly readable in most editors and
screams "bad code".&lt;/p&gt;
&lt;h4&gt;Use a VCS/SCM&lt;/h4&gt;
&lt;p&gt;I could have also said "use git". But I see that some people prefer
mercurial or SVN (why...?), that is okay, too. Even when working alone,
always use some sort version control software, or you will break your
code one day and spend hours tracking down the bad change. Diffs and
rollbacks are vital for efficient coding.&lt;/p&gt;
&lt;h4&gt;As you are using git, branch&lt;/h4&gt;
&lt;p&gt;As git is the best vcs, in my opinion, you are using branches, aren't
you? Never, and I mean never, work on master. Master is for tested code
only. Always work on "wip", "robin" or "fix". It does not matter how you
name your branch. If you want to change something, branch, make your
change, test it(!), and merge back into master if your change breaks
nothing. This is even more important when coding cooperatively, as I do
not want to pull your work in progress on master, branch to my work in
progress and wonder why it is broken. Which brings us to&lt;/p&gt;
&lt;h4&gt;Work locally&lt;/h4&gt;
&lt;p&gt;Many devs are used to working directly on a server, and sometimes this
is the only way to effectively test their changes, as they are missing
the needed environment for the code. This is okay. But as you are still
using git, always try to clone a personal copy of the code to work on,
and only push back your branch(es) and possible changes to master to
save your work centralized. Otherwise there might be a hell of
simultaneously edited files and lock-/swap-/backup-files.&lt;/p&gt;
&lt;h1&gt;Software Recommendations&lt;/h1&gt;
&lt;p&gt;I have used so much software over the years, I found my favourite
software for most of my needs, and I compared a lot. My favourites are
always the first ones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: Linux (Fedora/OpenSUSE/Arch) or Windows 7 x64 on desktops,
    RHEL/CentOS/OpenSUSE/*BSD on servers&lt;/li&gt;
&lt;li&gt;Password Management: KeePass (version 1, version 2 is not widely
    available yet)&lt;/li&gt;
&lt;li&gt;Text editing/coding: vim, Kate, Notepad++ (on Windows)&lt;/li&gt;
&lt;li&gt;VCS: git&lt;/li&gt;
&lt;li&gt;Mail: mutt, Thunderbird&lt;/li&gt;
&lt;li&gt;VoIP: Skype (still searching for a better alternative, not secure in
    any way), Mumble&lt;/li&gt;
&lt;li&gt;IRC: irssi, weechat, Quassel&lt;/li&gt;
&lt;li&gt;VMs: Virt-Manager/QEMU with KVM, Xen (for PVM on hosts without
    CPU-extensions), VirtualBox (on Windows)&lt;/li&gt;
&lt;li&gt;Video: VLC&lt;/li&gt;
&lt;li&gt;Music: ncmpcpp+mpd, Rythmbox, foobar2000 (on Windows)&lt;/li&gt;
&lt;li&gt;Office: LaTeX for papers, LibreOffice&lt;/li&gt;
&lt;li&gt;Web: Firefox&lt;/li&gt;
&lt;li&gt;Webserver: nginx&lt;/li&gt;
&lt;li&gt;Filesharing: NFS, Samba (FTP is old and cluttered)&lt;/li&gt;
&lt;li&gt;CMS: Django (anything), Wordpress (blogs), Drupal&lt;/li&gt;
&lt;li&gt;Programming languages: Python (platform independent, modular, nice
    to write and read), C(++) (faster, for performance-critical
    applications)&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 17 Mar 2014 00:00:00 +0100</pubDate><guid>tag:https://sulami.github.io,2014-03-17:my-own-perfect-world-aka-what-you-should-do.html</guid><category>firefox</category><category>flash</category><category>git</category><category>homeserver</category><category>irc</category><category>privacy</category><category>security</category><category>skype</category><category>vim</category><category>vlc</category><category>weechat</category></item><item><title>My favourite Tech-Talks</title><link>https://sulami.github.io/my-favourite-tech-talks.html</link><description>&lt;p&gt;I love talks, others might call them presentations. There are thousands
of talks on YouTube and watching them all would take ages, but I
sometimes watch talks before going to bed instad of watching TV.  So I
thought, I could compile a small list of my favourite talks featuring
technical topics for myself and you readers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/1M73USsXHdc"&gt;And that's how I lost my eye: exploring emergeny data destruction
(2012)&lt;/a&gt; - case studies on how to unrecoverably destroy your data
within seconds&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/1ffBJ4sVUb4"&gt;Git for ages 4 and up (2013)&lt;/a&gt; - explains git basics really easy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/bSAgQqa49nM"&gt;I wanna be the guy: The arduous path to senior sysadmin (2013)&lt;/a&gt; -
best practices and advice on how to be a better sysadmin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/5CWrzVJYLWw"&gt;No-Tech Hacking (2008)&lt;/a&gt; - real life hacking without use of advanced
technology, quite funny, too&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/U4oB28ksiIo"&gt;Pwned by the owner (2010)&lt;/a&gt; - funny story of a hacker whose PC gets
stolen and how he got it back&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/bQqX3RWn0Yw"&gt;SELinux for mere mortals (2013)&lt;/a&gt; - what SELinux does, why to use it
and how to use it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/RIctzAQOe44"&gt;The real story behind Wayland and X (2013)&lt;/a&gt; - a Wayland-dev explains
why X sucks from a technical view and what Wayland actually does&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/Sh-cnaJoGCw"&gt;Why Linux sucks&lt;/a&gt; / &lt;a href="http://youtu.be/BfLqLK7VdQY"&gt;Why Linux does not suck (2012)&lt;/a&gt; - watch both in
this order, funny comment on the state of Linux&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/LLBrBBImJt4"&gt;Write and submit your first Linux kernel patch (2012)&lt;/a&gt; - how to get
started on kernel development&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a lot more good talks, but my time is sort of limited and
sadly I can't really focus on working while watching talks.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Sat, 25 Jan 2014 00:00:00 +0100</pubDate><guid>tag:https://sulami.github.io,2014-01-25:my-favourite-tech-talks.html</guid><category>git</category><category>talks</category><category>youtube</category><category>wayland</category><category>kernel</category><category>selinux</category></item><item><title>Prism: What to do</title><link>https://sulami.github.io/prism-what-to-do.html</link><description>&lt;p&gt;While following the recent international events, I (and probably
everyone else) heard about the NSA and Prism. Now I always distrusted
big companies, especially the ones from the US, because I know money and
power are everything over there. If they want to spy on you, they can.
Now there is &lt;a href="http://prism-break.org/"&gt;something you can do&lt;/a&gt; (read this, or this post will make
less sense) to at least limit the amount of information about yourself
getting to those people.&lt;/p&gt;
&lt;p&gt;Obviously, you don't want to use Apple hardware (which I don't anyway,
but that is another story), as &lt;a href="http://www.southparkstudios.com/full-episodes/s15e01-humancentipad"&gt;Apple is infamous for invading user's
privacy&lt;/a&gt;. Chrome OS is insecure, as Google makes money of ad
targeting, which is, you guessed it, gathering your information. And
Windows, well, who seriously trusts Microsoft? The alternatives listed
are a bunch of Linuxes and BSDs, although I think they are recommending
the wrong distros, beginners should try something like &lt;a href="http://www.linuxmint.com/"&gt;Mint&lt;/a&gt;,
&lt;a href="http://crunchbang.org/"&gt;Crunchbang&lt;/a&gt; or &lt;a href="http://www.opensuse.org/en/"&gt;openSUSE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The browsers are the same story, no Chrome, no Safari, no IE (as if
anyone would miss it), you don't know, what they are actually doing, and
while browsing, you give away an awful lot of personal data.
Technically, your browser could send you whole browsing history
(including "incognito mode", the only one saying nothing gets saved is
your browser), your Downloads, your login data and more to someone. The
right choices here are &lt;a href="http://www.mozilla.org/en-US/"&gt;Firefox&lt;/a&gt;, &lt;a href="http://www.chromium.org/Home"&gt;Chromium&lt;/a&gt; (which I guess is okay,
haven't read the source myself) and smaller browsers like &lt;a href="http://surf.suckless.org/"&gt;surf&lt;/a&gt; or
&lt;a href="http://mason-larobina.github.io/luakit/"&gt;luakit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next interesting point is websearching. Again, Google is bad, who
knew? Yahoo and Bing, too. I'd say, use &lt;a href="http://ddg.gg"&gt;DuckDuckGo&lt;/a&gt;. I use it as my
main search engine for some months now and prefer it over Google. While
Google sometimes gives me better results, most of the time, DDG does
good. Be sure to have a look at the &lt;a href="https://duckduckgo.com/bang.html"&gt;bang commands&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To make this a bit shorter, be careful, which email provider you use,
they can read everything you write and receive. Self-hosting is sadly no
real option here, unless you have access to a static IP and a TLD.
Cloud-storage providers can access all your files saved to them, you can
self-host using &lt;a href="http://owncloud.org/"&gt;ownCloud&lt;/a&gt; or &lt;a href="http://seafile.com/en/home/"&gt;Seafile&lt;/a&gt;. Be careful what to enter on
any social networks, even if "private". You can either opt-out
completely or stay with the big ones (namely Facebook), as using a small
social network misses the point.&lt;/p&gt;
&lt;p&gt;The instant messaging section is quite hard. Safe are IRC, &lt;a href="http://pidgin.im/"&gt;Pidgin&lt;/a&gt;,
&lt;a href="https://crypto.cat/"&gt;Cryptocat&lt;/a&gt;, &lt;a href="http://mumble.sourceforge.net/"&gt;Mumble&lt;/a&gt;, &lt;a href="https://jitsi.org/"&gt;Jitsi&lt;/a&gt;. Unsafe are all big desktop clients
(GTalk, Skype, MSN/Live Messenger, ...) and Whatsapp as well.&lt;/p&gt;
&lt;p&gt;There are some more options for the guys with the tin foil hats, such as
using Tor permanently, only use end-to-end encrypted websites and
disable all scripts and plugins, then use custom DNS-servers and stuff
like this, but chances are, someone will see where you are browsing,
like the guy standing behind you.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 18 Jun 2013 00:00:00 +0200</pubDate><guid>tag:https://sulami.github.io,2013-06-18:prism-what-to-do.html</guid><category>prism</category><category>privacy</category><category>security</category></item><item><title>Raspberry Pi: Radio-Alarm</title><link>https://sulami.github.io/raspberry-pi-radio-alarm.html</link><description>&lt;p&gt;Some years ago I had the idea to use online radios as flexible alarm
clocks, but the main problem was having to run the computer all night
long, which results in high power consumption and noise. While netbooks
can counter this to a certain degree, the Raspberry Pi is the optimal
way of achieving our goal. You will need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi model B (+ power cable, SD-card with OS)&lt;/li&gt;
&lt;li&gt;speakers, preferably 3.5mm jack&lt;/li&gt;
&lt;li&gt;network/internet access&lt;/li&gt;
&lt;li&gt;control access directly or via ssh&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My RasPi is running &lt;a href="http://www.raspberrypi.org/downloads" title="RasPi"&gt;Raspian&lt;/a&gt; right now, but any Linux should do. You
connect everything and boot it up, then access a console. We need to
install mplayer, which will play our stream. If needed, update the
package lists before installing.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Raspian:&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mplayer&lt;/span&gt;

&lt;span class="cp"&gt;# ArchARM (as root):&lt;/span&gt;
&lt;span class="n"&gt;pacman&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Sy&lt;/span&gt; &lt;span class="n"&gt;mplayer&lt;/span&gt;

&lt;span class="cp"&gt;# Pidora:&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mplayer&lt;/span&gt;

&lt;span class="cp"&gt;# openSUSE:&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;zypper&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mplayer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next thing to do is writing a short playlist. The idea is to have a
fallback if the internet connection or your radio station goes down, so
you can switch to a local file to play instead. Use any text editor you
want (vi, vim, emacs, nano, or graphical ones) to write something like
my &lt;em&gt;playlist.pls&lt;/em&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;[playlist]&lt;/span&gt;
&lt;span class="na"&gt;File1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;http://mp3.ht-stream.net&lt;/span&gt;
&lt;span class="na"&gt;Title1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;HouseTime&lt;/span&gt;
&lt;span class="na"&gt;Lenght1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;-1&lt;/span&gt;
&lt;span class="na"&gt;File2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/pi/alarm.mp3&lt;/span&gt;
&lt;span class="na"&gt;Title2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;FallbackAlarm&lt;/span&gt;
&lt;span class="na"&gt;Length2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;-1&lt;/span&gt;
&lt;span class="na"&gt;NumberOfEntries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mplayer will try to play File1, my stream, and if it fails, continue to
play File2, the fallback. You can also add more stations and files and
use the &lt;em&gt;-shuffle&lt;/em&gt; parameter later on to play random music.&lt;/p&gt;
&lt;p&gt;Now, ensure that cron is running ("&lt;em&gt;ps aux | grep cron&lt;/em&gt;" should give you
a hint) and type "&lt;em&gt;crontab -e&lt;/em&gt;" to enter your cronjob (preferably as a
non-root user). Depending on your OS there will be some comments you can
ignore. Add a entry like the following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="n"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=:&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mplayer&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;playlist&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;playlist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pls&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will fire up mplayer everyday at 6:30 in the morning using the
provided playlist and then deletes the text-output. Using complete paths
is crucial here, cron does not use the \$PATH variable. If you read up
on cron, you can setup complete sets of alarms, depending on days of the
week and more. The env setting might be needed on some systems which
won't play and istead send you something like "connection by pulse
refused" per system-mail. Save the file to install the cronjob.&lt;/p&gt;
&lt;p&gt;When waking up, you need to kill mplayer, as it is running in the
background. The easiest way of doing so is via "&lt;em&gt;killall mplayer&lt;/em&gt;",
which is not the finest way of doing things but should do the job.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Fri, 07 Jun 2013 00:00:00 +0200</pubDate><guid>tag:https://sulami.github.io,2013-06-07:raspberry-pi-radio-alarm.html</guid><category>cron</category><category>mplayer</category><category>onlineradio</category><category>raspberrypi</category></item><item><title>Learning to type properly</title><link>https://sulami.github.io/learning-to-type-properly.html</link><description>&lt;p&gt;When it comes to IT-people, especially the ones ocassionally programming,
typing properly is a mandatory skill, but basically everyone benefits from fast
typing. Most people developed some kind of 2-6-finger system, which might work
well, but is still suboptimal compared to 10-finger touch typing. There are
some ways of learning the latter, but my personal favourite approach are
websites, as they are platform independent and usually require nothing more
than a browser with flash-plugin. Here are some:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://keybr.com" title="Keybr"&gt;Keybr.com&lt;/a&gt;: Semi-random text, different difficulty levels, language
settings, own texts, websites and graphical over-time-comparison.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://play.typeracer.com/" title="Typeracer"&gt;Typeracer&lt;/a&gt;: Competitive typing of texts from popular movies and
books.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://typing.io/" title="typing.io"&gt;typing.io&lt;/a&gt;: Special typing training for code, lots of examples for
every popular languages.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 14 May 2013 00:00:00 +0200</pubDate><guid>tag:https://sulami.github.io,2013-05-14:learning-to-type-properly.html</guid><category>typing</category></item><item><title>Streaming to Twitch.tv using ffmpeg and ALSA</title><link>https://sulami.github.io/streaming-to-twitchtv-using-ffmpeg-and-alsa.html</link><description>&lt;p&gt;Well, as I lost my database, I could not recover this article, but I
still got my script, so here you go:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;INRES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1920x1080&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;OUTRES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1920x1080&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;FPS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;30&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;QUAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;medium&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;STREAM_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;live_123_xxx&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;ffmpeg&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x11grab&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$INRES&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$FPS&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;itsoffset&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;alsa&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;hw&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;alsa&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;hw&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;filter_complex&lt;/span&gt; &lt;span class="n"&gt;amix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dropout_transition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;af&lt;/span&gt; &lt;span class="n"&gt;aresample&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vcodec&lt;/span&gt; &lt;span class="n"&gt;libx264&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;preset&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$QUAL&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$OUTRES&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;acodec&lt;/span&gt; &lt;span class="n"&gt;libmp3lame&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt; &lt;span class="mi"&gt;44100&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pix_fmt&lt;/span&gt; &lt;span class="n"&gt;yuv420p&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;flv&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rtmp://live.justin.tv/app/$STREAM_KEY&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You get your stream key &lt;a href="http://www.twitch.tv/broadcast" title="Twitch"&gt;here&lt;/a&gt;. Adjust resolutions as needed (input
and output), aswell as FPS. In lines 13-16 you can change your audio
devices (speakers and microphone, get them from "&lt;em&gt;arecord -l" &lt;/em&gt;for
microphones and&lt;em&gt;"aplay -l"&lt;/em&gt;for speakers). Adjust threads to the amount
of CPU cores you want to use to encode.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 14 May 2013 00:00:00 +0200</pubDate><guid>tag:https://sulami.github.io,2013-05-14:streaming-to-twitchtv-using-ffmpeg-and-alsa.html</guid><category>alsa</category><category>ffmpeg</category><category>twitch.tv</category></item></channel></rss>