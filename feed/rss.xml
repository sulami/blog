<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>/dev/sulami &gt;&gt; blog</title><link>https://sulami.github.io/</link><description></description><atom:link href="https://sulami.github.io/feed/rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 23 Feb 2016 00:00:00 +0100</lastBuildDate><item><title>Why you need fuzz testing</title><link>https://sulami.github.io/why-you-need-fuzz-testing.html</link><description>&lt;p&gt;Unittesting is an important part of building reliable software, although by far
not the only one. But many programmers misunderstand the purpose of unittests.
Classic unittests have two purposes: They force you to develop a spec and
enforce it, and they can protect you against regression when refactoring or
otherwise changing your code. Contrary to what some believe, they do not ensure
correctness of your&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Static unittests have one major flaw: The programmer has to write them. Any
function working on a list is usually tested using some small examples and an
empty list to make sure nothing breaks. This usually means you have to write
3-5 test cases per function to cover basic functionality. Not only is this a
lot of work, it is also error-prone, because some cases are easily forgotten,
especially because the programmer writing the tests for his code has a set of
preconceived notions about how his code might be&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;But when writing any meaningful software, you usually have to deal with all
kinds of data from outside, and a lot of that data is to be mistrusted. There
might be changes in APIs, software errors somewhere else, or even a malicious
attacker trying to breach your system, and all that data could look anything
but the way you expect it to. This is why unittests should be used to employ a
contract that the tested code has to follow, and fuzz testing can help you do
just&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;Haskell with its amazing type system has a very nice way to do this. Have a
look at this&amp;nbsp;test:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;the finder&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;only returns proper superstrings of the search term&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;forAll&lt;/span&gt; &lt;span class="n"&gt;nonNull&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;property&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
      &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;finder&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
            &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;shouldBe&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isSubsequenceOf&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code is part of a fuzzy finder I am toying with, and it ensures that a
basic fact about it is always true, the results should always be proper
superstrings of the search term, and the search term in turn a proper substring
of all results. I could write a bunch of test cases including input like
&lt;code&gt;"abcdef"&lt;/code&gt; or &lt;code&gt;"123"&lt;/code&gt; and supply a list of possible results, then evaluate
myself what the result should look like and just assert that the results are&amp;nbsp;equal.&lt;/p&gt;
&lt;p&gt;But that would not only result in a considerable increase in code, easily
quadrupling the code above, it would also not cover all possibilities.
Haskell&amp;#8217;s type system ensures that the finder only gets used with strings and
lists of strings, but strings can have many forms. Because all of the input is
coming from the user, there might be punctuation in there, spaces, maybe
escaped, maybe Unicode symbols, who knows. That is why I instruct the test
suite to just generate random strings and lists of strings to use (see the
&lt;code&gt;forAll nonNull&lt;/code&gt;) and verify the property independently. This runs a default of
100 different sets of input, many of which are complicated messes of
whitespace, backslashes and other special characters. If any of these break the
test, the suite tells me which one, so I can find out what is the problem with
a set of input and whether the contract I employed is incorrect, or the
function tested does not follow the&amp;nbsp;contract.&lt;/p&gt;
&lt;p&gt;The current actual fuzzy finder uses six different property contracts that it
needs to satisfy, each four to six lines in size. Testing all of these manually
would lead to a gigantic test suite, and modifying the parameters of the input
would be a huge hassle. With fuzz testing, I can just tweak the &lt;code&gt;nonNull&lt;/code&gt;
generator to use different rules to generate input, like limiting it to a
certain character range or string&amp;nbsp;length.&lt;/p&gt;
&lt;p&gt;The bottom line here is, if your unittests are handwritten, you most likely
cannot be sure your code is behaving in production. There is almost no way you
can think of all the possible ways your code is going to be used, and even if
you could, the amount of testing code would not be&amp;nbsp;feasible.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 23 Feb 2016 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2016-02-23:why-you-need-fuzz-testing.html</guid></item><item><title>Can Software Die?</title><link>https://sulami.github.io/can-software-die.html</link><description>&lt;p&gt;Software can be classified as alive. Not using the &lt;a href="https://en.wikipedia.org/wiki/Life"&gt;Wikipedia definition&lt;/a&gt;
of alive, because that requires biological processes, but philosophically seen
software is kind of like a living organism. There are constant changes as the
software evolves, adapts to environmental changes and grows new&amp;nbsp;features.&lt;/p&gt;
&lt;p&gt;But what if it stops changing? Can software die? What about software that is
&amp;#8220;done&amp;#8221;? One of the most used tools on &lt;span class="caps"&gt;UNIX&lt;/span&gt; machines is &lt;code&gt;echo&lt;/code&gt;. The current &lt;span class="caps"&gt;GNU&lt;/span&gt;
implementation which is arguably the most widely used one (assuming most &lt;span class="caps"&gt;OS&lt;/span&gt; X
users rarely use it) is at the time of writing &lt;a href="http://git.savannah.gnu.org/cgit/coreutils.git/tree/src/echo.c"&gt;about 270 lines of code&lt;/a&gt;,
and is already &lt;a href="https://stackoverflow.com/questions/3290683/bloated-echo-command"&gt;considered bloated by some&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But despite it being quite large and filled with features, especially compared
to its &lt;span class="caps"&gt;BSD&lt;/span&gt; counterparts, there have been &lt;a href="http://git.savannah.gnu.org/cgit/coreutils.git/log/src/echo.c"&gt;no meaningful changes in several
years&lt;/a&gt;. Is &lt;code&gt;echo&lt;/code&gt; dead, or is it just finished? As it stands right now,
there probably are &lt;a href="https://bugs.freedesktop.org/show_bug.cgi?id=558"&gt;features that could be added&lt;/a&gt;, but none that make
sense. And with just 270 lines of code chances are that &lt;code&gt;echo&lt;/code&gt; might actually
be entirely bug-free and always working as&amp;nbsp;intended.&lt;/p&gt;
&lt;p&gt;But do not go into paradox-induced freeze just yet, for I have a solution to
this dilemma. Software can be considered alive, but in a different way. In the
first paragraph I used the term &amp;#8220;evolve&amp;#8221;. If we think of a piece of software as
a species that undergoes evolution and following that consider a single version
a member of that species, things start to make sense. A program can die, it can
crash or exit gracefully after having lived for its expected lifetime. A piece
of software can stop evolution, end even though &lt;a href="https://richarddawkins.net/2015/02/misconception-monday-can-evolution-stop/"&gt;biological evolution
cannot&lt;/a&gt;, it could effectively slow down to a halt if the perfect form
is reached, which is of course impossible in practice. And if no one runs a
piece of software anymore, it can go&amp;nbsp;extinct.&lt;/p&gt;
&lt;p&gt;So the answer is yes, software can die, but it does not happen when change
stops occurring. Because of the drastically more limited scope of software
compared to biological life, software has a real chance of achieving
perfection, a state in which no changes are required or&amp;nbsp;desired.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Sun, 07 Feb 2016 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2016-02-07:can-software-die.html</guid></item><item><title>Why I use Pomodoro</title><link>https://sulami.github.io/why-i-use-pomodoro.html</link><description>&lt;p&gt;Almost every programmer knows what it means to get in the zone. That weird
feeling you get at two in the morning while working on a side-project, when the
the time flies by and suddenly all important features are done. Mastering the
zone is a crucial element of maximizing your productivity, but it can also be
quite&amp;nbsp;difficult.&lt;/p&gt;
&lt;p&gt;Because the being in the zone is a very fragile state, it is important to reduce
the risk of falling out of it. That means both preventing interruptions by
outside sources like coworkers (within reason) and playing your own &lt;a href="http://mindingourway.com/not-yet-gods/"&gt;monkey
brain&lt;/a&gt; to stay focused by reducing the possible distractions, like closing
all non-related&amp;nbsp;windows/tabs.&lt;/p&gt;
&lt;p&gt;These simple methods can work sometimes, but to &lt;em&gt;master&lt;/em&gt; the zone and be able to
reliably enter it almost at will, a more sophisticated solution is needed, a
system. There are a great number of systems, and most of them are designed to
dictate a structure for planning work, so they can help take the last bit of
excess cognitive load off your mind, leaving you with just the next problem to
solve to think&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;One of the more simple systems is &lt;a href="http://pomodorotechnique.com/"&gt;Pomodoro&lt;/a&gt;. Pomodoro in a nutshell is
dividing work into relatively small tasks, spend 25 minute intervals working on
these tasks and taking breaks in between. This approach forces you to focus on
the task at hand, making it easier to get in the flow. It is also a rather
simple system, you can read its Wikipedia page in two minutes and then start
using it, and the overhead is very small, which is why I like using it for most
of my&amp;nbsp;coding.&lt;/p&gt;
&lt;p&gt;If you have never used such a productivity system, I urge you to give Pomodoro
a try, there is not really anything to lose, and possibly a lot to gain. You
can also combine it relatively easily with larger-scale systems, like
&lt;a href="http://martinfowler.com/articles/newMethodology.html"&gt;Agile&lt;/a&gt; or &lt;a href="http://scrummethodology.com/"&gt;Scrum&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 11 Jan 2016 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2016-01-11:why-i-use-pomodoro.html</guid></item><item><title>Data-Pipelines in Haskell</title><link>https://sulami.github.io/data-pipelines-in-haskell.html</link><description>&lt;p&gt;Today I was writing some code in Golang and thought about why Haskell feels so
much more powerful and expressive. Then I had a revelation. Haskell follows the
&lt;span class="caps"&gt;UNIX&lt;/span&gt; philosophy, focussing on small functions that do exactly one thing (at
least good Haskell code does so). It also makes these functions easily
combinable without leading to syntastic noise like parenthesis-mountains. So I
thought I might just write a post highlighting that, which is what you are
currently&amp;nbsp;reading.&lt;/p&gt;
&lt;p&gt;We are going to start at the very basics, assuming you have little to no prior
knowledge about Haskell. Haskell uses the &lt;a href="https://en.wikipedia.org/wiki/Lambda_calculus#Lambda_calculus_and_programming_languages"&gt;lambda calculus&lt;/a&gt; and just
whitespace to declare function arguments. So a function call looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;-- 2 + 3 = 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If one of your arguments is actually the return value of another function call
with arguments, you will need to add parentheses to tell your compiler which
arguments belong to which function call, like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;-- 5 + (1 + 3) = 9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Haskell functions often take arguments in an order so that the last argument is
often the &amp;#8220;main&amp;#8221; one that is being used, which plays nicely with the &lt;code&gt;$&lt;/code&gt;
operator that is part of Prelude, the part of the Haskell standard library that
gets imported automatically. &lt;code&gt;$&lt;/code&gt; has the type &lt;code&gt;(a -&amp;gt; b) -&amp;gt; a -&amp;gt; b&lt;/code&gt; which looks
sort of pointless, but in practise you can use it to build function pipelines
without having to use&amp;nbsp;parentheses.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;-- 5 + (1 + 3) = 9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that in this code, &lt;code&gt;add 5&lt;/code&gt; is a function that takes one argument, because
one is already supplied. Its type is &lt;code&gt;Int -&amp;gt; Int&lt;/code&gt; compared to the original &lt;code&gt;Int
-&amp;gt; Int -&amp;gt; Int&lt;/code&gt;. And because Haskell has easy function composition using the &lt;code&gt;.&lt;/code&gt;
operator (&lt;code&gt;(b -&amp;gt; c) -&amp;gt; (a -&amp;gt; b) -&amp;gt; a -&amp;gt; c&lt;/code&gt;), we can chain several functions in
front of a &lt;code&gt;$&lt;/code&gt;, building a reverse data pipeline like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;subtract&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;-- (((1 + 3) * 2) - 3) + 5 = 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the data flows from the right side to the left. But coming back
to the &lt;span class="caps"&gt;UNIX&lt;/span&gt; philosophy, there are also data pipelines, pipes. But in
shell-pipes, data flows from left to right, which might be more intuitive. Note
that in the last explanation I had to reverse the order because of the
subtraction. We can fix this quite easily by defining a new operator, the
&amp;#8220;reverse &lt;code&gt;$&lt;/code&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the type annotation is the same as the one of &lt;code&gt;$&lt;/code&gt; with just the
arguments reversed. This specific operator is already defined in many
community-made packages. It allows us to mimic the shell-pipe very&amp;nbsp;closely:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;subtract&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;-- (((1 + 3) * 2) - 3) + 5 = 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the explanation looks just like the code, and data flows from left to
right, just like in the shell. These data pipelines make it easy to let small
functions like &lt;code&gt;words&lt;/code&gt;, &lt;code&gt;lines&lt;/code&gt; or &lt;code&gt;map&lt;/code&gt; work on data and pass the results to
the next function, without having to worry about memory management, buffer
overflows or even types, which makes this more robust than a shell-oneliner
while being just as expressive and simple. Haskell&amp;#8217;s laziness even allows for
simple parallelism like the shell does when piping data, where
functions/programs start working as soon as the first data reaches&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;This concept is so great, there is even a huge library to do this while doing
I/O like when accessing files or communicating over a network, &lt;a href="https://www.fpcomplete.com/user/snoyberg/library-documentation/conduit-overview"&gt;Conduit&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 07 Dec 2015 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2015-12-07:data-pipelines-in-haskell.html</guid></item><item><title>Using Hoogle for your project</title><link>https://sulami.github.io/using-hoogle-for-your-project.html</link><description>&lt;p&gt;&lt;a href="https://github.com/ndmitchell/hoogle"&gt;Hoogle&lt;/a&gt; is a fantastic tool that uses
Haskell&amp;#8217;s type system to build a searchable index of types, functions and
constants, connecting with &lt;a href="https://www.haskell.org/haddock/"&gt;Haddock&lt;/a&gt; to
provide documentation. It can be used to host browsable websites, like the
&lt;a href="https://www.haskell.org/hoogle/"&gt;Hackage instance&lt;/a&gt; or the &lt;a href="http://www.stackage.org/lts-3.15/hoogle"&gt;Stackage
instance&lt;/a&gt;, or used for editor
integration, like in &lt;a href="https://github.com/Twinside/vim-hoogle"&gt;vim&lt;/a&gt; or
&lt;a href="https://github.com/haskell/haskell-mode"&gt;emacs&lt;/a&gt;. Overall pretty great&amp;nbsp;stuff.&lt;/p&gt;
&lt;p&gt;But if working on your own project that is not online anywhere yet, setting up
a local Hoogle instance is a bit tricky. But not anymore. I wrote a relatively
simple shell script that sets up a local instance combining your project and
the Stackage snapshot your project is using. It currently is quite naive, and
assumes you are using Linux, and generally is a work in progress. But it works
on my machine™, so I am &lt;a href="https://github.com/sulami/dotfiles/blob/master/scripts/hoogle.sh"&gt;releasing it to the general
public&lt;/a&gt; (the
link is to the master branch of my dotfiles, so it gets updated&amp;nbsp;automatically).&lt;/p&gt;
&lt;p&gt;Beware: There is no error checking whatsoever, so make sure you have &lt;span class="caps"&gt;GHC&lt;/span&gt;,
Stack, Haddock and Hoogle installed and in your &lt;code&gt;$PATH&lt;/code&gt; (also curl and awk). It
might also eat all of your data. If you change your stack resolver, you need to
delete the Stackage Hoogle database yourself to trigger a download of the right
one, there is no version checking. Also local documentation paths do not work
when using &lt;code&gt;hoogle server&lt;/code&gt;. Some of this might get fixed in the&amp;nbsp;future.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Thu, 26 Nov 2015 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2015-11-26:using-hoogle-for-your-project.html</guid></item><item><title>Concurrent I/O in Haskell</title><link>https://sulami.github.io/concurrent-io-in-haskell.html</link><description>&lt;p&gt;Today just after waking up, I have been tweaking the last bits and bops of
&lt;a href="https://github.com/sulami/tinfoilsub"&gt;TinfoilSub&lt;/a&gt;, a satiric fun/learning
project of mine that scrapes YouTube channels to replicate a subscriptions page
without requiring a Google account. The core of this little program is the
&lt;code&gt;runServer&lt;/code&gt; function that uses
&lt;a href="https://hackage.haskell.org/package/scotty"&gt;Scotty&lt;/a&gt; to host a local page that
displays the results, while the list of channels is read from a file. In the
beginning, this function looked something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;runServer&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;runServer&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scotty&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;videos&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;concatMaybe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;liftIO&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
                &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;scrapeChannel&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;renderVideos&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;videos&lt;/span&gt;
  &lt;span class="c1"&gt;-- ... and more routes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, imagine you have more than just a couple of channels in there. This works
fine for 2-3 channels, but each channel adds about a second of runtime each
time the page is refreshed and the channels are re-scraped, which quickly
amounts to way to much. Naturally, I went on to profiling and trying to figure
out how to improve the scaling capabilities, and one of the first things to
come across is using several threads (duh). Pretty basic stuff, so lets add and
import &lt;code&gt;Control.Parallel&lt;/code&gt;, instruct the &lt;span class="caps"&gt;RTS&lt;/span&gt; to use a number of threads that
suits the &lt;span class="caps"&gt;CPU&lt;/span&gt; in use and everything should be fine.&amp;nbsp;Right?&lt;/p&gt;
&lt;p&gt;This is the new&amp;nbsp;code:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;runServer&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;runServer&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scotty&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;videos&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;concatMaybe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;liftIO&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
                &lt;span class="n"&gt;parMap&lt;/span&gt; &lt;span class="n"&gt;rpar&lt;/span&gt; &lt;span class="n"&gt;scrapeChannel&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;renderVideos&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;videos&lt;/span&gt;
  &lt;span class="c1"&gt;-- ... and more routes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This looks neat and one might think it does what we want it to do. But looking
at the actual performance when using 15 channels, this code is only about 20%
faster, even when using 8 or more threads on a &lt;span class="caps"&gt;CPU&lt;/span&gt; with more than enough cores.
Time for some more in depth analysis. The first thing I decided to look at was
good old top. YouTube is not too slow in terms of respond times, so with a
couple of threads one could assume we get to start scraping the page fairly
early on, which results in increased &lt;span class="caps"&gt;CPU&lt;/span&gt; usage. But looking at top while
refreshing the page revealed that the &lt;span class="caps"&gt;CPU&lt;/span&gt; was idling for a good 10 seconds
before starting to scrape at all. Scraping was then run concurrently for the
collected pages, so all cores were used and the actual scraping only took a&amp;nbsp;second.&lt;/p&gt;
&lt;p&gt;A look at Wireshark confirmed the problem. Wireshark recorded a new request
to YouTube every second before scraping started. I looked around a bit in
&lt;a href="https://hackage.haskell.org/package/scalpel"&gt;Scalpel&lt;/a&gt;, the scraping library I
used and &lt;a href="https://hackage.haskell.org/package/curl"&gt;the curl bindings&lt;/a&gt; that
were used for the actual requests, but nothing indicated any problems with
making multiple requests at the same&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;So, now for the big reveal. For those who do not know, Haskell&amp;#8217;s &lt;code&gt;Parallel&lt;/code&gt;
only works for pure parts of code, so no &lt;span class="caps"&gt;IO&lt;/span&gt;, which hinders you from creating
things like race conditions, deadlocks and other really bad stuff. That is a
good thing. So, if you want to do concurrent (or parallel) I/O, you need to use
&lt;code&gt;Concurrent&lt;/code&gt;, which brings internal threads, thread communication tools and
this kind of stuff. Now, this is all pretty dangerous territory in that with
these tools, we can create the bad things mentioned above, which we do not want
to risk, at least not if there are better alternatives. And as it turns out,
there are. Use &lt;a href="https://hackage.haskell.org/package/async"&gt;async&lt;/a&gt;. Async is
essentially a wrapper around all the evil stuff that makes it harder to shoot
yourself in the foot. For us, there is this neat function called
&lt;code&gt;mapConcurrently&lt;/code&gt;, which does exactly what we want. Do a &lt;code&gt;map&lt;/code&gt;, do it
concurrently, and do it with &lt;code&gt;IO&lt;/code&gt;. So this is what we&amp;nbsp;get:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;runServer&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;runServer&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scotty&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;videos&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;concatMaybe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;liftIO&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
                &lt;span class="n"&gt;mapConcurrently&lt;/span&gt; &lt;span class="n"&gt;scrapeChannel&lt;/span&gt; &lt;span class="n"&gt;channels&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;renderVideos&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;videos&lt;/span&gt;
  &lt;span class="c1"&gt;-- ... and more routes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it does exactly what we want, it starts scraping as soon as the first
request has returned a page for use, which reduces the runtime by more than&amp;nbsp;half.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Fri, 11 Sep 2015 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2015-09-11:concurrent-io-in-haskell.html</guid></item><item><title>Windows 10: Post-Launch Thoughts</title><link>https://sulami.github.io/windows-10-post-launch-thoughts.html</link><description>&lt;p&gt;So it has been two weeks since the official Windows 10 launch, and there have
been a lot of discussions about it. I am going to summarize some of my own
thoughts, now that I had the chance to test it&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;Windows 10 is the newest and &lt;a href="http://www.theguardian.com/technology/2015/may/11/windows-10-last-version-microsoft"&gt;supposedly last version&lt;/a&gt; of the ever so
popular operating system. &lt;a href="https://sulami.github.io/thoughts-on-windows-10-and-free-software.html"&gt;I have written before&lt;/a&gt; about my concerns
regarding the continuing vendor lock-in, especially DirectX, so I will try to
not repeat&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;From an end-user perspective, Windows 10 definitely feels better than Windows
8, which was crippled by design, due to the focus on the Metro view. Windows 10
brings back the &amp;#8220;Start&amp;#8221; menu, which I very much appreciate. The desktop in and
of itself feels okay-ish, but &lt;a href="https://imgur.com/a/ekRHU"&gt;lacks consistency in terms of &lt;span class="caps"&gt;UI&lt;/span&gt; style&lt;/a&gt;.
It certainly feels unfinished, not only visually, but also technically. On the
test machine used, an all-in-one Dell with some 2.5 GHz quad core and 12 &lt;span class="caps"&gt;GB&lt;/span&gt; of
memory, almost every window opened was white for roughly a second before it
loaded, which makes the whole system feel really unresponsive and&amp;nbsp;unpolished.&lt;/p&gt;
&lt;p&gt;But let us get to the real topic of discussion here, the obvious surveillance
&amp;#8220;features&amp;#8221;. When Windows 10 launched, people saw the new installer for the
first time. The installer proudly promoted an &amp;#8220;Express Installation&amp;#8221; and almost
tried to hide the manual configuration, &lt;a href="https://jonathan.porta.codes/2015/07/30/windows-10-seems-to-have-some-scary-privacy-defaults/"&gt;which almost exclusively contained
privacy-related options&lt;/a&gt; that were all defaulting to invading your
personal space. I myself have written up &lt;a href="https://gist.github.com/sulami/7e74e3de7db372d38402"&gt;a small satirical piece&lt;/a&gt;
about it. Despite the majority of these options being hidden away, especially
after the installation, there are some options you cannot even deactivate at
all, like the &lt;a href="http://cdn.ghacks.net/wp-content/uploads/2015/07/telemetry.jpg"&gt;automatic transmission of &amp;#8220;diagnostic and usage
data&amp;#8221;&lt;/a&gt; (assuming you do not use Enterprise&amp;nbsp;Edition).&lt;/p&gt;
&lt;p&gt;Yesterday, a Czech analyst found out that &lt;a href="https://translate.google.com/translate?hl=en&amp;amp;sl=cs&amp;amp;tl=en&amp;amp;u=http%3A%2F%2Faeronet.cz%2Fnews%2Fanalyza-windows-10-ve-svem-principu-jde-o-pouhy-terminal-na-sber-informaci-o-uzivateli-jeho-prstech-ocich-a-hlasu%2F"&gt;Windows 10 sends its keylogger logs
home regularly&lt;/a&gt;, as well as scraping your drives after you search for
movie names (what might be the thought behind this, hmmm&amp;#8230;), sending some 35
&lt;span class="caps"&gt;MB&lt;/span&gt; of encrypted data after using the webcam for the first time (hmmm, again),
and of course sending voice data, even when deactivating Cortana entirely. The
voice data alone makes up about 80 &lt;span class="caps"&gt;MB&lt;/span&gt; every 15&amp;nbsp;minutes.&lt;/p&gt;
&lt;p&gt;There have also been &lt;a href="http://arstechnica.co.uk/information-technology/2015/08/even-when-told-not-to-windows-10-just-cant-stop-talking-to-microsoft/"&gt;reports&lt;/a&gt;, that these calls home are hardcoded in
such a way, that you cannot use the (internal) firewall to block them, and they
might leak your &lt;span class="caps"&gt;IP&lt;/span&gt; and other sensitive data if you are using a &lt;span class="caps"&gt;VPN&lt;/span&gt; or&amp;nbsp;Tor.&lt;/p&gt;
&lt;p&gt;In the end, while I have no particular desire to use Windows at all, with this
developments, I do not know if I even feel save around a Windows 10 machine
anymore, let alone using one. Sadly, the average user out there does not know
anything about this (I imagine), and they will be the ones violated. This is a
nightmare, and I desperately hope that Windows 10 will not catch on. Microsoft
has shown its true nature, its endgame, and it is bad. I do not think, anyone
can trust them anymore, at&amp;nbsp;all.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Thu, 13 Aug 2015 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2015-08-13:windows-10-post-launch-thoughts.html</guid></item><item><title>A* Pathfinding in Functional Languages</title><link>https://sulami.github.io/a-pathfinding-in-functional-languages.html</link><description>&lt;p&gt;&amp;#8230; like, you guessed it, Haskell. But this should translate to Lisp quite
well. &lt;a href="https://en.wikipedia.org/wiki/A*_search_algorithm"&gt;A* (A star)&lt;/a&gt; is a graph traversal algorithm that is commonly used
for pathfinding in video games, and probably also things like navigational
software. It is an extension to &lt;a href="https://en.wikipedia.org/wiki/Dtra%27s_algorithm"&gt;Dijkstra&amp;#8217;s algorithm&lt;/a&gt;. If you do not know
how they work, there is a really nice interactive explanation over on &lt;a href="http://www.redblobgames.com/pathfinding/a-star/introduction.html"&gt;Red Blob
Games&lt;/a&gt;. There are a lot of examples around how to implement it in
imperative languages, including the pseudo code on Wikipedia, but it is
actually difficult to find an example for functional programming languages,
where the approach differs a bit. As you will see, the general structure will
be very close to the one used for &lt;a href="https://github.com/sulami/spielwiese/blob/master/hUtil/BTree.hs#L69"&gt;breadth-first traversal&lt;/a&gt;, the reason
for this being that both algorithms essentially are breadth-first traversal
with a weighting function that decides where to traverse deeper. With all paths
having equal weights, they will behave exactly like&amp;nbsp;breadth-first.&lt;/p&gt;
&lt;p&gt;So I wrote up &lt;a href="https://github.com/sulami/spielwiese/tree/master/astar"&gt;a small something&lt;/a&gt; that uses this algorithm in Haskell. It
operates on &lt;span class="caps"&gt;ASCII&lt;/span&gt; mazes and draws the shortest possible path through them in
(sort of) reasonable time. It also features experimental multi-threading
support, although I am not quite sure yet just how big the performance boost is
by using several cores. The results look like this, the asterisks (or stars&amp;#8230;)
show the&amp;nbsp;path:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*************&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;***********&lt;/span&gt;    &lt;span class="nt"&gt;X&lt;/span&gt;           &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*********&lt;/span&gt;        &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;   &lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt;      &lt;span class="o"&gt;*********&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;***&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*******&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;          &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;       &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;   &lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;XXXXX&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*************&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*******&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*******&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXXXXXX&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;   &lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*************&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;           &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*********&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;***&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXXXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;XXXXX&lt;/span&gt;   &lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*********&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;      &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;***&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;       &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;***********&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*******&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;XXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXXXXXX&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt;       &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*****&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;***&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;       &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;XXXXXXXXXXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;********&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*******&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;       &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;    &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*******&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;XXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;   &lt;span class="nt"&gt;XXXXX&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXXXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;***&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*******&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;           &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;***&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*************&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;XXXXX&lt;/span&gt;   &lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;XXXXXXXXXXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*********&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*******&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*************&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;***&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;   &lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;X&lt;/span&gt;       &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;          &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*********&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;&lt;span class="o"&gt;*******&lt;/span&gt;&lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*******&lt;/span&gt;      &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;XXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;XXXXX&lt;/span&gt;   &lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;XXXXXXXXX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;X&lt;/span&gt;          &lt;span class="o"&gt;*******&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;           &lt;span class="nt"&gt;X&lt;/span&gt;      &lt;span class="o"&gt;*******&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;  &lt;span class="o"&gt;***********&lt;/span&gt;  &lt;span class="nt"&gt;X&lt;/span&gt;   &lt;span class="nt"&gt;X&lt;/span&gt;
&lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A maze of this size can be solved in about a quarter of a second on my 2008
laptop. So let us find out, how one would implement this sort of path finding
using a purely functional language like&amp;nbsp;Haskell.&lt;/p&gt;
&lt;p&gt;The core of this algorithm is essentially a &lt;a href="https://en.wikipedia.org/wiki/Flood_fill"&gt;flood fill&lt;/a&gt;. But where a flood
fill expands in all directions equally (if it is a queue-based one), A Star
reorders the cells to fill after every filled cell using a cost function, and
always fills the cheapest cell available. As such, our function needs to take a
couple of arguments to work, the grid on which it works, the start and finish
positions on the grid (we will need the target to determine costs), a function
that can determine the valid cells a path could advance on, and a cost function
that can determine the cost of a&amp;nbsp;path.&lt;/p&gt;
&lt;p&gt;The grid, start and finish positions are quite easy, in our case we have a
two-dimensional grid that consists of &lt;code&gt;Char&lt;/code&gt;s, and positions on it look like
&lt;code&gt;(x,y)&lt;/code&gt;. The cost function has to follow a couple of basic rules. If you have a
look at the Wikipedia page I linked at the very top, there is a part that
explains that the cost of a path consists of the sum of its length, and an
estimate of the distance between its end and the target. It should also not
overestimate the minimal distance to the target. In our case, this is very
simple. I define the rules of motion to be that we can only move in four
directions, and not into or through walls (duh). This means our example cost
function looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;cost&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Path&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;cost&lt;/span&gt; &lt;span class="n"&gt;fin&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;fin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is one of the functions we will be passing to the actual path finding
function. The other one will be the one that determines which cells are valid
options. This follows a couple of basic rules that I annotated&amp;nbsp;here:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;possibleWays&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Path&lt;/span&gt;
&lt;span class="nf"&gt;possibleWays&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="c1"&gt;-- Build a set of y&lt;/span&gt;
                                   &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;              &lt;span class="c1"&gt;-- and x coordinates&lt;/span&gt;
                                   &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c1"&gt;-- within the grid and&lt;/span&gt;
                                   &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="c1"&gt;-- a maximum distance&lt;/span&gt;
                                   &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;              &lt;span class="c1"&gt;-- of one cell in any&lt;/span&gt;
                                   &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="c1"&gt;-- direction.&lt;/span&gt;
                                   &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;-- Only one step in one direction.&lt;/span&gt;
                                   &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;X&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;-- Not into a wall.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can notice, the function takes the grid and a position, and determines
which cell can be entered on the grid from withing the position provided. This
function has to supplied, because, just like the cost function, its specifics
depend on the rules of the game. If you, for example, want to be able to move
diagonally, you can adjust this function and the cost function without touching
the path finding algorithm&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;The only thing left is the path finding itself. I will split this one into
parts so it is easier to understand. A complete source with example including
an &lt;span class="caps"&gt;ASCII&lt;/span&gt; parser and printer is on &lt;a href="https://github.com/sulami/spielwiese/tree/master/astar"&gt;GitHub&lt;/a&gt;. While it might look
intimidating, the core algorithm is actually quite simple. It sorts all paths
in a list by cost, and replaces the cheapest path by all paths that could
extend this path while obeying the rules of &lt;code&gt;possibleWays&lt;/code&gt; and not adding a
cell that is already part of another path. The comparison is done using a
simple&amp;nbsp;zip:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;fl&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;PossibleWaysFun&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;CostFun&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;fl&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="n"&gt;fin&lt;/span&gt; &lt;span class="n"&gt;pwf&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;fin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;fin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;minimum&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="n"&gt;fin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;
                    &lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addRoutes&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;pwf&lt;/span&gt;
                &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fl&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="n"&gt;fin&lt;/span&gt; &lt;span class="n"&gt;pwf&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;pb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A path is replaced by all &lt;em&gt;new&lt;/em&gt;, valid paths&amp;nbsp;using&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;addRoutes&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Path&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;PossibleWaysFun&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;addRoutes&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;pwf&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cps&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(`&lt;/span&gt;&lt;span class="n"&gt;notElem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;cps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pwf&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do not worry about the funny types, they are just for clarification and
declarations can be found in the complete source. The list comprehension
ensures we source the possible replacements and filter out the ones that would
cross existing paths. If a path cannot go anywhere new, it therefore gets
removed altogether, and a new cheapest path will be chosen the next&amp;nbsp;iteration.&lt;/p&gt;
&lt;p&gt;To finish this off, we just package this into a nice clean wrapper like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;flood&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;PossibleWaysFun&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;CostFun&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Path&lt;/span&gt;
&lt;span class="nf"&gt;flood&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="n"&gt;fin&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="n"&gt;pwf&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fl&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="n"&gt;fin&lt;/span&gt; &lt;span class="n"&gt;pwf&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we get a single function that takes all the relevant data and returns one
path. Note how the initial set of paths consists of the starting position,
which is in itself a path of length 0. Also note how this will fail horribly if
there is no possible path. You could transform this quite easily using &lt;code&gt;Maybe&lt;/code&gt;
to accommodate for that. And that is already pretty much&amp;nbsp;it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Thu, 23 Jul 2015 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2015-07-23:a-pathfinding-in-functional-languages.html</guid></item><item><title>Embrace the REPL</title><link>https://sulami.github.io/embrace-the-repl.html</link><description>&lt;p&gt;As some of you may be aware, the tool of my choice is &lt;a href="http://vim.org"&gt;vim&lt;/a&gt; (or
&lt;a href="https://github.com/neovim/neovim"&gt;neovim&lt;/a&gt;). Two of the languages I write a lot in are Haskell and Python,
because both of these languages are very nice to quickly prototype something
in. Both of these languages also feature what is known as a &lt;a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop"&gt;&lt;span class="caps"&gt;REPL&lt;/span&gt;&lt;/a&gt;, a
&lt;em&gt;Read-Eval-Print-Loop&lt;/em&gt;, a feature that has been around in Lisp since the
fifties. The name also comes from the Lisp&amp;nbsp;origin:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todays, arguably more modern languages have more sophisticated REPLs, like
Haskell&amp;#8217;s &lt;a href="https://wiki.haskell.org/GHC/GHCi"&gt;GHCi&lt;/a&gt;, Python&amp;#8217;s &lt;a href="http://ipython.org/"&gt;IPython&lt;/a&gt;, &lt;a href="http://bpython-interpreter.org/"&gt;BPython&lt;/a&gt;, etc. each
coming with additional features to make testing something quickly really&amp;nbsp;simple.&lt;/p&gt;
&lt;p&gt;It just happens to be that other text-editor, [emacs][emacs], that also uses
its own Lisp flavour as scripting language, also provides excellent support for
Lisp REPLs in the form of &lt;a href="https://common-lisp.net/project/slime/"&gt;&lt;span class="caps"&gt;SLIME&lt;/span&gt;&lt;/a&gt;. &lt;span class="caps"&gt;SLIME&lt;/span&gt; allows the user to evaluate
Lisp from a emacs buffer directly in a &lt;span class="caps"&gt;REPL&lt;/span&gt; in another buffer. I have seen this
functionalility at a talk recently and wanted to replicate it in vim. As it
turns out, there is something called &lt;a href="https://github.com/jpalardy/vim-slime"&gt;vim-slime&lt;/a&gt;. Because vim cannot
directly handle Lisp, it uses a more general approach by using &lt;a href="https://www.gnu.org/software/screen/"&gt;screen&lt;/a&gt;
or &lt;a href="https://tmux.github.io/"&gt;tmux&lt;/a&gt;. It also handles things like &lt;code&gt;let&lt;/code&gt; prefixes in Haskell, and
&lt;code&gt;:{&lt;/code&gt;/&lt;code&gt;:}&lt;/code&gt; for multi-line pasting. There is also special support for handling
the indentation levels in Python. But enough listing of features, a picture
says more than a thousand words, especially if it is a&amp;nbsp;gif.&lt;/p&gt;
&lt;p&gt;&lt;img alt="vim-slime in action" src="https://sulami.github.io/raw/vimslime.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Thu, 23 Jul 2015 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2015-07-23:embrace-the-repl.html</guid></item><item><title>Haskell Flood Fills</title><link>https://sulami.github.io/haskell-flood-fills.html</link><description>&lt;p&gt;Over the past two days, I played a bit with the &lt;a href="https://hackthe.computer/"&gt;hackthe.computer
contest&lt;/a&gt;. It is a contest with a couple of problems/tasks where you have
one week to write up the best solutions in terms of speed. Part of the
difficulty comes from the fact, that you push git commits to their server and
do not get to to see the output of their test runs, which you only know if you
program produces the correct output within a reasonable time frame (one minute
per test?) or not. It is quite fun, also because the problems are nicely
chosen, with a lot of data interpretation, but also a need for efficient
algorithms, and they all have nice back stories to explain why we are dealing
with seemingly random&amp;nbsp;input.&lt;/p&gt;
&lt;p&gt;The first problem is called &lt;em&gt;Bowie&amp;#8217;s in a maze&lt;/em&gt;, which, without spoiling too
much, involves David Bowie and a maze. Bowie is actually the villain here. To
save our little brother, we have to find him in his maze. To accomplish this,
we get an &lt;span class="caps"&gt;ASCII&lt;/span&gt;-map of the maze with our position and the position of our
brother. The specific task is to find the shortest route in the least amount of
time&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;The naive first attempt was finding the shortest of all possible paths, but
several of their test cases include really large mazes with few walls, if any
at all (remember, I do not know). So this ran forever. From there, my mind
obviously went to flood fills quite fast, because we save a lot of time, both
by not building tons of overlapping paths, and, because a queue-based flood
fill will return the shortest possible correct path before any longer
solutions, using a lazy list of routes we can stop evaluating paths after the
first one that reaches our&amp;nbsp;brother.&lt;/p&gt;
&lt;p&gt;I have written flood fills before, but mostly in Python, where the approach is
quite a bit different. And because I could not really find a nice example of
how to do flood fills in Haskell, I will post a general example here, just for
you, fellow coder. So, here we&amp;nbsp;go:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- First, we define a couple of types, for better readability. The grid&lt;/span&gt;
&lt;span class="c1"&gt;-- will be a line-wise list of strings, with every char being a cell.&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Path&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Coord&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;-- So, we flood fill. This list can be lazily evaluated from the head and&lt;/span&gt;
&lt;span class="c1"&gt;-- returns branching paths in all directions that obey possibleWays and do&lt;/span&gt;
&lt;span class="c1"&gt;-- not overlap. flood is actually just a wrapper for fl.&lt;/span&gt;
&lt;span class="nf"&gt;flood&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;flood&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fl&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="c1"&gt;-- This might be a bit difficult to grasp, but this returns all paths&lt;/span&gt;
    &lt;span class="c1"&gt;-- ever evaluated and appends a copy of every path already evaluated&lt;/span&gt;
    &lt;span class="c1"&gt;-- that could continue somewhere for a single step without overlapping&lt;/span&gt;
    &lt;span class="c1"&gt;-- with any other path.&lt;/span&gt;
    &lt;span class="n"&gt;fl&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;fl&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;fl&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addRoutes&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;-- This handles the replacing of a path with all its possible branches.&lt;/span&gt;
    &lt;span class="c1"&gt;-- It also has the context of all the other paths to prevent&lt;/span&gt;
    &lt;span class="c1"&gt;-- overlapping.&lt;/span&gt;
    &lt;span class="n"&gt;addRoutes&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Path&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;addRoutes&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;possibleWays&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                             &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;-- All this does is, from a given point on the grid, look where we&lt;/span&gt;
    &lt;span class="c1"&gt;-- could go while obeying the rules of the game, like not leaving the&lt;/span&gt;
    &lt;span class="c1"&gt;-- grid (Index error!), only going one step (maybe diagonally?), etc.&lt;/span&gt;
    &lt;span class="c1"&gt;-- The actual code depends on what you want to do, but a list&lt;/span&gt;
    &lt;span class="c1"&gt;-- comprehension works well here, using the surrounding coordinates as&lt;/span&gt;
    &lt;span class="c1"&gt;-- inputs and filtering out the invalid ones.&lt;/span&gt;
    &lt;span class="n"&gt;possibleWays&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Path&lt;/span&gt;
    &lt;span class="n"&gt;possibleWays&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;-- This is a simple little helper that checks if the last cell of a path is&lt;/span&gt;
&lt;span class="c1"&gt;-- the target, so we can filter out incomplete paths.&lt;/span&gt;
&lt;span class="nf"&gt;reachesTarget&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Path&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;reachesTarget&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;-- This a a really basic example use of the functions above.&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="n"&gt;getContents&lt;/span&gt;          &lt;span class="c1"&gt;-- Read a map from stdin.&lt;/span&gt;
          &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;-- Start filling from the top-left corner.&lt;/span&gt;
          &lt;span class="c1"&gt;-- My example involves finding the length of shortest possible&lt;/span&gt;
          &lt;span class="c1"&gt;-- route, so we start flood filling lazily, and take the first&lt;/span&gt;
          &lt;span class="c1"&gt;-- complete path. Then we just print out its length, because&lt;/span&gt;
          &lt;span class="c1"&gt;-- paths themselves do not print nicely without a pretty printer.&lt;/span&gt;
          &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reachesTarget&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flood&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
          &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use this code pretty much like this (I hereby license it under &lt;span class="caps"&gt;ISC&lt;/span&gt;), by
just filling in &lt;code&gt;possibleWays&lt;/code&gt;. Note that this can get a bit slow when the grid
is large and contains few or no walls, because the list of paths to iterate
over grows rather large. You can probably gain some additional performance by
introducing parallelism via &lt;code&gt;par&lt;/code&gt; and &lt;code&gt;pseq&lt;/code&gt; if that becomes a&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;&lt;/strong&gt; If you are taking part in the competition, flood fills will not bring
you far, the solution is a different&amp;nbsp;one.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 21 Jul 2015 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2015-07-21:haskell-flood-fills.html</guid></item><item><title>Solving Sudokus</title><link>https://sulami.github.io/solving-sudokus.html</link><description>&lt;p&gt;So, here is more Haskell from me, because I really like it. This time around, I
wrote a small and simple sudoku solver. Sudokus are really nice little puzzles
that involve a partially filled 9x9 grid containing numbers from one to nine.
The objective is to fill it following these&amp;nbsp;rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each number must only appear once per&amp;nbsp;row&lt;/li&gt;
&lt;li&gt;Each number must only appear once per&amp;nbsp;column&lt;/li&gt;
&lt;li&gt;Each number must only appear once per 3x3 &amp;#8216;box&amp;#8217;, of which there are&amp;nbsp;nine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A common strategy is checking empty cells for available numbers to fill in, so
the ones that are not already present in the corresponding row, column or box.
This is also the approach my solver takes, by checking each of the empty cells
for options and, if there is only one possible option, filling it in. Repeat
this until there are no empty cells anymore and you have a guaranteed correct
solution. There is a great deal of mathematics behind sudoku puzzles, and if
you are interested in that, &lt;a href="https://en.wikipedia.org/wiki/Mathematics_of_Sudoku"&gt;the Wikipedia article&lt;/a&gt; is a great&amp;nbsp;read.&lt;/p&gt;
&lt;p&gt;Because I wrote my solver before conducting any research, it emulates my
approach, which is brute forcing. Still, it solves 9x9 sudokus in &amp;lt;0.01
seconds. We will now have an in-depth look at it. If you want context, the
whole code including an example is on &lt;a href="https://github.com/sulami/spielwiese/blob/master/hSudoku/"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I implemented the solver in form of a Haskell library that exports three&amp;nbsp;functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; builds the internal representation of the puzzle from a list of&amp;nbsp;integers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prettyPrint&lt;/code&gt; prints a&amp;nbsp;puzzle&lt;/li&gt;
&lt;li&gt;&lt;code&gt;solve&lt;/code&gt; solves a&amp;nbsp;puzzle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt; is really simple, because it looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;build&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt;
&lt;span class="nf"&gt;build&lt;/span&gt; &lt;span class="n"&gt;vs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;vs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This already exposes the internal structure of a puzzle, which is&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Cell&lt;/span&gt;  &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Coord&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt;  &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I chose to use a single associative list over a nested list because it makes
the code a whole lot easier to read when accessing various cells of a grid, at
the expense of having to do some&amp;nbsp;maths.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;prettyPrint&lt;/code&gt; is not really worth explaining or even showing, all it does is
dividing a grid into nine chunks, the lines, converting the integers to chars,
replacing zeros with underscores, insert some spaces for readability and prints
the whole thing out. I just added it so I could check the results&amp;nbsp;easily.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;solve&lt;/code&gt; is the really interesting part here. Solve loops until a puzzle is
solved, which looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;solved&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;solved&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foldr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;

&lt;span class="nf"&gt;solve&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt;
&lt;span class="nf"&gt;solve&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;solved&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;  &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What &lt;code&gt;fill&lt;/code&gt; does is it iterates once through all the cells, and each time it
encounters an empty cell (&lt;code&gt;(_, 0)&lt;/code&gt;), it checks which numbers could be placed in
it. If there is only one possibility, it changes the grid accordingly and
continues. After a complete iteration, it returns the changed&amp;nbsp;grid.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;fill&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Cell&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt;
&lt;span class="nf"&gt;fill&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;          &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
                &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;           &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;
                &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;
                &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;        &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;change&lt;/code&gt; goes through the grid, looking for the cell we want to change,
replaces the value and returns the changed grid, so we can use it for the
remainder of the iteration. It is very easily implemented using a single &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;change&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Cell&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt;
&lt;span class="nf"&gt;change&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;gn&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gv&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;get&lt;/code&gt; gets the value of the cell at a coordinate in a grid, pretty&amp;nbsp;simple:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Value&lt;/span&gt;
&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;options&lt;/code&gt; on the other hand is a little bit more complicated. It has to check
the row, the column and the box a given cell is in, and check for a number
between one and nine that is not already present in any of them. And because I
chose to use a single list to represent the whole grid, having the list indices
stored inside a cell comes in very handy, because we can use it to calculate
the indices of the other cells in the same row, column and box. But first, this
is &lt;code&gt;options&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;options&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Grid&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Cell&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;options&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rowWise&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colWise&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boxWise&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt;
                    &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(`&lt;/span&gt;&lt;span class="n"&gt;notElem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It looks a bit overloaded, but is actually quite easy. &lt;code&gt;r&lt;/code&gt; is a composite list
that includes all the coordinates (/indices) of the cells that affect the
possible content of this cell. We &lt;code&gt;map&lt;/code&gt; it to get to transform it to a list of
numbers that are not possible here, and then simply return all numbers between
one and nine that are not in that list. If you go back to &lt;code&gt;fill&lt;/code&gt; above, you can
see that if the length of this list is one, this solution is filled&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;To finish this off, here are the three remaining functions that calculate the
coordinates of the affecting cells. I planned these out when I could not sleep&amp;nbsp;yesterday.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;rowWise&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Coord&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;rowWise&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="nf"&gt;colWise&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Coord&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;colWise&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nf"&gt;boxWise&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Coord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Coord&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;boxWise&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
             &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;rowWise&lt;/code&gt; and &lt;code&gt;colWise&lt;/code&gt; should be pretty easy to understand if you imagine a
grid and try out some example cells. &lt;code&gt;boxWise&lt;/code&gt; is a bit more contrived, what it
generally does it figures out in which of the nine boxes the cell is by
comparing the offset from the left and the offset from the top separately, and
then using the top-left cell of this box as a starting point to get the other
eight coordinates, which are always in the same relative&amp;nbsp;position.&lt;/p&gt;
&lt;p&gt;So this is the complete code to solve a sudoku puzzle. If you exclude the
printing stuff, it is about 50 lines long, and there is a lot to optimize here,
but I will leave it as it is, because I am only interested in the&amp;nbsp;PoC.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 06 Jul 2015 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2015-07-06:solving-sudokus.html</guid></item><item><title>A fuzzy finder in Haskell</title><link>https://sulami.github.io/a-fuzzy-finder-in-haskell.html</link><description>&lt;p&gt;This is a response to &lt;em&gt;&lt;a href="http://blog.amjith.com/fuzzyfinder-in-10-lines-of-python"&gt;FuzzyFinder - in 10 lines of Python&lt;/a&gt;&lt;/em&gt;, which was
posted to reddit&amp;nbsp;yesterday.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Following the blogpost linked above, I decided to write my own fuzzy finder in
Haskell, because that is the language I am currently learning, and think has
great potential. It is also a more interesting &lt;a href="https://github.com/sulami/spielwiese/tree/master/hEuler"&gt;exercise&lt;/a&gt; than &lt;a href="https://projecteuler.net/"&gt;Project
Euler&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just in case you have not read the original post and do not know what a fuzzy
finder is, it is a mechanism to filter and sort a list of strings by searching
for substrings. It is often used in text editors like vim or Sublime Text,
where you can just type in &lt;em&gt;&amp;#8220;accmanba&amp;#8221;&lt;/em&gt; and they will open up
&lt;code&gt;account_management_backend.py&lt;/code&gt; for you. As you can see, it makes switching
between more than two files in a project much easier and&amp;nbsp;faster.&lt;/p&gt;
&lt;p&gt;Amjith wrote his finder using regular expressions, which are part of the Python
standard library and can be compiled to be reasonably fast very easily. Sadly,
Haskell has no implementation of regular expressions in its standard library,
and I did not want to use third-party ones just for this. But as it turns out,
we do not even need them, because the task is so simple and Haskell&amp;#8217;s string
manipulation capabilities are incredible, so that we can solve this by
implementing the search algorithm ourselves and still achieve good&amp;nbsp;performance.&lt;/p&gt;
&lt;p&gt;So, let us get on to some actual code. The most interesting part here is the
matching&amp;nbsp;algorithm:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;partOf&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Char&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;partOf&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;     &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;partOf&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partOf&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nf"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nf"&gt;match&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;match&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;match&amp;#39;&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;     &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;match&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kr"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;
        &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partOf&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I know this is not really optimized for readability and especially not if you
do not know Haskell, but stay with me, it is quite simple. Before we compare
the input, we map all the possible solutions to lowercase and store them in a
tuple like &lt;code&gt;("String", "string")&lt;/code&gt;. This way, we can compare against the
lowercase version and return the properly capitalized one later on. All we do
then is check for each possible solution if each character of the input string
appears in order in the solution. If so, we add it to a list along with some
data, specifically the position of the first match and the distance between the
first and last matched character in the solution. This is the same Amjith did
for sorting. All this data gets returned in a big list of tuples with both
versions of the solutions and the match data. It is not pretty, but it&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;The one function the module actually exports is &lt;code&gt;fuzzyFinder&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;fuzzyFinder&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kt"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="nf"&gt;fuzzyFinder&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="n"&gt;combo&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;combo&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;
    &lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;
    &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;prepInput&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All this function does is build the tuple list with the lowercase versions,
toss it into the match function and filter out the correct versions from the
matches that came back, ordering them by the match data in the same way Amjith
did it. There are just a couple of extra lines that I omitted here because they
are not important, but you can find the complete source on &lt;a href="https://github.com/sulami/spielwiese/tree/master/hFuzzyFinder"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now you might say, this cannot be fast, it is iterating through all this stuff
and with big enough input it will take forever to present results. Let me show
you&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;readL&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;readL&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getArgs&lt;/span&gt;
          &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
            &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;readFile&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fuzzyFinder&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;readL&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
          &lt;span class="kr"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Wrong number of args&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a small program that takes two arguments, the query string and a file
path of a list of possible solutions and performs the actions outlined above.
Using a 2.2GHz Core 2 Duo, because I am using my laptop, and a 46K list
containing over 5000 words (Thanks, Project Euler), this&amp;nbsp;happens:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;λ time ./interactive roro ../hEuler/022.input
[&amp;quot;ROBERTO&amp;quot;,&amp;quot;RODRIGO&amp;quot;,&amp;quot;ROSARIO&amp;quot;,&amp;quot;GREGORIO&amp;quot;,&amp;quot;RIGOBERTO&amp;quot;]
./interactive roro ../hEuler/022.input  0.08s user 0.00s system 96% cpu 0.079 total
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The execution time goes up to 0.09 seconds when printing out really many names,
but that is caused by the fact that we have to print out 100 lines or more to
the console, which also takes time. But in my opinion, this is more than fast
enough for auto-completion, which is the main use for fuzzy&amp;nbsp;finders.&lt;/p&gt;
&lt;p&gt;So overall, I am really happy with how this turned out. I was able to write
this on one morning despite still learning the language. It is reasonably
concise despite the fact that I did not use regular expressions but searched
the strings manually and also quite&amp;nbsp;fast.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Wed, 24 Jun 2015 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2015-06-24:a-fuzzy-finder-in-haskell.html</guid></item><item><title>Thoughts on Windows 10 and free software</title><link>https://sulami.github.io/thoughts-on-windows-10-and-free-software.html</link><description>&lt;p&gt;Today I had a very interesting conversation about the modern software world
with a non-technical friend of&amp;nbsp;mine.&lt;/p&gt;
&lt;p&gt;Back when it happened, I considered Windows Vista a slip, they had something
new in mind, I could see the vision, but it did not work out, which is why I
never used it. Windows 7 corrected most of Vista&amp;#8217;s flaws and was a really
nice operating system for the consumer, meant as an efficient general
purpose platform usable by&amp;nbsp;anyone.&lt;/p&gt;
&lt;p&gt;I have since then made the full-time switch to *nix, meaning I have not had
Windows installed outside of a &lt;span class="caps"&gt;VM&lt;/span&gt; for about two years. I have seen the light
that is *nix, you might say. As a professional software guy, I know just
how big of a joke everything Microsoft produces&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;But anyway, after Windows 7 came Windows 8, and 8.1 which reverted some of
the disatrous changes 8 did. Still, today, &lt;a href="https://www.netmarketshare.com/operating-system-market-share.aspx"&gt;over 70% of internet users use
either Windows 7 or Windows &lt;span class="caps"&gt;XP&lt;/span&gt;&lt;/a&gt;, which are known good versions. Windows
8 and 8.1 combined make up about 15%, mostly because users despice change,
and Windows 8 did not bring neccesary new things to the table, like say &lt;a href="http://blogs.msdn.com/b/directx/archive/2014/10/01/directx-12-and-windows-10.aspx"&gt;a
new DirectX&lt;/a&gt;, which not only forces core gamers to switch to Windows
10, but also comes just in time to convince developers to use it instead of
&lt;a href="https://www.khronos.org/vulkan/"&gt;Vulkan&lt;/a&gt;, the in my opinion better idea, because it is not part of
Microsoft&amp;#8217;s vendor&amp;nbsp;lock-in.&lt;/p&gt;
&lt;p&gt;So today I talked to this friend of mine about why people are still using
Windows, why Microsoft Office is still the standard in many situations. We
both agreed that Apple is not the saviour we are looking for. He said, while
he likes Linux from the little experience he had with it, it is &lt;em&gt;a)&lt;/em&gt; to
challenging for the average user to setup and maybe administrate, and &lt;em&gt;b)&lt;/em&gt;
too few people actually know about it as a viable alternative. We went on to
agree that the really average user would probably be better of with a
Xubuntu box, for browsing Facebook, writing emails and watching YouTube.
Maybe a bit of basic office usage. It can do all of that just fine, and runs
so much better than any version of Windows, while arguably being more&amp;nbsp;secure.&lt;/p&gt;
&lt;p&gt;I told him that setting up something newbie-focussed like Ubuntu, Mint or
eOS is not harder than setting up Windows, assuming you can setup Windows.
Both mainly consist of clicking &amp;#8220;Next&amp;#8221;. Of course you have to know which
harddrive you want to install to, but you have to select a installation
destination on Windows as well. Installing drivers is usually pretty easy as
well &lt;em&gt;if&lt;/em&gt; you have sort of proper hardware. Of course there are known issues
with things like &lt;a href="http://arstechnica.com/civis/viewtopic.php?f=14&amp;amp;t=42569"&gt;certain wifi controller manufacturers&lt;/a&gt;, and exotic
hardware like &lt;span class="caps"&gt;DVB&lt;/span&gt;-cards are usually hit or&amp;nbsp;miss.&lt;/p&gt;
&lt;p&gt;But the second point is actually more important here. Most people do not
know about Linux as an operating system they could be using. Choosing to use
Linux is actively alienating yourself. It is a whole new world, you might
have to find different programs, things might break. After all, it is an
operating system only used bu programmers and hackers, not by ordinary&amp;nbsp;non-nerds.&lt;/p&gt;
&lt;p&gt;A subjective long time ago, Google decided to enter the emerging market of
smartphones, &lt;a href="https://en.wikipedia.org/wiki/Android_%28operating_system%29"&gt;and chose to base their mobile operting system on the
well-tested Linux kernel&lt;/a&gt;. But they did not call it Linux, and they
did not for a reason. A lot of people do not know that they are directly
using Linux every day. More recently, &lt;a href="https://www.gamingonlinux.com/articles/steam-replaces-the-linux-tux-logo-with-steamos.5442/page=2"&gt;Valve did the same thing&lt;/a&gt;, using
Linux as the basis for their &lt;span class="caps"&gt;PC&lt;/span&gt;-console-hybrids. But it shall be called
SteamOS, and just last week or so they changed the tux icon in the Steam
shop to a SteamOS one. Do not get me wrong, I think they are doing exactly
the right thing.  But it goes to show that things labeled &amp;#8220;Linux&amp;#8221; do not
sell&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Both he and I agreed, that once Linux adoption reaches a critical mass, it
will be very difficult to stop. There will be even more software, especially
the one that is targetet at ordinary low-tech users, more hardware support
and word will spread that you can actually use it, people will know someone
who is not a geek and still likes it. It would no longer be conceived as a
hobby. Which is why marketing divisions at Microsoft are fighting
desperately to keep things the way they are. &lt;a href="https://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt"&gt;No one ever got fired for
buying Microsoft.&lt;/a&gt; It just works, except when it does&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;Now Windows 10 is close to arriving. From my point of view it looks like
even more sh*t shoveled upon &lt;span class="caps"&gt;NT6&lt;/span&gt;, which is the trusty basis since Vista.
&lt;a href="http://blog.zorinaq.com/?e=74"&gt;Microsoft has this horrible mentality of just adding more and more without
ever fixing anything&lt;/a&gt;. I guess it is already too late to save &lt;span class="caps"&gt;NT6&lt;/span&gt;
without a rewrite. But good luck pushing a rewrite through&amp;nbsp;management.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 23 Jun 2015 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2015-06-23:thoughts-on-windows-10-and-free-software.html</guid></item><item><title>Which OS do I use?</title><link>https://sulami.github.io/which-os-do-i-use.html</link><description>&lt;p&gt;Since I &lt;a href="https://sulami.github.io/systemdebacle.html"&gt;wrote about systemd&lt;/a&gt; a few weeks back, I have been looking out for
an operating system that I truly love, that is without systemd whatsoever. My
ideal specifications involved a philosophy that is close to &lt;span class="caps"&gt;BSD&lt;/span&gt;&amp;#8217;s, with a focus
on stable software and exhaustive documentation, while being reasonable modern
so that I do not run into incompability issues, and a couple of minor points
(like I prefer git over svn). After looking and testing for a while, going
through half the list on &lt;a href="http://without-systemd.org/"&gt;without systemd&lt;/a&gt;, I found the &lt;a href="http://sourceforge.net/projects/manjaro-openrc/"&gt;Manjaro OpenRC
spin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Manjaro is an Arch-based distribution, that replicates the Arch repositories in
such a way, that there is a current branch that closely follows the Arch ones,
and a stable branch that is, well, more stable. At the moment I am running
Linux 3.18. It also uses pacman, which is one of the best binary package
managers I have ever used, and only clearly superseded by Gentoo&amp;#8217;s&amp;nbsp;portage.&lt;/p&gt;
&lt;p&gt;While you can use OpenRC, the in my eyes currently best init-system on Linux,
on Arch, doing so will result in major breakages, which is not exactly what
one would consider &amp;#8220;stable&amp;#8221;. In the end, I have used enough cutting-edge
software and just want something that works with minimal maintenance. Manjaro
is just what I want. It is stable while not too old for me to run into any
issues, can use the &lt;span class="caps"&gt;AUR&lt;/span&gt;, has git-based repositories, and can run on
OpenRC/eudev/syslog-ng/lightdm/other software which has been replaced and/or
eaten by&amp;nbsp;systemd.&lt;/p&gt;
&lt;p&gt;The point of this post is merely to tell you, if you are interested in this
sort of thing, check it out. It is more practical that *&lt;span class="caps"&gt;BSD&lt;/span&gt; or Gentoo, and
Void Linux has been a bit hit and miss in my personal&amp;nbsp;experience.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Wed, 10 Jun 2015 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2015-06-10:which-os-do-i-use.html</guid></item><item><title>SystemDebacle</title><link>https://sulami.github.io/systemdebacle.html</link><description>&lt;p&gt;I am writing about systemd today, because now, that the new release of Debian
with systemd is out, there is pretty much only one major distribution left that
is not forcing its users to use systemd, that being Gentoo. I have for quite a
long time defended systemd while it has been the target of extensive criticism
almost since its inception. I will mostly be writing about my concerns about
the *nix ecosystem from the standpoint of an user and programmer. Today, most
of my machines are running either Gentoo or some &lt;span class="caps"&gt;BSD&lt;/span&gt;, mostly&amp;nbsp;OpenBSD.&lt;/p&gt;
&lt;p&gt;Here are some&amp;nbsp;facts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;systemd only runs on Linux, because of Linux-specific kernel features it&amp;nbsp;uses&lt;/li&gt;
&lt;li&gt;systemd is combining lots of subsystems to work together&lt;ul&gt;
&lt;li&gt;For example the init system and the syslog for service-specific&amp;nbsp;logs&lt;/li&gt;
&lt;li&gt;The extend of the subsystems it manages is set at build&amp;nbsp;time&lt;/li&gt;
&lt;li&gt;Some might call this&amp;nbsp;feature-creeping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;systemd is the de-facto standard in the Linux world as of today&lt;ul&gt;
&lt;li&gt;All major distributions except Gentoo ship it by default without the
  option to use another init&amp;nbsp;system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You cannot remove systemd from your distribution and expect it to work at all&lt;ul&gt;
&lt;li&gt;That is except on Gentoo, where systemd is just an option and OpenRC the&amp;nbsp;default&lt;/li&gt;
&lt;li&gt;This means, in conjunction with the previous point, most people on Linux
  are stuck with&amp;nbsp;it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What we are seeing here is bundling, a commong strategy used by commercial
companies to ensure their products cannot be replaced easily. Think Internet
Explorer. People running Linux, especially the ones recently switching from
other operating systems are forced to use it. They are impressed by its ease of
use (which admittedly exists). But there is no way for competition to arise,
which is just as important in the open-source ecosystem as in the commercial
space. Imagine all the lost innovation because an outright better
init-system/syslogger/whatever systemd swallowed cannot gain any traction
without&amp;nbsp;users.&lt;/p&gt;
&lt;p&gt;I believe this is a very dangerous path we are&amp;nbsp;walking.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 28 Apr 2015 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2015-04-28:systemdebacle.html</guid></item><item><title>Homeworld on Linux (or OSX)</title><link>https://sulami.github.io/homeworld-on-linux-or-osx.html</link><description>&lt;p&gt;Today I will write about something slightly different than usual. I will be
writing about a videogame, Homeworld. These days, Homeworld 1 and 2 are being
released in remastered editions, with support for current resolutions and so
on. This led me to playing the original. Homeworld 1 has been ported to Linux
by fans some years ago. All you need is an original game and access to a
Windows machine (or &lt;span class="caps"&gt;VM&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Install Homeworld on Windows, patch it to 1.05 and pack the complete game
directory to move it to your Linux machine. Then, mount the &lt;span class="caps"&gt;CD&lt;/span&gt;, get
&lt;code&gt;HW_Comp.vce&lt;/code&gt; and &lt;code&gt;HW_Music.wxd&lt;/code&gt; and put them in your game directory as well.
This enables you to play without the &lt;span class="caps"&gt;CD&lt;/span&gt; mounted. Then just get the prebuilt
binary for your &lt;span class="caps"&gt;OS&lt;/span&gt; (yes, &lt;span class="caps"&gt;OSX&lt;/span&gt; works as well) from [homeworldsdl.com][hwsdl] and
put it in the game directory as well (it is in &lt;code&gt;bin&lt;/code&gt; in the .tar.gz). You might
also need to download some &lt;span class="caps"&gt;SDL&lt;/span&gt; libraries, but everything should be in your
distro&amp;#8217;s repositories. If you have done everything right, you can start
Homeworld from the shell&amp;nbsp;using:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;SDL_AUDIODRIVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;alsa ./homeworld
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you experience sound issues under PulseAudio, make sure to install the
&lt;span class="caps"&gt;ALSA&lt;/span&gt;-plugin for PulseAudio. Using PulseAudio directly will result in glitchy
sound, so you have to proxy it through &lt;span class="caps"&gt;ALSA&lt;/span&gt;. Also reduce the ingame channels to
8 and the sound quality to&amp;nbsp;low.&lt;/p&gt;
&lt;p&gt;You can also start Homeworld on a separate X-Server (or in Xephyr) to preserve
your resolution (using the &lt;span class="caps"&gt;DISPLAY&lt;/span&gt; variable), but this might interfere with the
mouse in some cases. Instead, you can also use the parameter &lt;code&gt;/window&lt;/code&gt; to open
it in windowed mode, which works pretty&amp;nbsp;well.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 23 Feb 2015 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2015-02-23:homeworld-on-linux-or-osx.html</guid></item><item><title>My thoughts about Go</title><link>https://sulami.github.io/my-thoughts-about-go.html</link><description>&lt;p&gt;After having used &lt;a href="https://golang.org"&gt;Go&lt;/a&gt; almost exclusively for the last two weeks, and
for the first time seriously, I think I can give a general statement on what I
think about it, analogous to &lt;a href="https://sulami.github.io/my-thoughts-about-d.html"&gt;D&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Go has been in development at Google for a few years now, mainly by Robert
Griesemer, Rob Pike and Ken Thompson, all quite big names. You can find
specifics on &lt;a href="https://en.wikipedia.org/wiki/Go_%28programming_language%29"&gt;Wikipedia&lt;/a&gt;, this post will primarily be my opinion. My
first impression is, while D feels like a child of C and Python, or &amp;#8220;C++ done
right&amp;#8221;, Go feels a lot more like raw C modernized.  Like with D, I will give
you a first look at something&amp;nbsp;simple:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This all makes sense, right? The first line defines the package we are
currently in. If this is a binary, no a library, this is always &lt;code&gt;main&lt;/code&gt;. We then
import &lt;code&gt;fmt&lt;/code&gt;, the formatting standard library, enter &lt;code&gt;main()&lt;/code&gt; and print out our
implicitly typed string. Nothing too crazy, and most of the rest of the
language looks similarly boring. That is actually a good&amp;nbsp;thing™.&lt;/p&gt;
&lt;p&gt;It is comparably stripped down and intentionally minimal. The big features Go
brings are Goroutines and channels, both tools primarily used for concurrency.
Goroutines are essentially lighter versions of threads, that can be used in a
shell-pipe-style way to produce data-pipelines. Channels are managed FIFOs,
used by Goroutines to communicate. All of this works very well and is
incredibly simple, making Go a fantastic language for handling lots of &lt;span class="caps"&gt;IO&lt;/span&gt;, like
load balancers or maybe database connections. It just scales well. A Goroutine&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do some work here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// start 10 instances of work() in the background&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Note: because main() exits here, work() will just die with it unless&lt;/span&gt;
    &lt;span class="c1"&gt;// we wait for it&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But unless you are dependent on this extreme scalability, Go might not be the
right choice for you. There are no native objects like in Python, D or other
modern languages. At least they do not look like it. Objects are C-style
typedefs, often structs, and methods can be attached in the following&amp;nbsp;way:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Vertex&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Y&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Vertex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Vertex: (%f, %f)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a Vertex method that takes no arguments and returns a string. Now, let
us say the Vertex type should also implement an interface, because these exist
in Go. It actually already does, it implements &lt;code&gt;fmt.Stringer&lt;/code&gt;. Why, you ask?
Because it defined the &lt;code&gt;String()&lt;/code&gt; method, and interfaces are implemented
implicitly as soon as all the methods they define are also defined by a type.
This is one of the more extreme examples, where Go&amp;#8217;s minimalism makes
programming unnecessarily&amp;nbsp;difficult.&lt;/p&gt;
&lt;p&gt;On the other hand, Go comes with it&amp;#8217;s own formatting tool, that enforces a
standard coding style (but also tabs for indentation), package management (but
without versioning, and the idea that you have to order your source in the
so-called $&lt;span class="caps"&gt;GOPATH&lt;/span&gt;, which causes more work than one would imagine) and build
tools. Makefiles are not really needed anymore, unless you try to do something&amp;nbsp;special.&lt;/p&gt;
&lt;p&gt;Go has this overall approach of &amp;#8220;back to the roots, but better&amp;#8221;, but also &amp;#8220;do
it our way&amp;#8221;. The minimalism works in most scenarios quite well, interfaces are
the only real problem you will encounter while writing the software itself, and
maybe the completely missing inheritance.  Things like the package management
will drive you nuts, though. And the fact that because of the way Go handles
certain things, like visibility (everything starting with a capital letter is
&amp;#8220;exported&amp;#8221;), cause you to having to type a lot more than in other&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;/strong&gt; It feels boring, it feels old, and as a consequence overly laborious.
As a general purpose language, I feel D does the job a lot&amp;nbsp;better.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Wed, 18 Feb 2015 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2015-02-18:my-thoughts-about-go.html</guid></item><item><title>A practical solution for Twitch.tv</title><link>https://sulami.github.io/a-practical-solution-for-twitchtv.html</link><description>&lt;p&gt;I have now written three scripts to stream to Twitch.tv from Linux, and all of
them were just hardcoded ffmpeg commands. Today I am proud to present an actual
streaming script that takes arguments, passes them to ffmpeg in the proper way
to enable streaming and parses the output. The code can be found&amp;nbsp;here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/sulami/streamo"&gt;https://github.com/sulami/streamo&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Sun, 08 Feb 2015 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2015-02-08:a-practical-solution-for-twitchtv.html</guid></item><item><title>Using Xephyr to simulate multiple monitors</title><link>https://sulami.github.io/using-xephyr-to-simulate-multiple-monitors.html</link><description>&lt;p&gt;One of the most requested features in &lt;a href="https://github.com/sulami/frankenwm"&gt;FrankenWM&lt;/a&gt; is support for multiple
monitors. I currently only use one monitor, mostly because I do not need more
right now (there have been time where I have been using 4 monitors at the same
time, all connected to one machine). This situation makes it quite difficult
for me to develop such a rather big feature, simply because I cannot test it at
all. I have tried to figure out how to use nested X servers to simulate
multiple monitors on a single screen for a few weeks now, finally finding the
solution&amp;nbsp;today.&lt;/p&gt;
&lt;p&gt;The nesting tool of my choice is &lt;a href="http://www.freedesktop.org/wiki/Software/Xephyr/"&gt;Xephyr&lt;/a&gt;, because it is quite feature-rich
and easy to use (in comparison to Xnest). I have also experimented with Xvfb
and Xdmx, the latter being unable to use randr, which is a dealbraker. But
while scraping mailing lists today I found the magical solution, and it only
needs&amp;nbsp;Xephyr.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Xephyr -screen 640x480 -screen 640x480 +xinerama :1 &amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This simple line starts Xephyr with two screens in one and uses Xinerama, :1.0
and :1.1, if that makes any sense. The result looks something like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="scrot" src="https://sulami.github.io/pictures/scrot_xephyr_multihead.png" /&gt;&lt;/p&gt;
&lt;p&gt;Because I am currently working on the proper support, FrankenWM still uses the
whole screen as one, rather than using a separate desktop for each&amp;nbsp;monitor.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Fri, 19 Dec 2014 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2014-12-19:using-xephyr-to-simulate-multiple-monitors.html</guid></item><item><title>On social media</title><link>https://sulami.github.io/on-social-media.html</link><description>&lt;p&gt;Do we need social networks? I do not think so. This might sound fairly drastic
which I am aware of, but let me explain how I came to this conclusion, network
by&amp;nbsp;network:&lt;/p&gt;
&lt;h1&gt;Facebook&lt;/h1&gt;
&lt;p&gt;Obviously the biggest and most used one. Almost everyone in the first world has
a Facebook account (if you do not count Russia, here purely to state my point,
no other implications). Markus &amp;#8216;Notch&amp;#8217; Persson (the Minecraft inventor) said
&lt;a href="https://twitter.com/notch/statuses/448586381565390848"&gt;Facebook was creepy&lt;/a&gt;, which I think we all can agree&amp;nbsp;on.&lt;/p&gt;
&lt;h1&gt;Twitter&lt;/h1&gt;
&lt;p&gt;There is a really nice post by Alex Gaynor &lt;a href="https://alexgaynor.net/2014/oct/30/i-hope-twitter-goes-away/"&gt;here&lt;/a&gt; about why Twitter is bad
as concept, stating mainly that is does not allow effective community forming
and promotes harassment. My personal addition to this would be that it is
horrible to use and as a not even subculturally known person like most of us it
makes little sense to broadcast our thoughts into the void. It also suffers
from&amp;nbsp;tweet-spam.&lt;/p&gt;
&lt;h1&gt;Google&amp;nbsp;Plus&lt;/h1&gt;
&lt;p&gt;Well, aside from a very small group of people who are mostly into &lt;span class="caps"&gt;OSS&lt;/span&gt; no one is
really using it. Everyone with a Gmail-address and/or and YouTube account is
involuntarily part of it. Google already has loads of data about everyone,
through Analytics, Adsense/Adwords, YouTube, Street View, Android, Chrome and
of course the search, simply called Google. They do not need Google Plus, and
we do not&amp;nbsp;either.&lt;/p&gt;
&lt;h1&gt;Reddit&lt;/h1&gt;
&lt;p&gt;Reddit is not really a social network, but more of a collection of forums and
link aggregators, grouped by topics. Reddit in my eyes is the perfect example
of a community-based website done right. The whole voting system for both posts
and comments and the mini-communities allow effective, centralized news sharing
and discussion for people with shared&amp;nbsp;interests.&lt;/p&gt;
&lt;h1&gt;Where am I going with&amp;nbsp;this?&lt;/h1&gt;
&lt;p&gt;There are some more networks and network-like websites, but I do have a point
to make. &lt;em&gt;You do not need a network without a community or content&lt;/em&gt;. Have a
look at YouTube. There are subcommunities, like the gamers, the beauty-girls,
the comedians, and others, and there is content in the form of videos.
Hackernews is a link aggregator which focusses on computer geeks, an existing
community, and content in the form of links (most of the&amp;nbsp;time).&lt;/p&gt;
&lt;p&gt;The first three networks on our list are networks just to be networks.
Facebook aims to be omnipresent and allow you to contact your real-life friends
while also incorporating sites to follow celebrities or companies. This
actually makes sense, and it obviously works. Twitter and G+ are just empty
networks that allow people to interact, but no one told them why they should.
Facebook works, because everyone uses it. But ultimately, you do not need
Facebook to contact who you know anyway. When the time comes and people are
less obsessive about sharing how cool their life is, Facebook will go&amp;nbsp;down.&lt;/p&gt;
&lt;p&gt;People live without Facebook, and they continue to do so. People you are
interested in have your number. Anyone on the internet you might want to
interact with is probably a member of a community you are a member of as well.
Reddit does this, 4chan, Hackernews, &lt;span class="caps"&gt;IRC&lt;/span&gt; and even mailinglists do this.
Facebook, Twitter and G+ do&amp;nbsp;not.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 27 Oct 2014 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2014-10-27:on-social-media.html</guid></item><item><title>Choosing a mobile workstation</title><link>https://sulami.github.io/choosing-a-mobile-workstation.html</link><description>&lt;h1&gt;Update&amp;nbsp;2014-10-30&lt;/h1&gt;
&lt;p&gt;Peter Wu wrote me about this topic and sent me &lt;a href="http://brianolsen.wordpress.com/2014/04/08/system-76-gazelle-professional-9-clevo-w650sz-short-review/"&gt;a review&lt;/a&gt; of the System76
Gazelle, which raises concerns. A quick search for Galago reviews also resulted
in &lt;a href="http://bitflip.net/system76-galago-ultrapro-review-clevo-w740su-259/"&gt;another quite negative review&lt;/a&gt;. The System76 notebooks seem to be
mostly rebranded Clevo machines with questionable quality. That pretty much
leaves me with the Schenker ones as the only option, probably the B513. I will
write an extended review once I finalized my decision and got&amp;nbsp;one.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Original Post&amp;nbsp;2014-10-24&lt;/h1&gt;
&lt;p&gt;I recently downsized from my huge Workstation that could draw up to one
kilowatt of power to a more compact and reasonable desktop cube with a current
generation Intel Xeon and loads of memory to cache whole directories and pieces
of software I use. It also solved my long problems with the &lt;span class="caps"&gt;AMD&lt;/span&gt; graphics
drivers for Linux by eliminating the dedicated &lt;span class="caps"&gt;GPU&lt;/span&gt; alltogether. The Intel &lt;span class="caps"&gt;IGP&lt;/span&gt;
is enough for desktop compositing simple&amp;nbsp;3D-acceleration.&lt;/p&gt;
&lt;p&gt;Now I am considering taking it one step further and transition to a notebook,
if I can get my hands on one that suits my needs. The reason for this is being
able to take my work environment with me, to work from wherever I am, do
presentations and have easy access to my data at all times, especially now that
I am finding myself more and more away from my desk. My desk would then consist
of my big 27&amp;#8221; screen, my mechanical keyboard, a proper mouse and my sound
system, making the notebook just a smaller desktop that I can unplug and take
with me in a bagpack if I am leaving, making me a lot more&amp;nbsp;flexible.&lt;/p&gt;
&lt;p&gt;So, here are my requirements for a notebook like&amp;nbsp;that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A screen between 13&amp;#8221; and 15&amp;#8221;, the best compromise between screen estate and
  overall size (to fit into a bagpack, which is a must, I travel on two wheels
  a&amp;nbsp;lot)&lt;/li&gt;
&lt;li&gt;1080p 16:9, to be able to use my and other screens and regular TVs without
  messing everything up by having to switch resolutions, or even aspect&amp;nbsp;ratios&lt;/li&gt;
&lt;li&gt;An Intel &lt;span class="caps"&gt;IGP&lt;/span&gt; without dedicated &lt;span class="caps"&gt;GPU&lt;/span&gt;, the drivers for Nvidia and &lt;span class="caps"&gt;AMD&lt;/span&gt; are by far
  worse and as noted above, I just need the &lt;span class="caps"&gt;IGP&lt;/span&gt;. Also improves runtime on&amp;nbsp;battery&lt;/li&gt;
&lt;li&gt;By that extension an Intel &lt;span class="caps"&gt;CPU&lt;/span&gt;, preferably current generation, ideally a
  quad core with Hyperthreading, but 4 threads should do fine as well (dual
  core + &lt;span class="caps"&gt;HT&lt;/span&gt; or vanilla quad&amp;nbsp;core)&lt;/li&gt;
&lt;li&gt;At least 8 &lt;span class="caps"&gt;GB&lt;/span&gt; of &lt;span class="caps"&gt;DDR3&lt;/span&gt; memory, preferably 1600+ MHz, I can use up to 32 &lt;span class="caps"&gt;GB&lt;/span&gt;
  fairly&amp;nbsp;effectively&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HDMI&lt;/span&gt; and/or DisplayPort for connecting external screens, Headphone out, at
  least one &lt;span class="caps"&gt;USB3&lt;/span&gt;, at least 3-4 USBs in total, WiFi of course, 54+ MBit/s, Gb
  &lt;span class="caps"&gt;LAN&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;I would prefer not having a numpad and a more normal sized keyboard instead,
  would not mind if it was&amp;nbsp;backlit&lt;/li&gt;
&lt;li&gt;I do not care about storage or optical drives, is already taken care&amp;nbsp;of&lt;/li&gt;
&lt;li&gt;A somewhat sturdy case would be&amp;nbsp;nice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the stability and hardware with excellent Linux support, Lenovo&amp;#8217;s
Thinkpads are of course on my radar. Then there are the German Schenker
notebooks, which are affordable and customizable. Then there are System76,
which are known for distributing preinstalled Ubuntu machines. Here are some&amp;nbsp;candidates:&lt;/p&gt;
&lt;h1&gt;Lenovo ThinkPad T440s&amp;nbsp;Ultrabook&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;14&amp;#8221; 1080p &lt;span class="caps"&gt;IPS&lt;/span&gt;&amp;nbsp;display&lt;/li&gt;
&lt;li&gt;Intel i7-4600U (2.1 GHz dual core with &lt;span class="caps"&gt;HT&lt;/span&gt; = 4&amp;nbsp;threads)&lt;/li&gt;
&lt;li&gt;Intel &lt;span class="caps"&gt;HD&lt;/span&gt; Graphics&amp;nbsp;4400&lt;/li&gt;
&lt;li&gt;8 &lt;span class="caps"&gt;GB&lt;/span&gt; &lt;span class="caps"&gt;DDR3&lt;/span&gt;-1600&amp;nbsp;memory&lt;/li&gt;
&lt;li&gt;256 &lt;span class="caps"&gt;GB&lt;/span&gt; &lt;span class="caps"&gt;SSD&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1287€&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the almost Thinkpad without a dedicated &lt;span class="caps"&gt;GPU&lt;/span&gt; and a 1080p display. While
it already features a nice &lt;span class="caps"&gt;SSD&lt;/span&gt;, the hardware is sub-par in comparison and the
price just not justified. I do not pay 50% extra for the pointing stick and the
Thinkpad casing, no matter how indestructible it is. Other candidates would be
the T540p, but that starts at about 1300€ as well (in configurations I deem&amp;nbsp;useful).&lt;/p&gt;
&lt;h1&gt;Schenker S403&amp;nbsp;Ultrabook&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;14&amp;#8221; 1080p &lt;span class="caps"&gt;IPS&lt;/span&gt;&amp;nbsp;display&lt;/li&gt;
&lt;li&gt;Intel i7-4500U (1.8 GHz dual core with &lt;span class="caps"&gt;HT&lt;/span&gt; = 4&amp;nbsp;threads)&lt;/li&gt;
&lt;li&gt;Intel &lt;span class="caps"&gt;HD&lt;/span&gt; Graphics&amp;nbsp;4400&lt;/li&gt;
&lt;li&gt;2950 mAh battery (about 8h&amp;nbsp;runtime)&lt;/li&gt;
&lt;li&gt;Without any&amp;nbsp;drives&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;890€ (8 &lt;span class="caps"&gt;GB&lt;/span&gt;) / 920€ (16 &lt;span class="caps"&gt;GB&lt;/span&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is roughly a high-end 13&amp;#8221; MacBook Air, not that MacBooks would even make
this list. They are nice hardware, but overpriced and sold by a terrible
company. It is less powerful than the B513 while costing more, which I can only
explain with the smaller case. The advertised runtime on battery is incredible
though, although that is not my main concern, I just need 3+&amp;nbsp;hours.&lt;/p&gt;
&lt;h1&gt;Schenker&amp;nbsp;B513&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;15.6&amp;#8221; 1080p &lt;span class="caps"&gt;IPS&lt;/span&gt;&amp;nbsp;display&lt;/li&gt;
&lt;li&gt;Intel i7-&lt;span class="caps"&gt;4710MQ&lt;/span&gt; (2.5GHz quad core with &lt;span class="caps"&gt;HT&lt;/span&gt; = 8&amp;nbsp;threads)&lt;/li&gt;
&lt;li&gt;Intel &lt;span class="caps"&gt;HD&lt;/span&gt; Graphics&amp;nbsp;4600&lt;/li&gt;
&lt;li&gt;5600 mAh battery (about 5h&amp;nbsp;runtime)&lt;/li&gt;
&lt;li&gt;Without any&amp;nbsp;drives&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;769€ (8 &lt;span class="caps"&gt;GB&lt;/span&gt;) / 879€ (16 &lt;span class="caps"&gt;GB&lt;/span&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The B513 looks really promising to me, relatively cheap, quite powerful for a
notebook and without anything I do not care about. The &lt;span class="caps"&gt;IPS&lt;/span&gt; panel is a tiny plus
for me. The extra power over the S403 comes at the cost of battery runtime, but
I can live with&amp;nbsp;that.&lt;/p&gt;
&lt;h1&gt;System76 Galago&amp;nbsp;UltraPro&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;14.1&amp;#8221; 1080p&amp;nbsp;display&lt;/li&gt;
&lt;li&gt;Intel i7-&lt;span class="caps"&gt;4760HQ&lt;/span&gt; (2.1 GHz quad core with &lt;span class="caps"&gt;HT&lt;/span&gt; = 8&amp;nbsp;threads)&lt;/li&gt;
&lt;li&gt;Intel Iris &lt;span class="caps"&gt;IGP&lt;/span&gt; (more powerful than Intel &lt;span class="caps"&gt;HD&lt;/span&gt;&amp;nbsp;Graphics)&lt;/li&gt;
&lt;li&gt;2800 mAh battery (about 4h&amp;nbsp;runtime)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;880€ (8 &lt;span class="caps"&gt;GB&lt;/span&gt;) / 967€ (16 &lt;span class="caps"&gt;GB&lt;/span&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Galago is really powerful for a notebook this small, but expensive in
comparison. It has more power than the direct competitor S403 but only half the
battery runtime as a result of that. Both System76 notebooks get even more
expensive due to shipping and &lt;span class="caps"&gt;VAT&lt;/span&gt;, effectively adding about 20% to the&amp;nbsp;price.&lt;/p&gt;
&lt;h1&gt;System76 Gazelle&amp;nbsp;Professional&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;15.6&amp;#8221; 1080p&amp;nbsp;display&lt;/li&gt;
&lt;li&gt;Intel i7 quad cores with &lt;span class="caps"&gt;HT&lt;/span&gt; between 2.5 and 2.9 GHz = 8&amp;nbsp;threads&lt;/li&gt;
&lt;li&gt;Intel &lt;span class="caps"&gt;HD&lt;/span&gt; Graphics&amp;nbsp;4600&lt;/li&gt;
&lt;li&gt;3260 mAh battery (about 2h&amp;nbsp;runtime)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;721€ (8 &lt;span class="caps"&gt;GB&lt;/span&gt;) / 808€ (16 &lt;span class="caps"&gt;GB&lt;/span&gt;) to 1050€ (8 &lt;span class="caps"&gt;GB&lt;/span&gt;) / 1137€ (16 &lt;span class="caps"&gt;GB&lt;/span&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like the Galago, the Gazelle gets more expensive thanks to the import to
Europe. It is roughly equivalent to the B513, but after &lt;span class="caps"&gt;VAT&lt;/span&gt; more expensive and
with the only battery in this list that I actually consider too&amp;nbsp;small.&lt;/p&gt;
&lt;p&gt;So here they are, my first candidates for a portable workspace. So far, it
looks like the Schenker B513 is clearly in lead, while actually being the
cheapest. It is more a classical notebook than a &amp;#8220;modern&amp;#8221; ultrabook, which
makes it cheaper overall, has all the features I desire, a matte &lt;span class="caps"&gt;IPS&lt;/span&gt; panel and
enough space to fit up to three 2.5&amp;#8221; SSDs. For 860€ I can get the small quad
core with HyperThreading, which is enough, and 16 &lt;span class="caps"&gt;GB&lt;/span&gt; memory on this superb
platform. That is obviously more than I would pay for a desktop, which would
also enables me to switch parts for updgrades later, but the mobility is what
counts&amp;nbsp;here.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Fri, 24 Oct 2014 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2014-10-24:choosing-a-mobile-workstation.html</guid></item><item><title>My thoughts about D</title><link>https://sulami.github.io/my-thoughts-about-d.html</link><description>&lt;p&gt;Roughly two weeks ago, a blogpost about the &lt;a href="http://dlang.org"&gt;D language&lt;/a&gt; popped up on both
hackernews and reddit. I took the time to read it, and it inspired me to try D
out for myself. Here are some of my thoughts, about two weeks into the
language, with prior experience in C but no real experience in C++ or
Objective-C. Scroll down for a &lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I am assuming that you, the reader, are at least somewhat familiar with C, and
have some general knowledge about C++ and why it became one of the worst
languages there are, right next to &lt;span class="caps"&gt;PHP&lt;/span&gt; (actually for the same reasons). D aims
to be what C++ (and appearantly Objective-C) failed to be, a modern-times C
with proper classes, reasonable support for unittesting, garbage collection,
exceptions, faster compilation and much&amp;nbsp;more.&lt;/p&gt;
&lt;p&gt;The recommended way to use D is by using &lt;a href="http://code.dlang.org/about"&gt;dub&lt;/a&gt;, a combined
package manager and build system, which reads the requirements of a programm
from a json, if needed downloads and compiles some modules, and then builds
your program. This is a great system, as long as there packages to use. Which
is the major downside of dub-based building. There are few packages in the dub
databases (321 at the time of writing), so chances are the libraries you need
are not available this way. But you can still use C libraries, because D is
&lt;em&gt;almost&lt;/em&gt; a superset of C, which makes binding D to C really easy, almost
scriptable (actually a lot of the dub packages are just C-library bindings).
This is what rescues D in my eyes. Python is still one of the best userspace
language out there because of its versatility, and D can benefit from C&amp;#8217;s&amp;nbsp;versatility.&lt;/p&gt;
&lt;p&gt;But let me give you a real first impression of&amp;nbsp;D:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdio&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;writeln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is an simple echo clone, which echoes back one command-line argument per
line. As you can see, it almost looks like C. Instead of &lt;code&gt;#include&lt;/code&gt; there is
&lt;code&gt;import&lt;/code&gt;, and there is native string support, as well as foreach, but the
general picture is pretty similar. But already the first line brings me to
something I really like about D, the standard library. &lt;a href="http://dlang.org/library/index.html"&gt;D&amp;#8217;s standard
library&lt;/a&gt;, called &amp;#8220;Phobos&amp;#8221; is incredible. Aside from the usual filesystem
inspection, math, time, hash and socket stuff, there is something like
&lt;a href="http://dlang.org/library/std/getopt.html"&gt;getopt&lt;/a&gt;, a library which allows you to make reading command line
arguments really easy, with defining short and long aliases (&lt;code&gt;-l|--list&lt;/code&gt;) and
returning the not used arguments&amp;nbsp;afterwards.&lt;/p&gt;
&lt;p&gt;D has been modeled after C, which makes it both an application and a system
level language, but unlike most C-based languages, it also has a proper web
framework, &lt;a href="http://vibed.org/"&gt;vibe.d&lt;/a&gt;. Vibe is comparable to Flask, as in it provides a low
amount of predefined structures, and echo-webservers are just a couple of lines
long (as can be seen on the vibe website). But it can be used for large scale
projects, if properly maintained. Aside from native code made from D, which
makes it easily faster than most interpreted solutions, it uses the
&lt;a href="http://vibed.org/templates/diet"&gt;Diet&lt;/a&gt; template language, which is an extended Jade (used by node.js). I
would personally describe it as &amp;#8220;the markdown of html templates&amp;#8221;, because it
almost looks like markdown, but with a lot more control over html attributes
and the ability to embed D code in the template. I am currently working on
proper syntax highlighting for diet in vim (&lt;a href="https://github.com/sulami/diet.vim"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you now think &amp;#8220;Wow, that sounds great&amp;#8221;, you are pretty much on my side, I
already fell in love with D. The only major downside I can see is the adoption.
D has been around for almost a decade now and the only case of someone actually
using it I have heard of (aside from myself and the D community) is Facebook. I
believe D could be the next big language, if it gets&amp;nbsp;adopted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;/strong&gt; D is great for a lot of applications, especially ones with high
performance requirements, has a great standard library and relatively simple
interaction with C code, as well as a nice package manager/build system combo.
It lacks in terms of adoption, resulting in few ports to D, few frameworks, few
third-party documentation. If D gets adopted, it will be a major&amp;nbsp;success.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2014-09-03:my-thoughts-about-d.html</guid></item><item><title>Write code every day</title><link>https://sulami.github.io/write-code-every-day.html</link><description>&lt;p&gt;After failing several times, today I managed to get a 30-day streak on my
personal GitHub account. This happened, because I challenged myself a few
months ago to accomplish exactly that. Now, that I succeeded after I once
failed at day 29 by simply forgetting to write something, I can share my
experiences. In fact, this blog post is the commit that completes the&amp;nbsp;challenge.&lt;/p&gt;
&lt;p&gt;The point of committing at least once every day is to not lose the momentum,
say when coming back to the code after a weekend. I observed myself being more
in touch with the codebase, by looking at it at least once a day, and also
trying to improve it. The big problem for me was, my GitHub account houses
exclusively fun projects, this blog and my dotfiles, because most of my
partners are not okay with putting up potentially sensitive code (the old we
are much more in danger if we open-source argument). So while I wrote at least
some code almost every day for probably the last year, most of it is not
included in my GitHub statistics. If you &lt;a href="https://github.com/sulami"&gt;look at them&lt;/a&gt;, you can see I
started the challenge in early may, roughly 3 months&amp;nbsp;ago.&lt;/p&gt;
&lt;p&gt;This time has pushed my fun projects greatly, and I have learned a lot, because
unlike my real work, the fun projects are mostly in areas I rarely explore
otherwise. I have been toying with encryption, filesystems, games, frameworks I
might use in the future and &lt;a href="https://github.com/sulami/frankenwm"&gt;recently started activiely developing and
maintaining a window manager&lt;/a&gt;. I always tried out more stuff in my free
time, but this challenge made me force to actively look for things to try out,
to have some meaningful commit (I don&amp;#8217;t want to count typo fixes or version
bumps, because that is just cheap). And while I do not think it is something I
will keep doing forever as regular, it has shown me a world in which I am
constantly thinking about what I could code, and that is a good thing. It draws
the line between coding from nine to five five days a week and just completely
forgetting evertyhing about your code on friday afternoon and coding something
for fun, wanting that progress, that bugfix or new&amp;nbsp;feature.&lt;/p&gt;
&lt;p&gt;So, what are my conclusions on this subject? First off, I think everyone should
try it, it is often not easy at all to come up with something to code, but it
makes you think about it more often, solving problems when away from the
computer. But I also think, we should not take it too far, coding can be fun,
and it is certainly more healthy if it is fun than when you just code so you
have something to eat. But there also has to be code-free time, like a
vacation, or you might burn out rather quickly. After all, fun coding is a more
a hobby, and it should not be the reason you get up in the morning. As with
most things, there is a balance to find, coding on some cool project on
saturday afternoon is fine, and even spending a whole weekend to accomplish
something is great, but you cannot do this every weekend, or you find yourself
doing nothing but coding and sleeping, which is not good at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;The final conclusion is: If you have fun doing it, code in your free time, but
also do other things, preferably without computers and with other&amp;nbsp;people.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 11 Aug 2014 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2014-08-11:write-code-every-day.html</guid></item><item><title>Using git locally</title><link>https://sulami.github.io/using-git-locally.html</link><description>&lt;p&gt;When you write your code, using a version control mechanism like git is
crucial, even more than writing proper unit tests, even when working on your
own, even when it is only your evening project. Just use git and commit
regularly, it will not hurt you (unless your workflow is inherently broken, but
then fix you have to fix it anyway). Committing after every logical change and
pushing when finishing the session is something I practice almost like a
religion. Not only does it keep my history accessible and enables me easy
branching and stashing (read up on &lt;a href="http://linux.die.net/man/1/git-branch"&gt;git-branch(1)&lt;/a&gt; and
&lt;a href="http://linux.die.net/man/1/git-stash"&gt;git-stash(1)&lt;/a&gt; if you do not already use them), it also serves as simple
way to mirror my repositories to other machines and backup them this&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;Now to have your code available everywhere, you can just push it to your
&lt;a href="https://github.com"&gt;Github&lt;/a&gt; or &lt;a href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt; account, but there are pieces of code we do not
want to see there. Security-critical code, configs or other files containing
sensitive data, or just code we are not particularly proud of. To still benefit
from the network capabilities of git, we need to host git&amp;nbsp;ourselves.&lt;/p&gt;
&lt;p&gt;Setting up a local git mirror is not a big deal at all as the following
examples will show. Git uses ssh to transmit data over the network, which means
every toaster that is capable of running sshd should also be able to serve git
repos in a way that Github or Bitbucket do it, just without the web interface.
We assume we already have a repo containing out working directory, maybe even
some commits, does not matter. The following snippet demonstrates establishing
a git repo in my home directory which we can use to clone, push and&amp;nbsp;pull.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;% mkdir -p ~/git/myrepo.git&lt;/span&gt;
&lt;span class="c"&gt;% cd ~/git/myrepo.git&lt;/span&gt;
&lt;span class="c"&gt;% git init --bare&lt;/span&gt;
&lt;span class="n"&gt;Initialized&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sulami&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myrepo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="c"&gt;% cd ~/myrepo&lt;/span&gt;
&lt;span class="c"&gt;% git remote add origin /home/sulami/git/myrepo.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is it, my local repository is now registered as &lt;code&gt;origin&lt;/code&gt; in this specific
working copy, and once I pushed my commits to it, I can clone it to somewhere
else. This is usually not all that useful, I only keep a bunch of bare
repositories for archiving reasons around, to clone some old projects of mine
if I want to look something up. Local remote repositories are way more
interesting because we can use them to push changes around to various machines,
work together with others more efficiently and much more. So here is how we
setup a local remote git server, given our repo alreay exists like before. My
ssh login uses my ssh-key to sign me&amp;nbsp;in.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;% ssh sulami@remote&lt;/span&gt;
&lt;span class="c"&gt;% mkdir -p /srv/git/myrepo.git&lt;/span&gt;
&lt;span class="c"&gt;% cd /srv/git/myrepo.git&lt;/span&gt;
&lt;span class="c"&gt;% git init --bare --shared=group&lt;/span&gt;
&lt;span class="n"&gt;Initialized&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myrepo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="c"&gt;% exit&lt;/span&gt;
&lt;span class="c"&gt;% cd ~/myrepo&lt;/span&gt;
&lt;span class="c"&gt;% git remote add origin ssh://remote/srv/git/myrepo.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do you recognize this snippet? It is almost the same as before, we just changed
some details. First, we initialize the bare repository via ssh on our remote.
We also set it up in a way that allows us to share it with a group we can add
later on, so eventual coworkers can use their own ssh-logins to use this
repository. You can now think of exposing it to the web, or maybe installing
&lt;a href="http://git.zx2c4.com/cgit/"&gt;cgit&lt;/a&gt; to provide a browser-friendly interface. It all depends on what
you need, but to just synchronize your code amongst several machines there is
nothing else&amp;nbsp;nessecary.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 15 Jul 2014 01:50:00 +0200</pubDate><guid>tag:sulami.github.io,2014-07-15:using-git-locally.html</guid></item><item><title>My own window manager</title><link>https://sulami.github.io/my-own-window-manager.html</link><description>&lt;p&gt;I accidentaly wrote a &lt;a href="https://github.com/sulami/frankenwm"&gt;window manager&lt;/a&gt;. It started out by cloning &lt;a href="https://github.com/cloudef/monsterwm-xcb"&gt;cloudef&amp;#8217;s
monsterwm-xcb&lt;/a&gt; to apply some smaller fixes, maybe opening a pull request to
merge them upstream again. But I quickly found more and more things to fix,
then I started to add some smaller features I missed from other window
managers. And thus, FrankenWM was made, pieced together from monsterwm-xcb and
other window managers. I stole some of the ewmh-related code from &lt;a href="https://github.com/venam/2bwm"&gt;2bwm&lt;/a&gt;,
and adapted features from &lt;a href="http://dwm.suckless.org"&gt;dwm&lt;/a&gt;, &lt;a href="http://i3wm.org"&gt;i3&lt;/a&gt; and others. The name is an obvious
play on&amp;nbsp;words.&lt;/p&gt;
&lt;p&gt;So, what does it do? From a user&amp;#8217;s standpoint it is quite similar to dwm or
awesome (or of course monsterwm). It tiles dynamically, using one big master
window and a stack of smaller slave windows on each virtual desktop. There are
a few predefined layouts to choose from, v-stack, b-stack, grid, fibnonacci and
monocle. V-stack stacks the slave windows next to the master window, b-stack
below the master. Grid tries to give the same amount of screen space to every
window by placing them in a grid-like structure, fibonacci makes the each
window 50% as big as the window above it in the stack. And finally, monocle
fullscreens every window in a stacking fashion so you just see one at a&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The preferred way of controlling it is by using the keyboard, which uses a set
of shortcuts similar to the ones known from vim by default, and makes heavy use
of the Mod4-/Meta-/Windows-key to prevent overlapping with shortcuts for other
software. The mouse can be used to control floating windows and to select
windows, but the focus lies on mouse-less&amp;nbsp;usage.&lt;/p&gt;
&lt;p&gt;There is also support for adding gaps between the windows, inspired by dwm&amp;#8217;s
useless gaps patch, which allow you to see your wallpaper or dropshadows from a
compositor. Those gaps are adjustable on the fly and optionally specific to
virtual desktops. I also implemented some features to allow using floating
windows without having to use the mouse. On the more technical side of things I
am currently implementing &lt;span class="caps"&gt;EWMH&lt;/span&gt;-compliance, which is important for compability
with a lot of different&amp;nbsp;programs.&lt;/p&gt;
&lt;p&gt;The configuration is entirely done at compile time by editing the config.h. In
my git repository I include a sample config with some comments explaining how
to use it. As an alternate example, you can have a look at &lt;a href="https://github.com/sulami/dotfiles/blob/master/frankenwm.config.h"&gt;my personal
config&lt;/a&gt;, which uses some more advanced features. As a bonus for Arch users,
I also maintain an &lt;a href="https://aur.archlinux.org/packages/frankenwm-git/"&gt;&lt;span class="caps"&gt;AUR&lt;/span&gt; package&lt;/a&gt; which I update on bigger changes in the git
repository, although I still reccomend using the version from Github, as I do
not have a lot of experience with the &lt;span class="caps"&gt;AUR&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The prerequisites for building FrankenWM are all &lt;span class="caps"&gt;XCB&lt;/span&gt;-based, specifically you
will need the &lt;span class="caps"&gt;XCB&lt;/span&gt; headers including the util, util-wm and keysyms ones, which
you can probably pull out of your distribution&amp;#8217;s repositories. I have yet to
build it on my OpenBSD machine, so I cannot say anything yet to building it on
the &lt;span class="caps"&gt;BSD&lt;/span&gt;&amp;nbsp;family.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Sat, 05 Jul 2014 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2014-07-05:my-own-window-manager.html</guid></item><item><title>Getting rid of Flash</title><link>https://sulami.github.io/getting-rid-of-flash.html</link><description>&lt;p&gt;I started using the &lt;span class="caps"&gt;HTML5&lt;/span&gt;-Player on YouTube, because Flash kept breaking
fullscreen, and I have not found a single video not supporting &lt;span class="caps"&gt;HTML5&lt;/span&gt; in over a
month, so I would consider Flash-less YouTube a valid option. I also discovered
that Vimeo uses a pretty nice &lt;span class="caps"&gt;HTML5&lt;/span&gt; player on their site, thus not requiring
Flash. And given that Adobe basically said &amp;#8220;Suck it, Linux, we won&amp;#8217;t support
you guys properly, have fun with 11.2 and security fixes&amp;#8221;, plus the fact that
flash is draining huge amount of resources and is a possible security risk, I
asked myself, why do I need it&amp;nbsp;anyway?&lt;/p&gt;
&lt;p&gt;The answer was somewhat surprising: I don&amp;#8217;t. Flash has always only been useful
for videostreaming, flashgames and intrusive ads. I can live without flashgames
and ads, and with YouTube and Vimeo out of the way the only site left I
occasionally use Flash on is Twitch.tv.
&lt;a href="https://github.com/chrippa/livestreamer"&gt;Livestreamer&lt;/a&gt;. Extracts the &lt;span class="caps"&gt;RTMP&lt;/span&gt;
stream and pipes it to a video player of your choice, like &lt;span class="caps"&gt;VLC&lt;/span&gt;. I have been
using irssi instead of the obnoxious and slow webchat for quite a while now and
it seems like I only have to visit the website to figure out who I like is
streaming.  This enabled me to disable (cough) the Flash plugin&amp;nbsp;alltogether.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 27 May 2014 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2014-05-27:getting-rid-of-flash.html</guid></item><item><title>Test-driven development in vim</title><link>https://sulami.github.io/test-driven-development-in-vim.html</link><description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;Test-driven development (&lt;span class="caps"&gt;TDD&lt;/span&gt;)&lt;/a&gt; is a way of developing software by using
tests over and over again. When I first was introduced to this concept, I
thought, automated tests are a nice idea, why not? Then I read a book about
&lt;span class="caps"&gt;TDD&lt;/span&gt;, which proceeded to explain how you start your project by writing a test
that (obviously) fails, then start your actual project, and test again. At this
point in time, we have a something that returns a default webpage, or zero. Not
even printing &amp;#8220;Hello World&amp;#8221; or &amp;#8220;Success!&amp;#8221;. The next step is to write another
test, which checks for some actual content or functionality. After this test
fails (which by the way is important, as it shows that the test will hopefully
not produce false positives), we write the piece of content or&amp;nbsp;functionality.&lt;/p&gt;
&lt;p&gt;In the beginning, this way of writing code seems (and is) incredibly slow, and
I find myself skipping the first five tests until I have something that
actually produces useful output. This is sort of okay, I do not think it will
hurt my code in any major way. But after those initial skipped tests, say 10
minutes into the project, I start to religiously write tests for everything
that happens, which is way easier than implementing proper tests for all the
different stages and levels when you wrote code for several hours and start
wasting time by manually testing changes. I think, everything that takes more
than 30 minutes to code benefits from &lt;span class="caps"&gt;TDD&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;But let&amp;#8217;s have a look at some actual &lt;span class="caps"&gt;TDD&lt;/span&gt; using vim and C. C is not often
written using &lt;span class="caps"&gt;TDD&lt;/span&gt;, but giving usually rather poor debugging output compared to
interpreted languages, &lt;span class="caps"&gt;TDD&lt;/span&gt; is even more useful, as you will instantaneously see
when a change breaks any functionality. To make testing easier, we will define
a keyboard mapping to start our tests from within&amp;nbsp;vim.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;map &amp;lt;Leader&amp;gt;t :!make -B tests &amp;amp;&amp;amp; ./tests&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This mapping will call make in a shell (which means you have to have make
installed), compile our &lt;em&gt;tests.c&lt;/em&gt; file and run it. Depending on which language
you are using, which kind of application you are developing and how your tests
work, you might want to change this a bit. I am testing a library I am writing,
which gets included in &lt;em&gt;tests.c&lt;/em&gt;.  The basic structure looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Tests for my library */&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;assert.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;quot;mylib.h&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;#define run_test(fn_name) \&lt;/span&gt;
&lt;span class="cp"&gt;    printf(&amp;quot;%s\n&amp;quot;, #fn_name); \&lt;/span&gt;
&lt;span class="cp"&gt;    fn_name();&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;test_example_test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fancy_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Running tests:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;run_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_example_test&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; =&amp;gt; All tests successful!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We include &lt;em&gt;stdio&lt;/em&gt; for printing and &lt;em&gt;assert&lt;/em&gt; for the actual testing. The way
assert works is if the statement assert gets passed is false, which means it
can also be a function call, assert stops the whole program and prints out the
line which produced the error. If everything works as intended, it prints all
the tests it ran, prompts for enter and returns us to vim.  An important part
is to only delete old tests, when the condition they test for is no longer
wanted, so you always test for basic functionality as well as the final&amp;nbsp;results.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 05 May 2014 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2014-05-05:test-driven-development-in-vim.html</guid></item><item><title>IRC-client showdown, extreme version</title><link>https://sulami.github.io/irc-client-showdown-extreme-version.html</link><description>&lt;p&gt;I love &lt;span class="caps"&gt;IRC&lt;/span&gt;. I try to keep all my common software on the shell in case I
somehow loose my ability to use X. This also enables me to use global
colorscheme and is performance-wise advantegous. There are many reasons
to live in the shell (aside from web-browsing, which is a pain), but
this is not the post to discuss them. Instead I want to make a quick
comparison of &lt;span class="caps"&gt;IRC&lt;/span&gt;-clients.&lt;/p&gt;
&lt;p&gt;I admit, I have not used all that many &lt;span class="caps"&gt;IRC&lt;/span&gt;-clients over the years, as
they are usually indefinetely customizable and I tweak them for months
before I decide to move on to a different one to start from scratch.
Currently, I am using irssi, as I have not customized weechat to the
extend I would like to&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;I prefer irssi as it is simpler and more unix-style, using just one
config, one theme and perl-extensions for every bit of bonus
functionality. Weechat works out of the box like a charm. It includes a
window-list which just has to be activated, automatic indentation of
nicks, a nicklist which just has to be disabled, colored nicks, a
trackbar and tons of more useful stuff. But the options are crap. It&amp;#8217;s
superior to the irssi djungle of formats, inside formats, inside other
formats, &amp;#8230; but in my opinion there are not enough ways to change
low-level stuff, weechat will always look like weechat, no matter what
you&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;But I promised the extreme version in the title of this post, this is
performance. On Twitch.tv, there is currently a stream called
&amp;#8216;twitchplayspokemon&amp;#8217;, which is a pokemon hack that accepts button input
via twitch chat (which is irc). The corrosponding &lt;span class="caps"&gt;IRC&lt;/span&gt;-channel is used by
35k-38k people at a time, featuring tons of messages. It actually caused
problems with the Twitch servers, which could not handel the
concentrated load, but seems to run fine&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Anyway, I tried using this channel with my &lt;span class="caps"&gt;IRC&lt;/span&gt;-clients. Weechat lags out
on joining, becoming unresponsive while building the nicklist, which is
hidden, but still active (this is what I mean by irssi is simpler).
Then, after about a minute, it works. Weechat uses 56.5 &lt;span class="caps"&gt;MB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt; on my
system. That&amp;#8217;s insane. No fancy plugins, just one server, one channel,
smart-filter enabled, no&amp;nbsp;nicklist.&lt;/p&gt;
&lt;p&gt;Irssi works like on any smaller &lt;span class="caps"&gt;IRC&lt;/span&gt;-network, without any noticable
performance impact, using about 12 &lt;span class="caps"&gt;MB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt;, which is more reasonable.
For comparison though, connecting through netcat uses 644 &lt;span class="caps"&gt;KB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt;. Of
course, this is without logging, formatting or anything except just
printing what the server sends me, but for &lt;span class="caps"&gt;IRC&lt;/span&gt;, netcat is actually sort
of viable, in emergency&amp;nbsp;cases.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Wed, 19 Mar 2014 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2014-03-19:irc-client-showdown-extreme-version.html</guid></item><item><title>My take on secure communication</title><link>https://sulami.github.io/my-take-on-secure-communication.html</link><description>&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I am not really into crypto (yet?) and everything I
write here is purely idealistic and probably somewhat&amp;nbsp;unrealistic/stupid&lt;/p&gt;
&lt;h2&gt;The current&amp;nbsp;situation&lt;/h2&gt;
&lt;p&gt;Some time ago, Facebook bought Whatsapp, which was my main way of
communicating using my phone. This event has made me think about where
the internet is heading in terms of privacy protection. Right now, I am
trying to figure out whether Chromium could be a better alternative to
Firefox, which is working worse and worse on Linux. I purposely do not
want to use Chrome as Google already uses their own search engine,
YouTube, Adsense, Analytics and Android/the Play Store, and maybe their
&lt;span class="caps"&gt;DNS&lt;/span&gt;-servers to track internet users from all around the world. Using
their partly proprietary browser which is known for phoning home is
obviously not the best&amp;nbsp;idea.&lt;/p&gt;
&lt;p&gt;But back to Whatsapp. There are some alternatives, some praising
encryption, like &lt;a href="https://threema.ch/en/"&gt;Threema&lt;/a&gt; or &lt;a href="https://telegram.org/"&gt;Telegram&lt;/a&gt;. Threema is not free and as
Google does not utilize any payment method beside credit cards, only few
people will actually use it, and the only reason to switch to a
messenger is the userbase. I did not like Whatsapp in the first place,
but everyone used it, so I had to comply. Now I made the switch to
ecrypted (called &amp;#8220;secure&amp;#8221;) Telegram messages with some of my closer
friends, but while it claims to be &amp;#8220;open&amp;#8221;, this only means there is an
&lt;span class="caps"&gt;API&lt;/span&gt;. And if they sell out one day, say if Facebook or Google offer them
some millions, all their promises will be worth&amp;nbsp;nothing.&lt;/p&gt;
&lt;p&gt;Another big part of my concerns, before we come to my ideas for a bright
future, are email and VoIP. Email right now is de-facto unencrypted,
usually transmitted via &lt;span class="caps"&gt;SSL&lt;/span&gt; to the provider but that is it. The
providers usually provide for free and most of them probably scan the
conversations to sell the information and/or build user profiles
(*cough* Google *cough*). This can be partially solved by just
encrypting/signing emails via &lt;span class="caps"&gt;PGP&lt;/span&gt;, which right now only security nerds
and mafia bosses do. But handling keys is just not ready for the masses,
it basically should handle keys, en-/decrypt without the average user
even noticing. But the decentralized way emails are set up is already
quite good, although there are some really big providers, there is no
loss in using some small provider you trust or even using your own
domain and&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;VoIP is the real problem right now. I primarily use Skype, which is
owned by Microsoft since 2011. Skype is known to send all kind of data
to Redmond, and also allow crazy amounts of script languages for its
ads, which already resulted in some big security holes. Also the Linux
client sort of sucks. The interface is okay-ish, but the technical side
of things is not. But I do not blame Microsoft for this, I am happy for
the existence of a Linux client at all. So, Skype is bad, alternatives
are rare. Mumble is nice, but is centred around servers for gaming clans
and similar communities, using it as messenger is suboptimal. I also
tried Jabber, the VoIP-protocol with many features, which is actually
sort of great the way it is, but not end-user friendly&amp;nbsp;enough.&lt;/p&gt;
&lt;h2&gt;Solutions?&lt;/h2&gt;
&lt;p&gt;What do I think would be the optimal way to handle this situations and
prevent some cyberpunk scenario in which Google, Facebook, Microsoft and
of course the &lt;span class="caps"&gt;NSA&lt;/span&gt; know everything about the average internet&amp;nbsp;user?&lt;/p&gt;
&lt;p&gt;First, we need to divide. I would keep email, as it is an easy and
already established way of exchanging information and data in a
mail-like fashion, which we will still need in the future. But we need
some way of enabling everyone to encrypt this mail. A simple choice
would be to establish a service that handles public keys and pairs them
to accounts. You then get a plugin for Outlook or Thunderbird that
connects to your account, generates a keypair, uploads the public
portion, gets the needed public keys of others and handles en- and
decryption of mails. The downside here would be a pretty big single
point of failure. If this service is down, or worse, gets hacked, all
the security is jeopardized. An idea would be to not store this
information on central servers but instead in a Bitcoin-like blockchain
which is shared by everyone. Which is probably generating enormous
amounts of traffic just to synchronize. Also, if no one uses ad-loaded
webinterfaces or provides unencrypted emails, how are the email
providers going to survive, and how are they going to justify
subsidizing the free email services? People will not pay for privacy,
which is the actual root of the&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;Then we need a new multi-platform messenger, decentralized, encrypted,
capable of sending pictures, audio, video and of course live calls
including video and conferences. Basically Skype Premium, but without
central servers and more in a peer-to-peer fashion. Maybe just define a
protocol and write an open source reference implementation of a client.
I already thought about this a while, and most of this is
accomplishable, Skype already provides most of the functionality across
Windows, Mac, Linux and a lot of phones. There is the wonderful
Speex-codec which can be used for calls, video streaming should be no
problem either. As the content should be completely end-to-end
encrypted, compression would be sort of useless, so the generated
traffic will be more, but not by a&amp;nbsp;lot.&lt;/p&gt;
&lt;p&gt;But here comes the one problem I found rather quickly. You need to be
able to sync your private keys across devices. As I propose to just
develop a protocol without a central management, you cannot just enter
your username and password and get all your stuff from a server, because
that would mean, your private keys, which are not supposed to ever leave
your devices would be stored on the server. But I have come up with a
solution, at least I think&amp;nbsp;so.&lt;/p&gt;
&lt;p&gt;There will be some server structure involved, which will hold the
private keys, but in an encrypted form. When starting to use the
service, you generate your keypair. The public key gets into some sort
of public key infrastructure I yet have to figure out, maybe
blockchain-like, maybe not. The private key gets stored on the device,
protected by a password. A copy of it gets encrypted (say using
Rijndael/&lt;span class="caps"&gt;AES&lt;/span&gt; or Twofish) and can be stored on third-party servers. Those
third parties might enforce additional security measures via
accounts/passwords. If you want to use a second device with the same
identity, you can get you private key from said server, decrypt it and
import it. This way, you could basically store your encrypted key inside
Dropbox. I have to add, that this method relies on strong passwords more
than anything else, but maybe this will force sensible password policies
into the heads of the&amp;nbsp;masses.&lt;/p&gt;
&lt;p&gt;An addition I would make would be some sort of identifier-system,
comparable to &lt;span class="caps"&gt;DNS&lt;/span&gt;. No one wants to remember numbers or hashes to
identify people, and names are not unique to a person, so there should
be some way to (decentralized, of course) link a username or an address
with a keypair, which can be resolved easily. So if you want to send me
a message, you send it to &amp;#8220;sulami&amp;#8221;, we resolve the name, get the public
key and are ready to start an encrypted&amp;nbsp;conversation.&lt;/p&gt;
&lt;h2&gt;Who will do&amp;nbsp;it?&lt;/h2&gt;
&lt;p&gt;This is the important question. I would like to work on something like
this, but obviously the scope is gigantic and there are experts needed
on crypto, network messaging, development for specific platforms,
interface designers, and the list goes on. If you read this and are
interested in starting such a project, do not hesitate to contact me,
someone has to make the first step. My public key is on the&amp;nbsp;contact-page&amp;#8230;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Wed, 19 Mar 2014 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2014-03-19:my-take-on-secure-communication.html</guid></item><item><title>My own perfect world (aka what you should do)</title><link>https://sulami.github.io/my-own-perfect-world-aka-what-you-should-do.html</link><description>&lt;p&gt;I have to admit, I am a little bit perfectionist. Maybe more. There are
some conventions I found useful, but there are always people who do not
follow those conventions, some because they do not want to, but mostly
they just do not care. I just want to list some (read: non-exhaustive
list) of these conventions and maybe help you become a better human. In
my eyes. Which are the only relevant&amp;nbsp;eyes.&lt;/p&gt;
&lt;h1&gt;General&amp;nbsp;Stuff&lt;/h1&gt;
&lt;h4&gt;Encoding&lt;/h4&gt;
&lt;p&gt;&lt;span class="caps"&gt;UTF&lt;/span&gt;-8.&lt;/p&gt;
&lt;p&gt;There is close to nothing in the western world which does not work with
unicode, but many thing that will not work without&amp;nbsp;it.&lt;/p&gt;
&lt;h4&gt;Websites&lt;/h4&gt;
&lt;p&gt;You own a website? Great. Here are some things to not&amp;nbsp;do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;overly heavy use of&amp;nbsp;javascript/ajax&lt;/li&gt;
&lt;li&gt;using &lt;span class="caps"&gt;POST&lt;/span&gt; where &lt;span class="caps"&gt;GET&lt;/span&gt; is usable (&lt;span class="caps"&gt;POST&lt;/span&gt; breaks&amp;nbsp;bookmarks)&lt;/li&gt;
&lt;li&gt;using &lt;span class="caps"&gt;GET&lt;/span&gt; where &lt;span class="caps"&gt;POST&lt;/span&gt; is required (login information,&amp;nbsp;&amp;#8230;)&lt;/li&gt;
&lt;li&gt;storing cleartext passwords (salt and hash them, only compare&amp;nbsp;hashes)&lt;/li&gt;
&lt;li&gt;storing any kind of userdata you do not need&amp;nbsp;(hackers/leaks)&lt;/li&gt;
&lt;li&gt;using flash for something that is neither a video nor a&amp;nbsp;game&lt;/li&gt;
&lt;li&gt;use a popup to ask me to like your facebook-page (or some other
    social&amp;nbsp;bullshit)&lt;/li&gt;
&lt;li&gt;split your content way to often to generate additional&amp;nbsp;pageviews&lt;/li&gt;
&lt;li&gt;anything with sound which is not the main point of the&amp;nbsp;site&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Passwords&lt;/h4&gt;
&lt;p&gt;Use unique, randomly generated passwords for each service, store them in
some sort of encrypted file (like KeePass). If you prefer to know your
passwords, choose a scheme to generate passwords for a given service, so
you do not use the same password everywhere. Also, long passwords are
better than short ones, special characters are mostly good and no one
who knows you should be able to guess your passwords, so no names of
SOs, children, parents, BFFs,&amp;nbsp;&amp;#8230;&lt;/p&gt;
&lt;h4&gt;Backups&lt;/h4&gt;
&lt;p&gt;Do regular backups of everything you own. External harddrives, CDs,
Homservers, whatever. Just no &amp;#8220;clouds&amp;#8221;, you cannot rely on those both in
terms of security and reliability. Always have at least two copies fully
under your&amp;nbsp;control.&lt;/p&gt;
&lt;h4&gt;Prefer Open&amp;nbsp;Source&lt;/h4&gt;
&lt;p&gt;Not (only) for philosophical reasons, but for security reasons. If you
use a reasonably large open sourced piece of software, even if you are
not able to write a single word of code, most assuredly some fanatic has
already checked the whole code for security holes. In proprietary
software, sometimes only less than ten people have access to the source
code, and everything they do not catch is a potential way for you to
loose your access to let&amp;#8217;s say your bank account. Would suck, would it&amp;nbsp;not?&lt;/p&gt;
&lt;h1&gt;Mail&lt;/h1&gt;
&lt;p&gt;Mail is a big part of the internet and my life as well. But there are
some things that really bug me when reading&amp;nbsp;mail.&lt;/p&gt;
&lt;h4&gt;Do not use &lt;span class="caps"&gt;HTML&lt;/span&gt;-mail&lt;/h4&gt;
&lt;p&gt;There is no reason at all to use &lt;span class="caps"&gt;HTML&lt;/span&gt; in mails, except you send
professional advertisements or something like this. But for simple mail,
just containing text and maybe some attachments, why would you use &lt;span class="caps"&gt;HTML&lt;/span&gt;?
To make it look prettier? I open my mail in mutt (read: a text console),
so I get to read around all your fancy &lt;span class="caps"&gt;HTML&lt;/span&gt;-tags.&lt;/p&gt;
&lt;h4&gt;Do not write in single/ridiculously long&amp;nbsp;lines&lt;/h4&gt;
&lt;p&gt;This is a big Outlook/Live Mail/whatever it is called right now-issue.
Even though you see the linebreaks at the end of your writing area,
there are actually none, Outlook breaks it &amp;#8220;live&amp;#8221;. When using proper
text-only-mail, this is bad, not like really bad, but somewhat bad. I
usually correct those, and by &amp;#8220;I&amp;#8221; I mean vim does it for me, but still.
I personally prefer breaks at a maximum of 72 characters per line, which
is a commonly used&amp;nbsp;standard.&lt;/p&gt;
&lt;h4&gt;Do not &lt;span class="caps"&gt;TOFU&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;No, this one is not about your eating habits, &lt;span class="caps"&gt;TOFU&lt;/span&gt; stands for &amp;#8220;Text Over
Fullquote Under&amp;#8221;. This is what Outlook (sic) does per default.
Fullquoting is useful in many situations and does not introfuce to much
overhead when using text-only mail (my mails very rarely exceed &lt;span class="caps"&gt;10KB&lt;/span&gt;).
But instead of writing your answer over the mail you received, place it
below. This way, we both can read the coversation from top to bottom
while writing our&amp;nbsp;mails.&lt;/p&gt;
&lt;h1&gt;Coding&lt;/h1&gt;
&lt;p&gt;If you and I are working together on a software project, there are some
things I greatly&amp;nbsp;appreciate.&lt;/p&gt;
&lt;h4&gt;Use a (proper) coding&amp;nbsp;style&lt;/h4&gt;
&lt;p&gt;Coding styles are everything when coding cooperatively. My favourite
coding style is the Python one (&lt;a href="http://legacy.python.org/dev/peps/pep-0008/"&gt;&lt;span class="caps"&gt;PEP8&lt;/span&gt;&lt;/a&gt;/&lt;a href="http://legacy.python.org/dev/peps/pep-0007/"&gt;&lt;span class="caps"&gt;PEP7&lt;/span&gt;&lt;/a&gt;), which means for most&amp;nbsp;languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no&amp;nbsp;tabs&lt;/li&gt;
&lt;li&gt;4 space&amp;nbsp;indentation&lt;/li&gt;
&lt;li&gt;prefered max line length: 80&amp;nbsp;characters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Indentation can be tabs alternatively, but &lt;strong&gt;have to&lt;/strong&gt; be standardized.
In some editors, tabs are 4 spaces long, in others 8, and in some 6.
This makes code indentation a mess and ruins the readability. The line
length limit is for sane editing, 100 characters are also acceptable,
anything more than that is probably poorly readable in most editors and
screams &amp;#8220;bad&amp;nbsp;code&amp;#8221;.&lt;/p&gt;
&lt;h4&gt;Use a &lt;span class="caps"&gt;VCS&lt;/span&gt;/&lt;span class="caps"&gt;SCM&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;I could have also said &amp;#8220;use git&amp;#8221;. But I see that some people prefer
mercurial or &lt;span class="caps"&gt;SVN&lt;/span&gt; (why&amp;#8230;?), that is okay, too. Even when working alone,
always use some sort version control software, or you will break your
code one day and spend hours tracking down the bad change. Diffs and
rollbacks are vital for efficient&amp;nbsp;coding.&lt;/p&gt;
&lt;h4&gt;As you are using git,&amp;nbsp;branch&lt;/h4&gt;
&lt;p&gt;As git is the best vcs, in my opinion, you are using branches, aren&amp;#8217;t
you? Never, and I mean never, work on master. Master is for tested code
only. Always work on &amp;#8220;wip&amp;#8221;, &amp;#8220;robin&amp;#8221; or &amp;#8220;fix&amp;#8221;. It does not matter how you
name your branch. If you want to change something, branch, make your
change, test it(!), and merge back into master if your change breaks
nothing. This is even more important when coding cooperatively, as I do
not want to pull your work in progress on master, branch to my work in
progress and wonder why it is broken. Which brings us&amp;nbsp;to&lt;/p&gt;
&lt;h4&gt;Work&amp;nbsp;locally&lt;/h4&gt;
&lt;p&gt;Many devs are used to working directly on a server, and sometimes this
is the only way to effectively test their changes, as they are missing
the needed environment for the code. This is okay. But as you are still
using git, always try to clone a personal copy of the code to work on,
and only push back your branch(es) and possible changes to master to
save your work centralized. Otherwise there might be a hell of
simultaneously edited files and&amp;nbsp;lock-/swap-/backup-files.&lt;/p&gt;
&lt;h1&gt;Software&amp;nbsp;Recommendations&lt;/h1&gt;
&lt;p&gt;I have used so much software over the years, I found my favourite
software for most of my needs, and I compared a lot. My favourites are
always the first&amp;nbsp;ones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;OS&lt;/span&gt;: Linux (Fedora/OpenSUSE/Arch) or Windows 7 x64 on desktops,
    &lt;span class="caps"&gt;RHEL&lt;/span&gt;/CentOS/OpenSUSE/*&lt;span class="caps"&gt;BSD&lt;/span&gt; on&amp;nbsp;servers&lt;/li&gt;
&lt;li&gt;Password Management: KeePass (version 1, version 2 is not widely
    available&amp;nbsp;yet)&lt;/li&gt;
&lt;li&gt;Text editing/coding: vim, Kate, Notepad++ (on&amp;nbsp;Windows)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;VCS&lt;/span&gt;:&amp;nbsp;git&lt;/li&gt;
&lt;li&gt;Mail: mutt,&amp;nbsp;Thunderbird&lt;/li&gt;
&lt;li&gt;VoIP: Skype (still searching for a better alternative, not secure in
    any way),&amp;nbsp;Mumble&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt;: irssi, weechat,&amp;nbsp;Quassel&lt;/li&gt;
&lt;li&gt;VMs: Virt-Manager/&lt;span class="caps"&gt;QEMU&lt;/span&gt; with &lt;span class="caps"&gt;KVM&lt;/span&gt;, Xen (for &lt;span class="caps"&gt;PVM&lt;/span&gt; on hosts without
    &lt;span class="caps"&gt;CPU&lt;/span&gt;-extensions), VirtualBox (on&amp;nbsp;Windows)&lt;/li&gt;
&lt;li&gt;Video: &lt;span class="caps"&gt;VLC&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Music: ncmpcpp+mpd, Rythmbox, foobar2000 (on&amp;nbsp;Windows)&lt;/li&gt;
&lt;li&gt;Office: LaTeX for papers,&amp;nbsp;LibreOffice&lt;/li&gt;
&lt;li&gt;Web:&amp;nbsp;Firefox&lt;/li&gt;
&lt;li&gt;Webserver:&amp;nbsp;nginx&lt;/li&gt;
&lt;li&gt;Filesharing: &lt;span class="caps"&gt;NFS&lt;/span&gt;, Samba (&lt;span class="caps"&gt;FTP&lt;/span&gt; is old and&amp;nbsp;cluttered)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CMS&lt;/span&gt;: Django (anything), Wordpress (blogs),&amp;nbsp;Drupal&lt;/li&gt;
&lt;li&gt;Programming languages: Python (platform independent, modular, nice
    to write and read), C(++) (faster, for performance-critical&amp;nbsp;applications)&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Mon, 17 Mar 2014 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2014-03-17:my-own-perfect-world-aka-what-you-should-do.html</guid></item><item><title>My favourite Tech-Talks</title><link>https://sulami.github.io/my-favourite-tech-talks.html</link><description>&lt;p&gt;I love talks, others might call them presentations. There are thousands
of talks on YouTube and watching them all would take ages, but I
sometimes watch talks before going to bed instad of watching &lt;span class="caps"&gt;TV&lt;/span&gt;.  So I
thought, I could compile a small list of my favourite talks featuring
technical topics for myself and you&amp;nbsp;readers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/1M73USsXHdc"&gt;And that&amp;#8217;s how I lost my eye: exploring emergeny data destruction
(2012)&lt;/a&gt; - case studies on how to unrecoverably destroy your data
within&amp;nbsp;seconds&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/1ffBJ4sVUb4"&gt;Git for ages 4 and up (2013)&lt;/a&gt; - explains git basics really&amp;nbsp;easy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/bSAgQqa49nM"&gt;I wanna be the guy: The arduous path to senior sysadmin (2013)&lt;/a&gt; -
best practices and advice on how to be a better&amp;nbsp;sysadmin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/5CWrzVJYLWw"&gt;No-Tech Hacking (2008)&lt;/a&gt; - real life hacking without use of advanced
technology, quite funny,&amp;nbsp;too&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/U4oB28ksiIo"&gt;Pwned by the owner (2010)&lt;/a&gt; - funny story of a hacker whose &lt;span class="caps"&gt;PC&lt;/span&gt; gets
stolen and how he got it&amp;nbsp;back&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/bQqX3RWn0Yw"&gt;SELinux for mere mortals (2013)&lt;/a&gt; - what SELinux does, why to use it
and how to use&amp;nbsp;it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/RIctzAQOe44"&gt;The real story behind Wayland and X (2013)&lt;/a&gt; - a Wayland-dev explains
why X sucks from a technical view and what Wayland actually&amp;nbsp;does&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/Sh-cnaJoGCw"&gt;Why Linux sucks&lt;/a&gt; / &lt;a href="http://youtu.be/BfLqLK7VdQY"&gt;Why Linux does not suck (2012)&lt;/a&gt; - watch both in
this order, funny comment on the state of&amp;nbsp;Linux&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://youtu.be/LLBrBBImJt4"&gt;Write and submit your first Linux kernel patch (2012)&lt;/a&gt; - how to get
started on kernel&amp;nbsp;development&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a lot more good talks, but my time is sort of limited and
sadly I can&amp;#8217;t really focus on working while watching&amp;nbsp;talks.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Sat, 25 Jan 2014 00:00:00 +0100</pubDate><guid>tag:sulami.github.io,2014-01-25:my-favourite-tech-talks.html</guid></item><item><title>Prism: What to do</title><link>https://sulami.github.io/prism-what-to-do.html</link><description>&lt;p&gt;While following the recent international events, I (and probably
everyone else) heard about the &lt;span class="caps"&gt;NSA&lt;/span&gt; and Prism. Now I always distrusted
big companies, especially the ones from the &lt;span class="caps"&gt;US&lt;/span&gt;, because I know money and
power are everything over there. If they want to spy on you, they can.
Now there is &lt;a href="http://prism-break.org/"&gt;something you can do&lt;/a&gt; (read this, or this post will make
less sense) to at least limit the amount of information about yourself
getting to those&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;Obviously, you don&amp;#8217;t want to use Apple hardware (which I don&amp;#8217;t anyway,
but that is another story), as &lt;a href="http://www.southparkstudios.com/full-episodes/s15e01-humancentipad"&gt;Apple is infamous for invading user&amp;#8217;s
privacy&lt;/a&gt;. Chrome &lt;span class="caps"&gt;OS&lt;/span&gt; is insecure, as Google makes money of ad
targeting, which is, you guessed it, gathering your information. And
Windows, well, who seriously trusts Microsoft? The alternatives listed
are a bunch of Linuxes and BSDs, although I think they are recommending
the wrong distros, beginners should try something like &lt;a href="http://www.linuxmint.com/"&gt;Mint&lt;/a&gt;,
&lt;a href="http://crunchbang.org/"&gt;Crunchbang&lt;/a&gt; or &lt;a href="http://www.opensuse.org/en/"&gt;openSUSE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The browsers are the same story, no Chrome, no Safari, no &lt;span class="caps"&gt;IE&lt;/span&gt; (as if
anyone would miss it), you don&amp;#8217;t know, what they are actually doing, and
while browsing, you give away an awful lot of personal data.
Technically, your browser could send you whole browsing history
(including &amp;#8220;incognito mode&amp;#8221;, the only one saying nothing gets saved is
your browser), your Downloads, your login data and more to someone. The
right choices here are &lt;a href="http://www.mozilla.org/en-US/"&gt;Firefox&lt;/a&gt;, &lt;a href="http://www.chromium.org/Home"&gt;Chromium&lt;/a&gt; (which I guess is okay,
haven&amp;#8217;t read the source myself) and smaller browsers like &lt;a href="http://surf.suckless.org/"&gt;surf&lt;/a&gt; or
&lt;a href="http://mason-larobina.github.io/luakit/"&gt;luakit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next interesting point is websearching. Again, Google is bad, who
knew? Yahoo and Bing, too. I&amp;#8217;d say, use &lt;a href="http://ddg.gg"&gt;DuckDuckGo&lt;/a&gt;. I use it as my
main search engine for some months now and prefer it over Google. While
Google sometimes gives me better results, most of the time, &lt;span class="caps"&gt;DDG&lt;/span&gt; does
good. Be sure to have a look at the &lt;a href="https://duckduckgo.com/bang.html"&gt;bang commands&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To make this a bit shorter, be careful, which email provider you use,
they can read everything you write and receive. Self-hosting is sadly no
real option here, unless you have access to a static &lt;span class="caps"&gt;IP&lt;/span&gt; and a &lt;span class="caps"&gt;TLD&lt;/span&gt;.
Cloud-storage providers can access all your files saved to them, you can
self-host using &lt;a href="http://owncloud.org/"&gt;ownCloud&lt;/a&gt; or &lt;a href="http://seafile.com/en/home/"&gt;Seafile&lt;/a&gt;. Be careful what to enter on
any social networks, even if &amp;#8220;private&amp;#8221;. You can either opt-out
completely or stay with the big ones (namely Facebook), as using a small
social network misses the&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;The instant messaging section is quite hard. Safe are &lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;a href="http://pidgin.im/"&gt;Pidgin&lt;/a&gt;,
&lt;a href="https://crypto.cat/"&gt;Cryptocat&lt;/a&gt;, &lt;a href="http://mumble.sourceforge.net/"&gt;Mumble&lt;/a&gt;, &lt;a href="https://jitsi.org/"&gt;Jitsi&lt;/a&gt;. Unsafe are all big desktop clients
(GTalk, Skype, &lt;span class="caps"&gt;MSN&lt;/span&gt;/Live Messenger, &amp;#8230;) and Whatsapp as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;There are some more options for the guys with the tin foil hats, such as
using Tor permanently, only use end-to-end encrypted websites and
disable all scripts and plugins, then use custom &lt;span class="caps"&gt;DNS&lt;/span&gt;-servers and stuff
like this, but chances are, someone will see where you are browsing,
like the guy standing behind&amp;nbsp;you.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 18 Jun 2013 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2013-06-18:prism-what-to-do.html</guid></item><item><title>Raspberry Pi: Radio-Alarm</title><link>https://sulami.github.io/raspberry-pi-radio-alarm.html</link><description>&lt;p&gt;Some years ago I had the idea to use online radios as flexible alarm
clocks, but the main problem was having to run the computer all night
long, which results in high power consumption and noise. While netbooks
can counter this to a certain degree, the Raspberry Pi is the optimal
way of achieving our goal. You will&amp;nbsp;need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi model B (+ power cable, &lt;span class="caps"&gt;SD&lt;/span&gt;-card with &lt;span class="caps"&gt;OS&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;speakers, preferably 3.5mm&amp;nbsp;jack&lt;/li&gt;
&lt;li&gt;network/internet&amp;nbsp;access&lt;/li&gt;
&lt;li&gt;control access directly or via&amp;nbsp;ssh&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My RasPi is running &lt;a href="http://www.raspberrypi.org/downloads" title="RasPi"&gt;Raspian&lt;/a&gt; right now, but any Linux should do. You
connect everything and boot it up, then access a console. We need to
install mplayer, which will play our stream. If needed, update the
package lists before&amp;nbsp;installing.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# Raspian:
sudo apt-get install mplayer

# ArchARM (as root):
pacman -Sy mplayer

# Pidora:
sudo yum install mplayer

# openSUSE:
sudo zypper in mplayer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next thing to do is writing a short playlist. The idea is to have a
fallback if the internet connection or your radio station goes down, so
you can switch to a local file to play instead. Use any text editor you
want (vi, vim, emacs, nano, or graphical ones) to write something like
my &lt;em&gt;playlist.pls&lt;/em&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;[playlist]&lt;/span&gt;
&lt;span class="na"&gt;File1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;http://mp3.ht-stream.net&lt;/span&gt;
&lt;span class="na"&gt;Title1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;HouseTime&lt;/span&gt;
&lt;span class="na"&gt;Lenght1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;-1&lt;/span&gt;
&lt;span class="na"&gt;File2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/pi/alarm.mp3&lt;/span&gt;
&lt;span class="na"&gt;Title2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;FallbackAlarm&lt;/span&gt;
&lt;span class="na"&gt;Length2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;-1&lt;/span&gt;
&lt;span class="na"&gt;NumberOfEntries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mplayer will try to play File1, my stream, and if it fails, continue to
play File2, the fallback. You can also add more stations and files and
use the &lt;em&gt;-shuffle&lt;/em&gt; parameter later on to play random&amp;nbsp;music.&lt;/p&gt;
&lt;p&gt;Now, ensure that cron is running (&amp;#8220;&lt;em&gt;ps aux | grep cron&lt;/em&gt;&amp;#8221; should give you
a hint) and type &amp;#8220;&lt;em&gt;crontab -e&lt;/em&gt;&amp;#8221; to enter your cronjob (preferably as a
non-root user). Depending on your &lt;span class="caps"&gt;OS&lt;/span&gt; there will be some comments you can
ignore. Add a entry like the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;30 6 * * * env DISPLAY=:0.0 /usr/bin/mplayer -playlist /home/pi/playlist.pls &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will fire up mplayer everyday at 6:30 in the morning using the
provided playlist and then deletes the text-output. Using complete paths
is crucial here, cron does not use the \$&lt;span class="caps"&gt;PATH&lt;/span&gt; variable. If you read up
on cron, you can setup complete sets of alarms, depending on days of the
week and more. The env setting might be needed on some systems which
won&amp;#8217;t play and istead send you something like &amp;#8220;connection by pulse
refused&amp;#8221; per system-mail. Save the file to install the&amp;nbsp;cronjob.&lt;/p&gt;
&lt;p&gt;When waking up, you need to kill mplayer, as it is running in the
background. The easiest way of doing so is via &amp;#8220;&lt;em&gt;killall mplayer&lt;/em&gt;&amp;#8220;,
which is not the finest way of doing things but should do the&amp;nbsp;job.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Fri, 07 Jun 2013 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2013-06-07:raspberry-pi-radio-alarm.html</guid></item><item><title>Learning to type properly</title><link>https://sulami.github.io/learning-to-type-properly.html</link><description>&lt;p&gt;When it comes to &lt;span class="caps"&gt;IT&lt;/span&gt;-people, especially the ones ocassionally programming,
typing properly is a mandatory skill, but basically everyone benefits from fast
typing. Most people developed some kind of 2-6-finger system, which might work
well, but is still suboptimal compared to 10-finger touch typing. There are
some ways of learning the latter, but my personal favourite approach are
websites, as they are platform independent and usually require nothing more
than a browser with flash-plugin. Here are&amp;nbsp;some:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://keybr.com" title="Keybr"&gt;Keybr.com&lt;/a&gt;: Semi-random text, different difficulty levels, language
settings, own texts, websites and graphical&amp;nbsp;over-time-comparison.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://play.typeracer.com/" title="Typeracer"&gt;Typeracer&lt;/a&gt;: Competitive typing of texts from popular movies and&amp;nbsp;books.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://typing.io/" title="typing.io"&gt;typing.io&lt;/a&gt;: Special typing training for code, lots of examples for
every popular&amp;nbsp;languages.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 14 May 2013 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2013-05-14:learning-to-type-properly.html</guid></item><item><title>Streaming to Twitch.tv using ffmpeg and ALSA</title><link>https://sulami.github.io/streaming-to-twitchtv-using-ffmpeg-and-alsa.html</link><description>&lt;p&gt;Well, as I lost my database, I could not recover this article, but I
still got my script, so here you&amp;nbsp;go:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="x"&gt;INRES=&amp;quot;1920x1080&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;OUTRES=&amp;quot;1920x1080&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;FPS=&amp;quot;30&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;QUAL=&amp;quot;medium&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;STREAM_KEY=&amp;quot;live_123_xxx&amp;quot;&lt;/span&gt;

&lt;span class="x"&gt;ffmpeg&lt;/span&gt;
&lt;span class="x"&gt;-f x11grab&lt;/span&gt;
&lt;span class="x"&gt;-s &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;INRES&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;-r &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;FPS&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;-i :0.0+0,0&lt;/span&gt;
&lt;span class="x"&gt;-itsoffset -00:00:01&lt;/span&gt;
&lt;span class="x"&gt;-f alsa&lt;/span&gt;
&lt;span class="x"&gt;-i hw:3,0&lt;/span&gt;
&lt;span class="x"&gt;-f alsa&lt;/span&gt;
&lt;span class="x"&gt;-i hw:0,0&lt;/span&gt;
&lt;span class="x"&gt;-filter_complex amix=inputs=2:duration=first:dropout_transition=3&lt;/span&gt;
&lt;span class="x"&gt;-af aresample&lt;/span&gt;
&lt;span class="x"&gt;-vcodec libx264&lt;/span&gt;
&lt;span class="x"&gt;-preset &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;QUAL&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;-s &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;OUTRES&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;-acodec libmp3lame&lt;/span&gt;
&lt;span class="x"&gt;-ar 44100&lt;/span&gt;
&lt;span class="x"&gt;-threads 6&lt;/span&gt;
&lt;span class="x"&gt;-b:a 512k&lt;/span&gt;
&lt;span class="x"&gt;-pix_fmt yuv420p&lt;/span&gt;
&lt;span class="x"&gt;-f flv &amp;quot;rtmp://live.justin.tv/app/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;STREAM_KEY&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You get your stream key &lt;a href="http://www.twitch.tv/broadcast" title="Twitch"&gt;here&lt;/a&gt;. Adjust resolutions as needed (input
and output), aswell as &lt;span class="caps"&gt;FPS&lt;/span&gt;. In lines 13-16 you can change your audio
devices (speakers and microphone, get them from &amp;#8220;&lt;em&gt;arecord -l&amp;#8221; &lt;/em&gt;for
microphones and&lt;em&gt;&amp;#8220;aplay -l&amp;#8221;&lt;/em&gt;for speakers). Adjust threads to the amount
of &lt;span class="caps"&gt;CPU&lt;/span&gt; cores you want to use to&amp;nbsp;encode.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">sulami</dc:creator><pubDate>Tue, 14 May 2013 00:00:00 +0200</pubDate><guid>tag:sulami.github.io,2013-05-14:streaming-to-twitchtv-using-ffmpeg-and-alsa.html</guid></item></channel></rss>