<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>sulami's blog</title><link href="https://sulami.github.io/" rel="alternate"></link><link href="https://sulami.github.io/feed/linux.atom.xml" rel="self"></link><id>https://sulami.github.io/</id><updated>2014-06-02T12:55:00+02:00</updated><entry><title>Pipe Madness: Finding Kernel Slackers</title><link href="https://sulami.github.io/pipe-madness-finding-kernel-slackers.html" rel="alternate"></link><updated>2014-06-02T12:55:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2014-06-02:pipe-madness-finding-kernel-slackers.html</id><summary type="html">&lt;p&gt;This is going to be a new series in which I showcase to horrible abominations
of shell pipelines I make up on the fly while working. This one is for finding
files in the Linux Kernel that produce extraordinary many warnings and errors
when pushed into checkpatch.pl, the kernel stylecheck script. Here we go:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;find drivers&lt;span style="color: #666666"&gt;/&lt;/span&gt;staging&lt;span style="color: #666666"&gt;/&lt;/span&gt; &lt;span style="color: #666666"&gt;-&lt;/span&gt;iname &lt;span style="color: #4070a0"&gt;&amp;quot;\*.c&amp;quot;&lt;/span&gt; &lt;span style="color: #666666"&gt;|&lt;/span&gt; xargs scripts&lt;span style="color: #666666"&gt;/&lt;/span&gt;checkpatch.pl &lt;span style="color: #666666"&gt;--&lt;/span&gt;terse &lt;span style="color: #666666"&gt;-&lt;/span&gt;f &lt;span style="color: #666666"&gt;|&lt;/span&gt; cut &lt;span style="color: #666666"&gt;-&lt;/span&gt;d &lt;span style="color: #4070a0"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span style="color: #666666"&gt;-&lt;/span&gt;f &lt;span style="color: #40a070"&gt;1&lt;/span&gt; &lt;span style="color: #666666"&gt;|&lt;/span&gt; uniq &lt;span style="color: #666666"&gt;-&lt;/span&gt;c &lt;span style="color: #666666"&gt;|&lt;/span&gt; grep &lt;span style="color: #666666"&gt;-&lt;/span&gt;v &lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt;total&lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color: #666666"&gt;|&lt;/span&gt; sort &lt;span style="color: #666666"&gt;-&lt;/span&gt;n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This one runs on drivers/staging and sorts the worst files last. Also, it only
checks .c files. Takes some minutes to run on my Haswell Xeon with a SSD and
plenty of RAM.&lt;/p&gt;</summary><category term="pipemadness"></category><category term="cli"></category><category term="kernel"></category></entry><entry><title>Working on a Netbook</title><link href="https://sulami.github.io/working-on-a-netbook.html" rel="alternate"></link><updated>2014-05-25T18:30:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2014-05-25:working-on-a-netbook.html</id><summary type="html">&lt;p&gt;I recently installed a fresh Fedora 20 on my trusty old HP Mini 110 netbook, a
cheap machine with a 1.66 GHz Intel Atom and 1 GB of RAM. I thought a lot about
which DE/WM to use. On one side, performance is key, and I mostly use it to
work in a shell, browse the web and read PDFs, so a tiling WM was my first
choice. I still chose the default Gnome 3 installation, as it provides a lot of
utility and is a slow but almost always working fallback, plus I get GDM.&lt;/p&gt;
&lt;p&gt;I have used a lot of tiling WMs over the years, mainly i3, bspwm, dwm and
monsterwm (chronologically). While monsterwm is still my favourite for an
absolute riced machine, i3 and dwm are more usable without a great deal of
configuration when adding i3bar/i3status and dmenu. Because dwm is a lot faster
(although they are both pretty fast compared to anything else, we are talking
running complete systems on 30 MB of RAM, including the Kernel), I installed it
and used it for an evening to pull down the Kernel sources and set up my work
environment.&lt;/p&gt;
&lt;p&gt;My first impression is pretty positive, it feels responsive and fast. I am
using dwb as my browser, urxvt as terminal emulator and wicd to setup WiFi,
which allows me to disable NetworkManager, which is think is pretty useless
anyway, I am not using it on any of my machines.&lt;/p&gt;</summary><category term="dwm"></category><category term="netbook"></category></entry><entry><title>Quickie: custom launchers in Gnome 3</title><link href="https://sulami.github.io/quickie-custom-launchers-in-gnome-3.html" rel="alternate"></link><updated>2014-03-17T22:26:00+01:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2014-03-17:quickie-custom-launchers-in-gnome-3.html</id><summary type="html">&lt;p&gt;Let's say you are using Gnome 3, because it is actually sort of usable
with some extensions and the alternatives are not to shiny. Let's say
you want to add some obscure program to the dash or change the icon or
the startup parameters of an existing one. Let's say, I know how:&lt;/p&gt;
&lt;p&gt;Navigate to &lt;em&gt;\~/.local/share/applications&lt;/em&gt;, and write a new file named
&lt;em&gt;yourprogram.desktop&lt;/em&gt;. Fill it with conent like the following:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;{.lang&lt;span style="color: #666666"&gt;:&lt;/span&gt;&lt;span style="color: #007020; font-weight: bold"&gt;default&lt;/span&gt; .decode&lt;span style="color: #666666"&gt;:&lt;/span&gt;&lt;span style="color: #007020"&gt;true&lt;/span&gt;}
[Desktop Entry]
Name&lt;span style="color: #666666"&gt;=&lt;/span&gt;My Program
GenericName&lt;span style="color: #666666"&gt;=&lt;/span&gt;Some Program
Exec&lt;span style="color: #666666"&gt;=&lt;/span&gt;program &lt;span style="color: #666666"&gt;--&lt;/span&gt;foo
Icon&lt;span style="color: #666666"&gt;=&lt;/span&gt;program
Terminal&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #007020"&gt;false&lt;/span&gt;
Type&lt;span style="color: #666666"&gt;=&lt;/span&gt;Application
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want some sort of custom icon, like a Faenza icon for
virt-manager (which for some reason does not exist), you can check at
&lt;em&gt;\~/.icons&lt;/em&gt; for icons. Just name the filename without extension in your
shortcut.&lt;/p&gt;</summary><category term="quickie"></category><category term="gnome"></category></entry><entry><title>Quickie: Yum PS</title><link href="https://sulami.github.io/quickie-yum-ps.html" rel="alternate"></link><updated>2014-02-18T20:16:00+01:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2014-02-18:quickie-yum-ps.html</id><summary type="html">&lt;p&gt;Coming from SUSE I am now primarily using RHEL/CentOS/Fedora-type Linux
distros, which means the package manager of my choice is yum. While yum
is quite a bit faster than zypper in almost every situation, it does not
provide the really useful function of showing you which running
processes are affected by package changes, which is particularly useful
on servers which aren't rebooted every few days (my homeserver is now
running for \~160 days without reboot).&lt;/p&gt;
&lt;p&gt;But there is a simple helper: get &lt;em&gt;yum-plugin-ps&lt;/em&gt;, a plugin which, who
would have guessed it, adds the functionality described into yum. Now
you can run &lt;em&gt;yum ps&lt;/em&gt; and get a list of running processes, ordered by
changed files they use, so you can reload/restart those services and
hopefully prevent bad guys from exploiting already patched security
holes.&lt;/p&gt;</summary><category term="quickie"></category><category term="security"></category><category term="updates"></category><category term="yum"></category></entry><entry><title>Quickie: Gnome 3 dark theme</title><link href="https://sulami.github.io/quickie-gnome-3-dark-theme.html" rel="alternate"></link><updated>2014-01-23T13:22:00+01:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2014-01-23:quickie-gnome-3-dark-theme.html</id><summary type="html">&lt;p&gt;Many people, me included, prefer their computer screen mostly dark. And
while I quite like the default gtk-theme of Gnome 3, called "Adwaita",
it is white. Using &lt;em&gt;gnome-tweak-tool&lt;/em&gt;, you can easily color it dark, but
this only works for Gtk-3 apps, so Firefox for example is still white.
To fix this, get &lt;em&gt;gtk-murrine-engine&lt;/em&gt; (package name on Fedora) and &lt;a href="http://goo.gl/6dRiC2" title="Dropbox"&gt;this
theme&lt;/a&gt;. Unpack it to &lt;em&gt;/usr/share/themes&lt;/em&gt;. Then use the tweak-tool and
&lt;em&gt;gtk-chtheme&lt;/em&gt; (also a Fedora package name), to select "Adwaita-Dark".
Then login again or reboot for good measure.&lt;/p&gt;</summary><category term="quickie"></category><category term="firefox"></category><category term="gnome"></category></entry><entry><title>My new desktop</title><link href="https://sulami.github.io/my-new-desktop.html" rel="alternate"></link><updated>2014-01-22T01:12:00+01:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2014-01-22:my-new-desktop.html</id><summary type="html">&lt;p&gt;After I lost my SSD to the kraken and got a new one back, I set up a
completely new system. This time I decided to ditch both openSUSE and
Arch Linux and go with Fedora.&lt;/p&gt;
&lt;p&gt;The reasons here are: I love Arch and pacman, but setting it up to a
degree where it does not need any major maintenance anymore (if this
ever happens) is a giant pain. OpenSUSE is quite nice as well, and YaST
is great, but the repos are sort of small and dealing with all the
user-supplied repos on OBS is just not bearable for a human being. Also,
KDE is nice but I had some problems with Kwin and I am not willing to
fix it.&lt;/p&gt;
&lt;p&gt;So here we got Fedora: packages are reasonably up to date, it is close
to RHEL which is sort of useful for consistency, and Gnome is well
integrated.&lt;/p&gt;
&lt;p&gt;You might have read the word "Gnome". Yep, that's right, I am actually
using Gnome 3. Using some of the extensions makes it quite usable, even
for someone like me, who has been using tiling WMs for almost two years
now (i3 -&gt; bspwm -&gt; monsterwm). This combination is set up and
configured to my likings within about 8-10 hours and is perfoming quite
well right now.&lt;/p&gt;</summary><category term="desktop"></category><category term="fedora"></category><category term="gnome"></category></entry><entry><title>Quickie: fglrx on openSUSE 13.1</title><link href="https://sulami.github.io/quickie-fglrx-on-opensuse-13-1.html" rel="alternate"></link><updated>2013-11-22T14:24:00+01:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-11-22:quickie-fglrx-on-opensuse-13-1.html</id><summary type="html">&lt;p&gt;Some days ago, openSUSE 13.1 was officially released. The new version
seems to be pretty nice, but, as usually, breaks fglrx. The temporary
fix is quite easy:&lt;/p&gt;
&lt;p&gt;Open YaST and navigate to your software repositories. Edit your
fglrx-repo and change the domain to
&lt;em&gt;http://geeko.ioda.net/mirror/amd-fglrx-beta/openSUSE_13.1/&lt;/em&gt; . Now you
should be able to remove fglrx for 12.3 and install fglrx beta for 13.1.
In a first test, the beta driver seems to work pretty well.&lt;/p&gt;</summary><category term="quickie"></category><category term="fglrx"></category><category term="opensuse"></category><category term="updates"></category><category term="xorg"></category><category term="yast"></category></entry><entry><title>Quickie: disable auto-mute when skyping on PulseAudio</title><link href="https://sulami.github.io/quickie-disable-auto-mute-when-skyping-on-pulseaudio.html" rel="alternate"></link><updated>2013-09-27T10:12:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-09-27:quickie-disable-auto-mute-when-skyping-on-pulseaudio.html</id><summary type="html">&lt;p&gt;When skyping on Linux (and elsewhere) I like to listen to music in the
background, but PulseAudio automatically mutes my Amarok and other
players as soon as Skype plays some kind of sound, which is insanely
irritating. The fix is quite simpe, open &lt;em&gt;/etc/pulse/default.pa&lt;/em&gt; in your
favourite edior (hopefully vim) and look for "cork" and "phone stream".
Comment this. Restart PulseAudio/your PC.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #60a0b0; font-style: italic"&gt;### Cork music/video streams when a phone stream is active&lt;/span&gt;
&lt;span style="color: #60a0b0; font-style: italic"&gt;#load-module module-role-cork&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="quickie"></category><category term="pulseaudio"></category><category term="skype"></category></entry><entry><title>Quickie: restart Xorg with systemd</title><link href="https://sulami.github.io/quickie-restart-xorg-with-systemd.html" rel="alternate"></link><updated>2013-09-12T12:31:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-09-12:quickie-restart-xorg-with-systemd.html</id><summary type="html">&lt;p&gt;As I am using KDE-Plasma on fglrx, I can only run my Xorg-session for
about two days before running into the unholy "Maximum number of clients
reached"-error.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;xlsclients &lt;span style="color: #666666"&gt;|&lt;/span&gt; wc &lt;span style="color: #666666"&gt;-&lt;/span&gt;l
&lt;span style="color: #40a070"&gt;99&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;99 Clients should not be a problem at all, but fglrx sucks, so I need to
restart X. With systemd, this is pretty easy.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;systemctl isolate multi&lt;span style="color: #666666"&gt;-&lt;/span&gt;user.target
systemctl isolate graphical.target
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is comparable to &lt;em&gt;init 3&lt;/em&gt; and &lt;em&gt;init 5&lt;/em&gt;, but using systemd-targets.&lt;/p&gt;</summary><category term="quickie"></category><category term="systemd"></category><category term="xorg"></category></entry><entry><title>Quickie: Using KDE-apps on Windows</title><link href="https://sulami.github.io/quickie-using-kde-apps-on-windows.html" rel="alternate"></link><updated>2013-07-30T14:54:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-07-30:quickie-using-kde-apps-on-windows.html</id><summary type="html">&lt;p&gt;Well, yes, I occasionally  boot on Windows (8 Pro at the moment, but
generally I prefer 7) to get some stuff done I cannot do on Linux,
although I cannot really code on Windows, so I miss out there, too. One
thing I like are cross-platform apps, such as Firefox, which I can use
on both OSes. Those apps give me the possibilty to copy over my configs
and have the same UX all the time. Most of the time, I prefer the
programs coming from Linux, as those are generally better coded.&lt;/p&gt;
&lt;p&gt;While I got &lt;a href="http://windows.kde.org/" title="kde.org"&gt;KDE for Windows&lt;/a&gt; a while back, intending to use plasma
instead of the Windows 8 shell, which has not worked out yet, I can use
it to run standard KDE-apps such as konqueror, dolphin or amarok on
Windows. They use the proper Qt-theme and work surprisingly well. The
documentation is pretty bad, but installing should still be easy enough.&lt;/p&gt;
&lt;p&gt;&lt;img alt="amarok" src="/images/amarok-1024x609.png" /&gt;&lt;/p&gt;</summary><category term="quickie"></category><category term="kde"></category></entry><entry><title>Quickie: Map Wacom graphics-tablet to one screen only</title><link href="https://sulami.github.io/quickie-map-wacom-graphics-tablet-to-one-screen-only.html" rel="alternate"></link><updated>2013-07-16T13:01:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-07-16:quickie-map-wacom-graphics-tablet-to-one-screen-only.html</id><summary type="html">&lt;p&gt;I just dug out my Wacom Bamboo Pen, a simple cheap graphics-tablet I
bought on sale some time ago and plugged it into my openSUSE workstation
to do some graphical work. Awesome as openSUSE is, it automatically
detects it and everything works out of the box, thanks to preinstalled
xf86-input-wacom. Now I use two screens and want the tablet mapped to
only one of them to keep the correct aspect ratio, which I could not
change in the mouse options, but there is a quick way of setting this
up. First, get your output devices (screens) using xrandr:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #60a0b0; font-style: italic"&gt;% xrandr&lt;/span&gt;
Screen &lt;span style="color: #40a070"&gt;0&lt;/span&gt;: minimum &lt;span style="color: #40a070"&gt;320&lt;/span&gt; x &lt;span style="color: #40a070"&gt;200&lt;/span&gt;, current &lt;span style="color: #40a070"&gt;3840&lt;/span&gt; x &lt;span style="color: #40a070"&gt;1080&lt;/span&gt;, maximum &lt;span style="color: #40a070"&gt;3840&lt;/span&gt; x &lt;span style="color: #40a070"&gt;1920&lt;/span&gt;
DFP1 disconnected (normal left inverted right x axis y axis)
DFP2 disconnected (normal left inverted right x axis y axis)
DFP3 disconnected (normal left inverted right x axis y axis)
DFP4 disconnected (normal left inverted right x axis y axis)
DFP5 disconnected (normal left inverted right x axis y axis)
DFP6 disconnected (normal left inverted right x axis y axis)
DFP7 disconnected (normal left inverted right x axis y axis)
DFP8 disconnected (normal left inverted right x axis y axis)
DFP9 disconnected (normal left inverted right x axis y axis)
DFP10 connected &lt;span style="color: #40a070"&gt;1920&lt;/span&gt;x1080&lt;span style="color: #666666"&gt;+&lt;/span&gt;&lt;span style="color: #40a070"&gt;0&lt;/span&gt;&lt;span style="color: #666666"&gt;+&lt;/span&gt;&lt;span style="color: #40a070"&gt;0&lt;/span&gt; (normal left inverted right x axis y axis) &lt;span style="color: #40a070"&gt;598&lt;/span&gt;mm x &lt;span style="color: #40a070"&gt;336&lt;/span&gt;mm
   &lt;span style="color: #40a070"&gt;1920&lt;/span&gt;x1080      &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;&lt;span style="color: #666666"&gt;*+&lt;/span&gt;
   &lt;span style="color: #40a070"&gt;1680&lt;/span&gt;x1050      &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1400&lt;/span&gt;x1050      &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1600&lt;/span&gt;x900       &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1280&lt;/span&gt;x1024      &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1440&lt;/span&gt;x900       &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;59.9&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1280&lt;/span&gt;x960       &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1152&lt;/span&gt;x864       &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1280&lt;/span&gt;x768       &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1280&lt;/span&gt;x720       &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1024&lt;/span&gt;x768       &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;70.1&lt;/span&gt;     &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;800&lt;/span&gt;x600        &lt;span style="color: #40a070"&gt;72.2&lt;/span&gt;     &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;60.3&lt;/span&gt;     &lt;span style="color: #40a070"&gt;56.2&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;640&lt;/span&gt;x480        &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;72.8&lt;/span&gt;     &lt;span style="color: #40a070"&gt;67.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;59.9&lt;/span&gt;  
DFP11 connected &lt;span style="color: #40a070"&gt;1920&lt;/span&gt;x1080&lt;span style="color: #666666"&gt;+&lt;/span&gt;&lt;span style="color: #40a070"&gt;1920&lt;/span&gt;&lt;span style="color: #666666"&gt;+&lt;/span&gt;&lt;span style="color: #40a070"&gt;0&lt;/span&gt; (normal left inverted right x axis y axis) &lt;span style="color: #40a070"&gt;598&lt;/span&gt;mm x &lt;span style="color: #40a070"&gt;336&lt;/span&gt;mm
   &lt;span style="color: #40a070"&gt;1920&lt;/span&gt;x1080      &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;&lt;span style="color: #666666"&gt;*+&lt;/span&gt;
   &lt;span style="color: #40a070"&gt;1680&lt;/span&gt;x1050      &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1400&lt;/span&gt;x1050      &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1600&lt;/span&gt;x900       &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1280&lt;/span&gt;x1024      &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1440&lt;/span&gt;x900       &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;59.9&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1280&lt;/span&gt;x960       &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1152&lt;/span&gt;x864       &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1280&lt;/span&gt;x768       &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1280&lt;/span&gt;x720       &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;1024&lt;/span&gt;x768       &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;70.1&lt;/span&gt;     &lt;span style="color: #40a070"&gt;60.0&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;800&lt;/span&gt;x600        &lt;span style="color: #40a070"&gt;72.2&lt;/span&gt;     &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;60.3&lt;/span&gt;     &lt;span style="color: #40a070"&gt;56.2&lt;/span&gt;  
   &lt;span style="color: #40a070"&gt;640&lt;/span&gt;x480        &lt;span style="color: #40a070"&gt;75.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;72.8&lt;/span&gt;     &lt;span style="color: #40a070"&gt;67.0&lt;/span&gt;     &lt;span style="color: #40a070"&gt;59.9&lt;/span&gt;  
CRT1 disconnected (normal left inverted right x axis y axis)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, I use DFP10 and DFP11 as my outputs, DFP10 being my main
screen on the left. Now I use xsetwacom, which comes with
xf86-input-wacom, to tell the tablet to only use this output.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #60a0b0; font-style: italic"&gt;% xsetwacom --list devices&lt;/span&gt;
Wacom Bamboo Pen Finger touch           id: &lt;span style="color: #40a070"&gt;12&lt;/span&gt;  type: TOUCH     
Wacom Bamboo Pen Finger pad             id: &lt;span style="color: #40a070"&gt;13&lt;/span&gt;  type: PAD       
Wacom Bamboo Pen Pen stylus             id: &lt;span style="color: #40a070"&gt;14&lt;/span&gt;  type: STYLUS    
Wacom Bamboo Pen Pen eraser             id: &lt;span style="color: #40a070"&gt;15&lt;/span&gt;  type: ERASER
&lt;span style="color: #60a0b0; font-style: italic"&gt;% xsetwacom --set &amp;quot;Wacom Bamboo Pen Pen stylus&amp;quot; MapToOutput DPF10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="quickie"></category><category term="gimp"></category><category term="wacom"></category></entry><entry><title>Install Firefox Aurora on openSUSE (or most other Linux distros)</title><link href="https://sulami.github.io/install-firefox-aurora-on-opensuse-or-most-other-linux-distros.html" rel="alternate"></link><updated>2013-07-11T23:50:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-07-11:install-firefox-aurora-on-opensuse-or-most-other-linux-distros.html</id><summary type="html">&lt;p&gt;When it comes to software, I like to have the new stuff. Like Firefox
Aurora, the pre-beta version of our favourite webbrowser. There are two
main problems with getting Aurora to run on openSUSE: first, you have to
get the right version somewhere, which is harder than it might sound,
because the official download page only ships the 32bit version, and
let's be honest here, who still runs 32bits? But do not even start
searching, Mozilla has binaries ready for us, they are just hiding them
&lt;a href="https://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-mozilla-aurora-l10n/" title="mozilla.org"&gt;here&lt;/a&gt;. You probably want something like
&lt;em&gt;firefox-\&amp;lt;version&gt;.en-GB-x86_64.tar.bz2&lt;/em&gt;. Now that you got your new
browser, extract it somewhere (home-directories are a nice place) and
add a desktop icon (if there is some sort of desktop in your setup), an
icon can be found at &lt;em&gt;browser/icons&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You will most likely find one major flaw: there are no plugins, like
flash or java. Those are located at &lt;em&gt;/usr/lib/browser-plugins&lt;/em&gt;, symlink
all of them to your new profile like this (edit your profile name, it is
random):&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;ln &lt;span style="color: #666666"&gt;-&lt;/span&gt;s &lt;span style="color: #666666"&gt;/&lt;/span&gt;usr&lt;span style="color: #666666"&gt;/&lt;/span&gt;lib64&lt;span style="color: #666666"&gt;/&lt;/span&gt;browser&lt;span style="color: #666666"&gt;-&lt;/span&gt;plugins&lt;span style="color: #666666"&gt;/*&lt;/span&gt; &lt;span style="color: #666666"&gt;~/&lt;/span&gt;.mozilla&lt;span style="color: #666666"&gt;/&lt;/span&gt;firefox&lt;span style="color: #666666"&gt;/&lt;/span&gt;.&lt;span style="color: #007020; font-weight: bold"&gt;default&lt;/span&gt;&lt;span style="color: #666666"&gt;/&lt;/span&gt;plugins&lt;span style="color: #666666"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Symlinking will automatically update them when your package manager does
so, which is crucial for your security. When you are done, it looks
something like this (I use vimperator, which changes the UI a bit):&lt;/p&gt;
&lt;p&gt;&lt;img alt="aurora" src="/images/aurora-1024x752.png" /&gt;&lt;/p&gt;</summary><category term="aurora"></category><category term="firefox"></category><category term="flash"></category></entry><entry><title>Quickie: fighting with fglrx</title><link href="https://sulami.github.io/quickie-fighting-with-fglrx.html" rel="alternate"></link><updated>2013-07-09T22:12:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-07-09:quickie-fighting-with-fglrx.html</id><summary type="html">&lt;p&gt;I started playing games again, so I switched from radeon to fglrx, which
promptly broke my X11. In case you get stuck at "Reached target
graphical interface", switch to a different tty (alt+F1) and login. Then
look at the Xorg-logs at &lt;em&gt;/var/log/Xorg.0.log&lt;/em&gt;, which might say
something like&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;(WW) fglrx&lt;span style="color: #666666"&gt;:&lt;/span&gt; No matching device section &lt;span style="color: #007020; font-weight: bold"&gt;for&lt;/span&gt; instance (stuff) found
(EE) No devices detected
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This means in your &lt;em&gt;/etc/X11/xorg.conf&lt;/em&gt; is no section for your
videocard, which is not to big of a problem. Log into root or use sudo
to run lspci and then edit xorg.conf and switch the PCI-bus-number to
the one your card is using. Reboot.&lt;/p&gt;</summary><category term="quickie"></category><category term="fglrx"></category><category term="videocard"></category><category term="xorg"></category></entry><entry><title>Install Cyanogenmod from Linux</title><link href="https://sulami.github.io/install-cyanogenmod-from-linux.html" rel="alternate"></link><updated>2013-07-01T16:56:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-07-01:install-cyanogenmod-from-linux.html</id><summary type="html">&lt;p&gt;This is what I did today, I installed CM10 on my Sony Xperia Pro, which
was running CM7 before. There are a lot of guides around the net about
how to do this, but understandably most of them are written for Windows.
On openSUSE, flashing your rom is probably even easier than on Windows,
all you need is &lt;em&gt;android-tools&lt;/em&gt; from the official repos.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;sudo zypper install android&lt;span style="color: #666666"&gt;-&lt;/span&gt;tools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you get your rom zip (Xperia phones &lt;a href="http://freexperiaproject.com/" title="FXP"&gt;here&lt;/a&gt;), extract it to your
phones sd-card and follow the &lt;a href="https://sites.google.com/site/projectfreexperia/download/howto-install" title="FXP"&gt;instructions&lt;/a&gt;. When it comes to
flashing the CM kernel, first extract it on your PC, start a terminal
and type the fastboot-command. THEN plug in your phone while holding the
menu (or volup, depending on device) key. It should look something like
this:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #666666"&gt;~/&lt;/span&gt;somefolder &lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #666666"&gt;%&lt;/span&gt; fastboot flash boot boot.img
&lt;span style="color: #666666"&gt;&amp;lt;&lt;/span&gt; waiting &lt;span style="color: #007020; font-weight: bold"&gt;for&lt;/span&gt; device &lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt;
sending &lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt;boot&lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt; (&lt;span style="color: #40a070"&gt;6656&lt;/span&gt; KB)...
(bootloader) USB download speed was &lt;span style="color: #40a070"&gt;9185&lt;/span&gt;kB&lt;span style="color: #666666"&gt;/&lt;/span&gt;s
OKAY [ &lt;span style="color: #40a070"&gt;0.750&lt;/span&gt;s]
writing &lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt;boot&lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt;...
(bootloader) Download buffer format&lt;span style="color: #666666"&gt;:&lt;/span&gt; boot IMG
(bootloader) Flash of partition &lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt;boot&lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt; requested
(bootloader) S1 partID &lt;span style="color: #40a070"&gt;0x00000003&lt;/span&gt;, block &lt;span style="color: #40a070"&gt;0x00000280&lt;/span&gt;&lt;span style="color: #666666"&gt;-&lt;/span&gt;&lt;span style="color: #40a070"&gt;0x000002e3&lt;/span&gt;
(bootloader) Erase operation complete, &lt;span style="color: #40a070"&gt;0&lt;/span&gt; bad blocks encountered
(bootloader) Flashing...
(bootloader) Flash operation complete
OKAY [ &lt;span style="color: #40a070"&gt;1.332&lt;/span&gt;s]
finished. total time&lt;span style="color: #666666"&gt;:&lt;/span&gt; &lt;span style="color: #40a070"&gt;2.083&lt;/span&gt;s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The rest should be like in all other guides, pretty simple.&lt;/p&gt;</summary><category term="cyanogenmod"></category><category term="phone"></category></entry><entry><title>Quickie: auto-update openSUSE machines</title><link href="https://sulami.github.io/quickie-auto-update-opensuse-machines.html" rel="alternate"></link><updated>2013-06-24T10:36:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-06-24:quickie-auto-update-opensuse-machines.html</id><summary type="html">&lt;p&gt;OpenSUSE comes with a predefined cronjob for automatic updating, which
is great, but it is somewhat hidden, which is not that great. Anyway,
here you go:&lt;/p&gt;
&lt;p&gt;Open YaST, select the /etc/sysconfig editor and go here:&lt;/p&gt;
&lt;p&gt;[![yast][]][yast]&lt;/p&gt;
&lt;p&gt;There are a small set of settings regarding sending logs to a specified
email address, but everything should be pretty self-explanatory.&lt;/p&gt;
&lt;p&gt;[yast]: /images/yast.png&lt;/p&gt;</summary><category term="quickie"></category><category term="updates"></category><category term="yast"></category></entry><entry><title>Yakuake: handy konsole</title><link href="https://sulami.github.io/yakuake-handy-konsole.html" rel="alternate"></link><updated>2013-06-16T15:28:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-06-16:yakuake-handy-konsole.html</id><summary type="html">&lt;p&gt;Who knows me somewhat knows that on my screens are always terminals. I
use the terminals a lot and prefer them for most tasks over graphical
solutions. But now, that I do not use a tiling window manager anymore
(well, most of the time), keeping track of all those windows has become
a bit difficult. Enter yakuake, the KDE/Qt version of Guake, which is
the Gnome version of the Quake-terminal. The special part here is, it is
hidden by default and drops down on a keypress (default F12), so it is
always ready when needed. After getting used to it, it feels a lot
better than a bunch of regular Konsole sessions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="yakuake" src="/images/yakuake.png" /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, it is tabbed (including mousewheel-switching), and is
basically a modified Konsole window, even uses the same profiles.&lt;/p&gt;</summary><category term="cli"></category><category term="kde"></category><category term="yakuake"></category></entry><entry><title>Linux-powered alarm clock without a RasPi</title><link href="https://sulami.github.io/linux-powered-alarm-clock-without-a-raspi.html" rel="alternate"></link><updated>2013-06-11T11:39:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-06-11:linux-powered-alarm-clock-without-a-raspi.html</id><summary type="html">&lt;p&gt;My method of using the Raspberry Pi as alarm clock with mplayer-cronjobs
is also usable on regular desktop machines. To overcome the wasted power
and noise while sleeping, the computer is going to sleep as well,
suspending to either ram, disk or both. Then you can use &lt;em&gt;rtcwake&lt;/em&gt; to
let the hardware clock wake it up automatically just a minute before
alarm time.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;sudo rtcwake &lt;span style="color: #666666"&gt;-&lt;/span&gt;m no &lt;span style="color: #666666"&gt;-&lt;/span&gt;l &lt;span style="color: #666666"&gt;-&lt;/span&gt;t &lt;span style="border: 1px solid #FF0000"&gt;$&lt;/span&gt;(date &lt;span style="color: #666666"&gt;+%&lt;/span&gt;s &lt;span style="color: #666666"&gt;=&lt;/span&gt;d&lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt;tomorrow &lt;span style="color: #40a070"&gt;07&lt;/span&gt;&lt;span style="color: #666666"&gt;:&lt;/span&gt;&lt;span style="color: #40a070"&gt;30&lt;/span&gt;&lt;span style="border: 1px solid #FF0000"&gt;&amp;#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What this does is it prepares the hardware clock to wake, but does not
initiate the sleep yet, so you can continue using the computer and bring
it down later, before going to sleep. It is also told that the hardware
clock is using local time (&lt;em&gt;-l&lt;/em&gt;) and not UTC (&lt;em&gt;-u&lt;/em&gt;) and is given a
unix-timestamp by &lt;em&gt;date as&lt;/em&gt; the alarm time. For optimal results, have
your PC wake up a minute before you, so the cronjob does not get cut
off.&lt;/p&gt;</summary><category term="cron"></category><category term="mplayer"></category><category term="onlineradio"></category><category term="rtcwake"></category></entry><entry><title>Why you should not leave port 22 open if possible</title><link href="https://sulami.github.io/why-you-should-not-leave-port-22-open-if-possible.html" rel="alternate"></link><updated>2013-06-10T14:02:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-06-10:why-you-should-not-leave-port-22-open-if-possible.html</id><summary type="html">&lt;p&gt;&lt;a href="/images/ssh.png"&gt;&lt;img alt="ssh" src="/images/ssh.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, if your machine/network is worth anything, do not use port 22 for
ssh, use some random port instead.&lt;/p&gt;</summary><category term="security"></category><category term="ssh"></category></entry><entry><title>Raspberry Pi: Radio-Alarm</title><link href="https://sulami.github.io/raspberry-pi-radio-alarm.html" rel="alternate"></link><updated>2013-06-07T12:46:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-06-07:raspberry-pi-radio-alarm.html</id><summary type="html">&lt;p&gt;Some years ago I had the idea to use online radios as flexible alarm
clocks, but the main problem was having to run the computer all night
long, which results in high power consumption and noise. While netbooks
can counter this to a certain degree, the Raspberry Pi is the optimal
way of achieving our goal. You will need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi model B (+ power cable, SD-card with OS)&lt;/li&gt;
&lt;li&gt;speakers, preferably 3.5mm jack&lt;/li&gt;
&lt;li&gt;network/internet access&lt;/li&gt;
&lt;li&gt;control access directly or via ssh&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My RasPi is running &lt;a href="http://www.raspberrypi.org/downloads" title="RasPi"&gt;Raspian&lt;/a&gt; right now, but any Linux should do. You
connect everything and boot it up, then access a console. We need to
install mplayer, which will play our stream. If needed, update the
package lists before installing.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007020"&gt;# Raspian:&lt;/span&gt;
sudo apt&lt;span style="color: #666666"&gt;-&lt;/span&gt;get install mplayer

&lt;span style="color: #007020"&gt;# ArchARM (as root):&lt;/span&gt;
pacman &lt;span style="color: #666666"&gt;-&lt;/span&gt;Sy mplayer

&lt;span style="color: #007020"&gt;# Pidora:&lt;/span&gt;
sudo yum install mplayer

&lt;span style="color: #007020"&gt;# openSUSE:&lt;/span&gt;
sudo zypper in mplayer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next thing to do is writing a short playlist. The idea is to have a
fallback if the internet connection or your radio station goes down, so
you can switch to a local file to play instead. Use any text editor you
want (vi, vim, emacs, nano, or graphical ones) to write something like
my &lt;em&gt;playlist.pls&lt;/em&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #007020; font-weight: bold"&gt;[playlist]&lt;/span&gt;
&lt;span style="color: #4070a0"&gt;File1&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #4070a0"&gt;http://mp3.ht-stream.net&lt;/span&gt;
&lt;span style="color: #4070a0"&gt;Title1&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #4070a0"&gt;HouseTime&lt;/span&gt;
&lt;span style="color: #4070a0"&gt;Lenght1&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #4070a0"&gt;-1&lt;/span&gt;
&lt;span style="color: #4070a0"&gt;File2&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #4070a0"&gt;/home/pi/alarm.mp3&lt;/span&gt;
&lt;span style="color: #4070a0"&gt;Title2&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #4070a0"&gt;FallbackAlarm&lt;/span&gt;
&lt;span style="color: #4070a0"&gt;Length2&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #4070a0"&gt;-1&lt;/span&gt;
&lt;span style="color: #4070a0"&gt;NumberOfEntries&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #4070a0"&gt;2&lt;/span&gt;
&lt;span style="color: #4070a0"&gt;Version&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #4070a0"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mplayer will try to play File1, my stream, and if it fails, continue to
play File2, the fallback. You can also add more stations and files and
use the &lt;em&gt;-shuffle&lt;/em&gt; parameter later on to play random music.&lt;/p&gt;
&lt;p&gt;Now, ensure that cron is running ("&lt;em&gt;ps aux | grep cron&lt;/em&gt;" should give you
a hint) and type "&lt;em&gt;crontab -e&lt;/em&gt;" to enter your cronjob (preferably as a
non-root user). Depending on your OS there will be some comments you can
ignore. Add a entry like the following:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span style="color: #40a070"&gt;30&lt;/span&gt; &lt;span style="color: #40a070"&gt;6&lt;/span&gt; &lt;span style="color: #666666"&gt;*&lt;/span&gt; &lt;span style="color: #666666"&gt;*&lt;/span&gt; &lt;span style="color: #666666"&gt;*&lt;/span&gt; env DISPLAY&lt;span style="color: #666666"&gt;=:&lt;/span&gt;&lt;span style="color: #40a070"&gt;0.0&lt;/span&gt; &lt;span style="color: #666666"&gt;/&lt;/span&gt;usr&lt;span style="color: #666666"&gt;/&lt;/span&gt;bin&lt;span style="color: #666666"&gt;/&lt;/span&gt;mplayer &lt;span style="color: #666666"&gt;-&lt;/span&gt;playlist &lt;span style="color: #666666"&gt;/&lt;/span&gt;home&lt;span style="color: #666666"&gt;/&lt;/span&gt;pi&lt;span style="color: #666666"&gt;/&lt;/span&gt;playlist.pls &lt;span style="color: #666666"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #666666"&gt;/&lt;/span&gt;dev&lt;span style="color: #666666"&gt;/&lt;/span&gt;null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will fire up mplayer everyday at 6:30 in the morning using the
provided playlist and then deletes the text-output. Using complete paths
is crucial here, cron does not use the \$PATH variable. If you read up
on cron, you can setup complete sets of alarms, depending on days of the
week and more. The env setting might be needed on some systems which
won't play and istead send you something like "connection by pulse
refused" per system-mail. Save the file to install the cronjob.&lt;/p&gt;
&lt;p&gt;When waking up, you need to kill mplayer, as it is running in the
background. The easiest way of doing so is via "&lt;em&gt;killall mplayer&lt;/em&gt;",
which is not the finest way of doing things but should do the job.&lt;/p&gt;</summary><category term="cron"></category><category term="mplayer"></category><category term="onlineradio"></category><category term="raspberrypi"></category></entry><entry><title>Quickie: surround sound in KDE/PulseAudio</title><link href="https://sulami.github.io/quickie-surround-sound-in-kdepulseaudio.html" rel="alternate"></link><updated>2013-06-05T15:47:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-06-05:quickie-surround-sound-in-kdepulseaudio.html</id><summary type="html">&lt;p&gt;When using a surround sound setup like I do, you might want to use the
right settings for optimal results. On openSUSE, using KDE and
PulseAudio, there is a simple trick to make it actually work, otherwise
you won't get any sound output after switching to surround sound. First,
switch to surround sound on your desired output device in phonon. Then
you have to set the newly created output to default (on top) like this
in all lists:&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/sound.png"&gt;&lt;img alt="sound" src="/images/sound.png" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="quickie"></category><category term="kde"></category><category term="pulseaudio"></category></entry><entry><title>RasPi: security camera</title><link href="https://sulami.github.io/raspi-security-camera.html" rel="alternate"></link><updated>2013-05-24T09:56:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-05-24:raspi-security-camera.html</id><summary type="html">&lt;p&gt;Today I dug out my 2011 Raspberry Pi Model B (the first edition with
256M ram) and reimaged my SD-card. This time I wanted to try out
&lt;a href="http://www.raspberrypi.org/downloads" title="RasPi"&gt;Raspian&lt;/a&gt;, after only using ArchARM before. WOrked out pretty well, I
am somewhat lucky because the SSH-server is enabled by default, because
I happen do not own a HDMI-monitor. My first idea was to use a really
old webcam (VGA, nearly 10 years old, no Windows drivers existent
anymore) and stream it to my network. The more or less intelligent
choice was to use vlc for capturing and encoding, which made it quite
easy.&lt;/p&gt;
&lt;p&gt;First, we install vlc on our Pi, I am running headless (without X) via
SSH:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;sudo apt&lt;span style="color: #666666"&gt;-&lt;/span&gt;get update
sudo apt&lt;span style="color: #666666"&gt;-&lt;/span&gt;get install vlc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we connect the webcam and start our stream:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;clvc v4l2&lt;span style="color: #666666"&gt;:&lt;/span&gt;&lt;span style="color: #60a0b0; font-style: italic"&gt;///dev/video0 --sout &amp;#39;#standard{access=http,mux=ogg,dst=192.168.178.44:8080}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I used HTTP-streaming because it is pretty straight forward and okay for
my hobby project, UDP multicasts are probably better. The destination-IP
is the internal IP of the Pi. Then I open vlc on my machine and open a
network stream (ctrl-n), http://192.168.178.44:8080 and voila:&lt;/p&gt;
&lt;p&gt;&lt;img alt="picam" src="/images/picam-1024x435.png" /&gt;&lt;/p&gt;</summary><category term="raspberrypi"></category><category term="vlc"></category></entry><entry><title>Quickie: Fix Skype sound glitches on 64-bit Linux</title><link href="https://sulami.github.io/quickie-fix-skype-sound-glitches-on-64-bit-linux.html" rel="alternate"></link><updated>2013-05-23T09:28:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-05-23:quickie-fix-skype-sound-glitches-on-64-bit-linux.html</id><summary type="html">&lt;p&gt;After searching for fixed quite a long time, I finally found one that
actually fixed the occasional sound glitching in Skype with PulseAudio.
The solution is simple, open /etc/pulse/default.pa and change&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;load&lt;span style="color: #666666"&gt;-&lt;/span&gt;module module&lt;span style="color: #666666"&gt;-&lt;/span&gt;udev&lt;span style="color: #666666"&gt;-&lt;/span&gt;detect
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f0f0"&gt;&lt;pre style="line-height: 125%"&gt;load&lt;span style="color: #666666"&gt;-&lt;/span&gt;module module&lt;span style="color: #666666"&gt;-&lt;/span&gt;udev&lt;span style="color: #666666"&gt;-&lt;/span&gt;detect tsched&lt;span style="color: #666666"&gt;=&lt;/span&gt;&lt;span style="color: #40a070"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just reboot afterwards and everything should be fine.&lt;/p&gt;</summary><category term="quickie"></category><category term="pulseaudio"></category><category term="skype"></category></entry><entry><title>Zsh: the better bash</title><link href="https://sulami.github.io/zsh-the-better-bash.html" rel="alternate"></link><updated>2013-05-22T10:07:00+02:00</updated><author><name>sulami</name></author><id>tag:https://sulami.github.io,2013-05-22:zsh-the-better-bash.html</id><summary type="html">&lt;p&gt;When it comes to shell, most people use bash. It is installed and
selected by default on nearly every *nix system and does the job
reasonably well. But if you are using the shell a lot, like I do, you
can do better: get zsh, it is in every repository I know of and provides
some advantages.&lt;/p&gt;
&lt;p&gt;First off, it is fully compatible to bash and it's scripts, so nothing
will suddenly break here. Zsh is faster than bash, which is always good,
although the only way for me to recognize is to run
ncmpcpp-visualizations in fullscreen, which results in horrible
lag/tearing in bash. But the most important advantage for me is the
stellar tab-completion. Instead of block giant parts of your screen with
possible completions, it only shows them as long as needed, and
overwrites the space afterwards with useful content. Also, tapping tab
multiple times will cycle through the multiple possible completions, as
you may know from vi(m). It can complete commands, parameters, options,
users, hostnames, you name it. As if this is not enough, you get stuff
like prompts on both sides and an optional vi-control-mode using the
command/insert-model.&lt;/p&gt;
&lt;p&gt;Zsh can be enhanced even further by using plugins like
&lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting" title="GitHub"&gt;syntax-highlighting as you type&lt;/a&gt;. Useful and pretty. I also recommend
having a look at &lt;a href="https://github.com/robbyrussell/oh-my-zsh" title="GitHub"&gt;oh-my-zsh&lt;/a&gt;, which is a framework for managing
settings, themes and plugins, if you plan to use a lot of them.&lt;/p&gt;</summary><category term="cli"></category><category term="zsh"></category></entry></feed>